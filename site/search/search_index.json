{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Desarrollo Web en Entorno Servidor \u00b6 Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Desarrollo web en entorno servidor , que se imparte en el segundo curso del ciclo formativo de grado superior de Desarrollo de Aplicaciones Web. La duracio\u0301n del m\u00f3dulo es de 160 horas lectivas, a raz\u00f3n de 8 horas semanales , y se desarrolla a lo largo de los dos primeros trimestres del curso. \u00bfQu\u00e9 voy a aprender? \u00b6 A desarrollar aplicaciones web din\u00e1micas, que obtienen la informaci\u00f3n a partir de una base de datos. Analizar la estructura de una aplicaci\u00f3n cliente/servidor, separando el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio Obtener informaci\u00f3n a partir de los datos almacenados, as\u00ed como modificarlos. Modificar los datos almacenados. Resultados de aprendizaje \u00b6 Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del co\u0301digo en lenguajes de marcas. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el co\u0301digo de presentaci\u00f3n de la l\u00f3gica de negocio. Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. Desarrolla servicios Web analizando su funcionamiento e implantando la estructura de sus componentes. Genera p\u00e1ginas Web dina\u0301micas analizando y utilizando tecnolog\u00edas del servidor Web que a\u00f1adan co\u0301digo al lenguaje de marcas. Desarrolla aplicaciones Web hi\u0301bridas seleccionando y utilizando librer\u00edas de co\u0301digo y repositorios heterog\u00e9neos de informaci\u00f3n. Unidades did\u00e1cticas. Temporalizaci\u00f3n. \u00b6 A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 4. As\u00ed pues, desde la unidad 5 a la unidad 8 se ver\u00edan en la segunda evaluaci\u00f3n. Primera evaluaci\u00f3n: Arquitecturas Web (4h) Cliente/Servidor. MVC. El lenguaje PHP (32h) Condiciones y bucles. Arrays. Clases y objetos. Programaci\u00f3n Web (12h) Formularios. Cookies y sesi\u00f3n. Herramientas Web (20h) Composer . Uso de logs con Monolog . Webscrapping. Pruebas con PhpUnit . Documentacion con phpDocumentor . Segunda evaluaci\u00f3n: Acceso a datos (28h) SQL PDO Ficheros CSV y PDF. ORM con Eloquent . Frameworks PHP. Laravel b\u00e1sico (24h) Rutas. Vistas. Migraciones e integraci\u00f3n con Eloquent . Uso avanzado de Frameworks (24h) Plantillas con Blade . Autenticaci\u00f3n y autorizaci\u00f3n. i18n . Servicios REST (16h) Producci\u00f3n y consumo. AJAX con JSON . Interacci\u00f3n con Vue.js . Instrumentos de calificaci\u00f3n \u00b6 La nota de cada evaluaci\u00f3n se calcula mediante: 30% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto 3: Entregada y soluci\u00f3n correcta. 70% Actividad de evaluaci\u00f3n Una o dos pruebas por evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Inicio"},{"location":"index.html#desarrollo-web-en-entorno-servidor","text":"Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Desarrollo web en entorno servidor , que se imparte en el segundo curso del ciclo formativo de grado superior de Desarrollo de Aplicaciones Web. La duracio\u0301n del m\u00f3dulo es de 160 horas lectivas, a raz\u00f3n de 8 horas semanales , y se desarrolla a lo largo de los dos primeros trimestres del curso.","title":"Desarrollo Web en Entorno Servidor"},{"location":"index.html#que-voy-a-aprender","text":"A desarrollar aplicaciones web din\u00e1micas, que obtienen la informaci\u00f3n a partir de una base de datos. Analizar la estructura de una aplicaci\u00f3n cliente/servidor, separando el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio Obtener informaci\u00f3n a partir de los datos almacenados, as\u00ed como modificarlos. Modificar los datos almacenados.","title":"\u00bfQu\u00e9 voy a aprender?"},{"location":"index.html#resultados-de-aprendizaje","text":"Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del co\u0301digo en lenguajes de marcas. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el co\u0301digo de presentaci\u00f3n de la l\u00f3gica de negocio. Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. Desarrolla servicios Web analizando su funcionamiento e implantando la estructura de sus componentes. Genera p\u00e1ginas Web dina\u0301micas analizando y utilizando tecnolog\u00edas del servidor Web que a\u00f1adan co\u0301digo al lenguaje de marcas. Desarrolla aplicaciones Web hi\u0301bridas seleccionando y utilizando librer\u00edas de co\u0301digo y repositorios heterog\u00e9neos de informaci\u00f3n.","title":"Resultados de aprendizaje"},{"location":"index.html#unidades-didacticas-temporalizacion","text":"A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 4. As\u00ed pues, desde la unidad 5 a la unidad 8 se ver\u00edan en la segunda evaluaci\u00f3n. Primera evaluaci\u00f3n: Arquitecturas Web (4h) Cliente/Servidor. MVC. El lenguaje PHP (32h) Condiciones y bucles. Arrays. Clases y objetos. Programaci\u00f3n Web (12h) Formularios. Cookies y sesi\u00f3n. Herramientas Web (20h) Composer . Uso de logs con Monolog . Webscrapping. Pruebas con PhpUnit . Documentacion con phpDocumentor . Segunda evaluaci\u00f3n: Acceso a datos (28h) SQL PDO Ficheros CSV y PDF. ORM con Eloquent . Frameworks PHP. Laravel b\u00e1sico (24h) Rutas. Vistas. Migraciones e integraci\u00f3n con Eloquent . Uso avanzado de Frameworks (24h) Plantillas con Blade . Autenticaci\u00f3n y autorizaci\u00f3n. i18n . Servicios REST (16h) Producci\u00f3n y consumo. AJAX con JSON . Interacci\u00f3n con Vue.js .","title":"Unidades did\u00e1cticas. Temporalizaci\u00f3n."},{"location":"index.html#instrumentos-de-calificacion","text":"La nota de cada evaluaci\u00f3n se calcula mediante: 30% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto 3: Entregada y soluci\u00f3n correcta. 70% Actividad de evaluaci\u00f3n Una o dos pruebas por evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Instrumentos de calificaci\u00f3n"},{"location":"01arquitecturas.html","text":"Arquitecturas Web \u00b6 Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 4 sesiones Resultado de aprendizaje: Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. Criterios de evaluaci\u00f3n: Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor. Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor. Cliente / Servidor \u00b6 Arquitectura Cliente Servidor Uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes. En las aplicaciones web, el cliente es el navegador web. El cliente hace la petici\u00f3n ( request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde ( response ). P\u00e1gina web din\u00e1mica \u00b6 Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas: Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos. Utilizar servicios REST de terceros invocados desde JS. P\u00e1gina web din\u00e1mica Las tecnolog\u00edas empleadadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son: Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp Perfil Full-stack En las ofertas de trabajo cuando hacen referencia a un Full-stack developer , est\u00e1n buscando un perfil que domina tanto el front-end como el back-end . Arquitectura de 3 capas \u00b6 Hay que distinguir entre capas f\u00edsicas ( tier ) y capas l\u00f3gicas ( layer ). Tier \u00b6 Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN. Ejemplo de arquitectura en tres capas f\u00edsicas ( 3 tier ): Servidor Web Servidor de Aplicaciones Servidor de base de datos Arquitectura de tres capas f\u00edsicas Cluster en tiers No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal. Layer \u00b6 En cambio, las capas l\u00f3gicas ( layers ) organizan el c\u00f3digo respecto a su funcionalidad: Presentaci\u00f3n Negocio / Aplicaci\u00f3n / Proceso Datos / Persistencia Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas. Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas MVC \u00b6 Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones. Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son: Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador. Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista. Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interactura con la vista y realiza nuevas peticiones al controlador. Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP. Decisiones de dise\u00f1o \u00b6 \u00bfQu\u00e9 tama\u00f1o tiene el proyecto? \u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo? \u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales? \u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores? \u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario? \u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle? Herramientas \u00b6 Servidor Web \u00b6 Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...) El producto m\u00e1s implantando es Apache Web Server ( https://httpd.apache.org/ ), creado en 1995. Software libre y multiplataforma Sistem de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl Utiliza el archivo .htaccess para su configuraci\u00f3n En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx ( https://www.nginx.com ). Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache. Comparativa servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q Servidor de Aplicaciones \u00b6 Software que ofrece servicios adicionales a los de un servidor web: Clustering Balanceo de carga Tolerancia a fallos Tomcat ( http://tomcat.apache.org/ ) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java. Contiende un contenedor Web Java que interpreta Servlets y JSP. Info Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\" . Lenguajes en el servidor \u00b6 Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes: PHP JavaEE: Servlets / JSP Python ASP.NET \u2192 Visual Basic .NET / C# Ruby ... JavaEE \u00b6 Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones enterprise . Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones para grandes sistemas. PHP \u00b6 Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas En un principio, lenguaje no tipado. Actualmente en la versi\u00f3n 8. Se recomienda al menos utilizar una versi\u00f3n superior a la 7.0. C\u00f3digo embebido en el HTML Instrucciones entre etiquetas <?php y ?> Para generar codigo dentro de PHP, podemos usar la instrucci\u00f3n echo Multitud de librer\u00edas y frameworks: Laravel, Symfony, Codeigniter, Zend Su documentaci\u00f3n es bastante completa: https://www.php.net/manual/es/index.php El siguiente mapa mental muestra un resumen de sus elementos: Elementos del lenguaje PHP Durante las siguientes unidades vamos a estudiar PHP en profundidad. Puesta en marcha \u00b6 Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. A lo largo del curso vamos a utilizar la versi\u00f3n 8 de PHP. XAMPP \u00b6 XAMPP (https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas: X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP). A para Apache. M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web. P para PHP. la \u00faltima P para Perl. Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha. XAMPP en Windows Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo. Docker \u00b6 Docker ( https://www.docker.com ) es un gestor de contenedores, considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo. El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales. As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker . Para ello es necesario tener instalado Docker Desktop ( https://www.docker.com/products/docker-desktop ) en nuestros entornos de desarrollo. En los ordenadores del aula ya est\u00e1 instalado. Para instalarlo en casa, en el caso de Windows, es necesario instalar previamente WSL 2 , el cual es un subsistema de Linux dentro de Windows . A lo largo del curso iremos creando diferentes contenedores con los servicios necesarios, de manera que cada vez s\u00f3lo trabajemos con el software m\u00ednimo. Plantilla Apache + PHP \u00b6 Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arraque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache y PHP. Para ello, vamos a rellenar el archivo docker-compose.yaml con: # Services services : # Apache + PHP apache_php : image : php:8-apache # Preparamos un volumen para almacenar nuestro c\u00f3digo volumes : - ./src/:/var/www/html expose : - 80 ports : - 80:80 Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta src donde colocaremos nuestro c\u00f3digo fuente. Para facilitar la puesta en marcha, ten\u00e9is la plantilla disponible para su descarga . Cuando estemos listo, lanzaremos el servicio mediante: docker-compose up -d Si queremos ver el contenido de los archivos de log del servicio utilizaremos: docker-compose logs -f Para copiar un archivo desde nuestro sistema al interior del contenedor: docker cp ./miFichero idContenedor:/tmp Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema: docker cp idContenedor:/tmp/archivoAConsultar.txt ./ Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor: docker exec -it nombreContenedor bash Otros comandos que podemos llegar a utilizar son: docker ps : Ver los contenedores que se estan ejecutando docker ps -a : Ver todos los contenedores docker start nombreContenedor : Arrancar un contenedor docker images : Ver las im\u00e1genes que tenemos descargadas Otra forma m\u00e1s sencilla para lanzar de nuevo los contenedores y gestionarlos una vez creados es utilizar el interfaz gr\u00e1fico que ofrece Docker Desktop : Arranque de contenedor mediante Docker Desktop Docker stack Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetas para todo el stack de desarrollo. En posteriores sesiones utilizaremos tanto Devilbox ( http://devilbox.org ) como Laradock ( https://laradock.io ) Entorno de desarrollo \u00b6 En este curso vamos a emplear Visual Studio Code ( https://code.visualstudio.com ) como entorno de desarrollo (IDE). Existen otras alternativas, siendo PhpStorm la m\u00e1s conocida pero siendo de pago. Otra posibilidad es utilizar Eclipse , aunque es un entorno bastante pesado. VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones: PHP Intelephense Docker En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones). Por ejemplo, si abr\u00eds la extensi\u00f3n de Docker , podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo. Opciones mediante extensi\u00f3n Docker en VSCode Hola Mundo \u00b6 Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP. Si nombramos el archivo como index.jsp , al acceder a http://localhost autom\u00e1ticamente cargar\u00e1 el resultado: <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Hola Mundo </ title > </ head > < body > <?php echo \"Hola Mundo\" ; ?> </ body > </ html > Referencias \u00b6 Curso de introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/ Actividades \u00b6 Busca en internet cuales son los tres frameworks PHP m\u00e1s utilizados, y indica: Nombre y URL A\u00f1o de creaci\u00f3n \u00daltima versi\u00f3n Busca tres ofertas de trabajo de desarrollo de software en Infojobs en la provincia de Alicante que citen PHP y anota: Empresa + puesto + frameworks PHP + requ\u00edsitos + sueldo + enlace a la oferta. Una vez arrancado el servicio PHP (mediante XAMPP o Docker), crea el archivo info.php y a\u00f1ade el siguiente fragmento de c\u00f3digo: <?php phpinfo () ?> Anota los valores de: Versi\u00f3n de PHP Loaded Configuration File memory_limit DOCUMENT_ROOT Abre el archivo php.ini e indica para qu\u00e9 sirven las siguientes propiedades y qu\u00e9 valores tienen: file_uploads max_execution_time short_open_tag","title":"1.- Arquitecturas Web"},{"location":"01arquitecturas.html#arquitecturas-web","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 4 sesiones Resultado de aprendizaje: Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. Criterios de evaluaci\u00f3n: Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor. Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.","title":"Arquitecturas Web"},{"location":"01arquitecturas.html#cliente-servidor","text":"Arquitectura Cliente Servidor Uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes. En las aplicaciones web, el cliente es el navegador web. El cliente hace la petici\u00f3n ( request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde ( response ).","title":"Cliente / Servidor"},{"location":"01arquitecturas.html#pagina-web-dinamica","text":"Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas: Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos. Utilizar servicios REST de terceros invocados desde JS. P\u00e1gina web din\u00e1mica Las tecnolog\u00edas empleadadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son: Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp Perfil Full-stack En las ofertas de trabajo cuando hacen referencia a un Full-stack developer , est\u00e1n buscando un perfil que domina tanto el front-end como el back-end .","title":"P\u00e1gina web din\u00e1mica"},{"location":"01arquitecturas.html#arquitectura-de-3-capas","text":"Hay que distinguir entre capas f\u00edsicas ( tier ) y capas l\u00f3gicas ( layer ).","title":"Arquitectura de 3 capas"},{"location":"01arquitecturas.html#tier","text":"Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN. Ejemplo de arquitectura en tres capas f\u00edsicas ( 3 tier ): Servidor Web Servidor de Aplicaciones Servidor de base de datos Arquitectura de tres capas f\u00edsicas Cluster en tiers No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.","title":"Tier"},{"location":"01arquitecturas.html#layer","text":"En cambio, las capas l\u00f3gicas ( layers ) organizan el c\u00f3digo respecto a su funcionalidad: Presentaci\u00f3n Negocio / Aplicaci\u00f3n / Proceso Datos / Persistencia Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas. Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas","title":"Layer"},{"location":"01arquitecturas.html#mvc","text":"Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones. Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son: Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador. Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista. Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interactura con la vista y realiza nuevas peticiones al controlador. Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP.","title":"MVC"},{"location":"01arquitecturas.html#decisiones-de-diseno","text":"\u00bfQu\u00e9 tama\u00f1o tiene el proyecto? \u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo? \u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales? \u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores? \u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario? \u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?","title":"Decisiones de dise\u00f1o"},{"location":"01arquitecturas.html#herramientas","text":"","title":"Herramientas"},{"location":"01arquitecturas.html#servidor-web","text":"Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...) El producto m\u00e1s implantando es Apache Web Server ( https://httpd.apache.org/ ), creado en 1995. Software libre y multiplataforma Sistem de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl Utiliza el archivo .htaccess para su configuraci\u00f3n En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx ( https://www.nginx.com ). Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache. Comparativa servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q","title":"Servidor Web"},{"location":"01arquitecturas.html#servidor-de-aplicaciones","text":"Software que ofrece servicios adicionales a los de un servidor web: Clustering Balanceo de carga Tolerancia a fallos Tomcat ( http://tomcat.apache.org/ ) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java. Contiende un contenedor Web Java que interpreta Servlets y JSP. Info Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\" .","title":"Servidor de Aplicaciones"},{"location":"01arquitecturas.html#lenguajes-en-el-servidor","text":"Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes: PHP JavaEE: Servlets / JSP Python ASP.NET \u2192 Visual Basic .NET / C# Ruby ...","title":"Lenguajes en el servidor"},{"location":"01arquitecturas.html#puesta-en-marcha","text":"Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. A lo largo del curso vamos a utilizar la versi\u00f3n 8 de PHP.","title":"Puesta en marcha"},{"location":"01arquitecturas.html#xampp","text":"XAMPP (https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas: X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP). A para Apache. M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web. P para PHP. la \u00faltima P para Perl. Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha. XAMPP en Windows Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.","title":"XAMPP"},{"location":"01arquitecturas.html#docker","text":"Docker ( https://www.docker.com ) es un gestor de contenedores, considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo. El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales. As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker . Para ello es necesario tener instalado Docker Desktop ( https://www.docker.com/products/docker-desktop ) en nuestros entornos de desarrollo. En los ordenadores del aula ya est\u00e1 instalado. Para instalarlo en casa, en el caso de Windows, es necesario instalar previamente WSL 2 , el cual es un subsistema de Linux dentro de Windows . A lo largo del curso iremos creando diferentes contenedores con los servicios necesarios, de manera que cada vez s\u00f3lo trabajemos con el software m\u00ednimo.","title":"Docker"},{"location":"01arquitecturas.html#entorno-de-desarrollo","text":"En este curso vamos a emplear Visual Studio Code ( https://code.visualstudio.com ) como entorno de desarrollo (IDE). Existen otras alternativas, siendo PhpStorm la m\u00e1s conocida pero siendo de pago. Otra posibilidad es utilizar Eclipse , aunque es un entorno bastante pesado. VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones: PHP Intelephense Docker En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones). Por ejemplo, si abr\u00eds la extensi\u00f3n de Docker , podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo. Opciones mediante extensi\u00f3n Docker en VSCode","title":"Entorno de desarrollo"},{"location":"01arquitecturas.html#hola-mundo","text":"Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP. Si nombramos el archivo como index.jsp , al acceder a http://localhost autom\u00e1ticamente cargar\u00e1 el resultado: <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Hola Mundo </ title > </ head > < body > <?php echo \"Hola Mundo\" ; ?> </ body > </ html >","title":"Hola Mundo"},{"location":"01arquitecturas.html#referencias","text":"Curso de introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/","title":"Referencias"},{"location":"01arquitecturas.html#actividades","text":"Busca en internet cuales son los tres frameworks PHP m\u00e1s utilizados, y indica: Nombre y URL A\u00f1o de creaci\u00f3n \u00daltima versi\u00f3n Busca tres ofertas de trabajo de desarrollo de software en Infojobs en la provincia de Alicante que citen PHP y anota: Empresa + puesto + frameworks PHP + requ\u00edsitos + sueldo + enlace a la oferta. Una vez arrancado el servicio PHP (mediante XAMPP o Docker), crea el archivo info.php y a\u00f1ade el siguiente fragmento de c\u00f3digo: <?php phpinfo () ?> Anota los valores de: Versi\u00f3n de PHP Loaded Configuration File memory_limit DOCUMENT_ROOT Abre el archivo php.ini e indica para qu\u00e9 sirven las siguientes propiedades y qu\u00e9 valores tienen: file_uploads max_execution_time short_open_tag","title":"Actividades"},{"location":"02php.html","text":"El lenguaje PHP \u00b6 Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 32 sesiones Resultado de aprendizaje: Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. Criterios de evaluaci\u00f3n: Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido. Se han identificado las principales tecnolog\u00edas asociadas. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante. Se han utilizado directivas para modificar el comportamiento predeterminado. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables. Resultado de aprendizaje: Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. Criterios de evaluaci\u00f3n: Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias. Se han utilizado bucles y se ha verificado su funcionamiento. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos. Se han creado y utilizado funciones. Se han utilizado formularios web para interactuar con el usuario del navegador Web. Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario. Se han a\u00f1adido comentarios al c\u00f3digo. PHP \u00b6 Acr\u00f3nimo de Personal Home Page Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web. Sintaxis similar a C / Java El c\u00f3digo se ejecuta en el servidor (en Apache mediante mod_php) El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor. \u00daltima versi\u00f3n: 7.4 (Nov 2019), la 7.0 en Diciembre 2015 2x m\u00e1s r\u00e1pido que PHP5 Los bloques de c\u00f3digo se escriben entre <?php y ?> , mientras que las sentencias se separan mediante ; . <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < title > PHP f\u00e1cil </ title > </ head > < body > <!-- Muestra una frase con HTML --> Hola mundo < br > <!-- Muestra una frase con PHP --> <?php echo \"Es muy f\u00e1cil programar en PHP.\" ; ?> </ body > </ html > Generando contenido \u00b6 Tenemos tres posibilidad a la hora de generar contenido en nuestros documentos PHP: echo expresi\u00f3n; print (expresi\u00f3n); <?= expresi\u00f3n ?> Las que vamos a utilizar son echo cuando lo hagamos dentro de un bloque de instrucciones y <?= cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML. <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Echo y print </ title > </ head > < body > < p > <?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <? = \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <?php print ( \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ) ?> </ p > </ body > </ html > Comentarios \u00b6 Podemos utilizar comentarios de una l\u00ednea o de bloque: <?php // Este es un comentario de una sola l\u00ednea /* Este es un comentario que ocupa varias l\u00edneas */ ?> Errores \u00b6 Si hay un error de ejecuci\u00f3n, se produce un Fatal Error . Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11 Stack trace: # 0 { main } thrown in C:\\xampp\\htdocs\\202echo.php on line 11 Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de try / catch . Variables \u00b6 Comienzan por $ , por ejemplo $nombre . Empiezan por letras o guion bajo _ . Son case sensitive : $var != $VaR Conveniente inicializarlas, sino dan error. $nombre = \"Aitor\"; $nombreCompleto = \"Aitor Medrano\"; $numero = 123; $pi = 3.14; $suerte = true; $sinValor; echo $sinValor; Constantes \u00b6 Operadores \u00b6 Arim\u00e9ticos \u00b6 Comparaci\u00f3n \u00b6 L\u00f3gicos \u00b6 Asignaci\u00f3n \u00b6 Precedencia de operadores \u00b6 Trabajando con formularios \u00b6 Condiciones \u00b6 Bucles \u00b6 Referencias \u00b6 PHP en 2020 , por Jes\u00fas Amieiro Actividades \u00b6 Visualiza el v\u00eddeo de Jes\u00fas Amieiro sobre PHP en 2020 a partir del minuto 3:32 (son 40 minutos aproximadamente). 201tresfrases.php : Muestra 3 frases, cada una en un p\u00e1rrafo utilizando las tres posibilidades que existen de mostrar contenido. Tras ello, introduce dos comentarios, uno de bloque y otro de una l\u00ednea. 202calculos.php : Escribe un programa que utilice las variables $x y $y . As\u00edgnales los valores 166 y 999 respectivamente. A continuaci\u00f3n, muestra por pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3n y la multiplicaci\u00f3n. 203datosPersonales.php : Escribe un programa que almacene en variables tu nombre, primer apellido, segundo apellido, email, a\u00f1o de nacimiento y tel\u00e9fono. Luego mu\u00e9stralos por pantalla dentro de una tabla. 204datosPersonales.html y 204datosPersonales.php : Es el mismo ejercicio que el anterior, pero separando la l\u00f3gica. En el primer archivo crearemos el formulario para introducir los datos, y luego recogemos los datos y generamos la tabla en el segundo archivo. 205madlib.php : A partir de un nombre, un verbo, un adjetivo y un adverbio, crea una historia que contenga dichos elementos. Por ejemplo: Entrada: perro / caminar / azul / r\u00e1pidamente Salida: \u00bf Te gusta caminar con tu perro azul r\u00e1pidamente ? 205madlib2.php Crea un madlib m\u00e1s extenso, leyendo m\u00e1s datos de entrada. 206anyos.php : Tras leer la edad de una persona, mostrar la edad que tendr\u00e1 dentro de 10 a\u00f1os y hace 10 a\u00f1os. Adem\u00e1s, muestra qu\u00e9 a\u00f1o ser\u00e1 en cada uno de los casos. Finalmente, muestra el a\u00f1o de jubilaci\u00f3n suponiendo que trabajar\u00e1s hasta los 65 a\u00f1os. Tip: $anyoActual = date(\"Y\"); 207dinero.php : A partir de una cantidad de dinero, mostrar su descomposici\u00f3n en billetes (500, 200, 100, 50, 20, 10, 5) y monedas (2, 1), para que el n\u00famero de elementos sea m\u00ednimo. No se utilizar ninguna instrucci\u00f3n condicional. Por ejemplo, al introducir 139 deb\u00e9 mostrar: 1 billete de 100 1 billete de 20 1 billete de 10 1 billete de 5 2 monedas de 2 208mayor3.php : Sin hacer uso de condiciones compuestas, muestra el mayor de tres n\u00fameros ( a , b y c ). 208mayor3c.php : Utiliza condiciones compuestas. 209posnegcero.php : A partir de un numero , muestra por pantalla si el n\u00famero es positivo , negativo o cero . 210nombreEdad.php : A partir de una edad muestra por pantalla: beb\u00e9 si tiene menos de 3 a\u00f1os ni\u00f1o si tiene entre 3 y 12 a\u00f1os adolescente entre 13 y 17 a\u00f1os adulto entre 18 y 66 jubilado a partir de 67 211reloj.php : Escribe un programa que funcione similar a un reloj, de manera que a partir de los valores de hora , minuto y segundo muestre la hora dentro de un segundo. Tras las 23:59:59 ser\u00e1n las 0:0:0 . 212calendario.php : Escribe un programa similar a un calendario de manera que a partir de dia , mes y anyo muestre la fecha dentro de un d\u00eda. Debes tener en cuenta que no todos los meses tienen 30 d\u00edas. En este caso, no vamos a tener en cuenta los a\u00f1os bisiestos. 214ecuacion2g.php : Crea un programa que resuelva una ecuaci\u00f3n de 2\u00ba grado del tipo ax\u00b2 + bx + c = 0 . Ten en cuenta que puede tener 2, 1 o no tener soluci\u00f3n.","title":"2.- El lenguaje PHP"},{"location":"02php.html#el-lenguaje-php","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 32 sesiones Resultado de aprendizaje: Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. Criterios de evaluaci\u00f3n: Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido. Se han identificado las principales tecnolog\u00edas asociadas. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante. Se han utilizado directivas para modificar el comportamiento predeterminado. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables. Resultado de aprendizaje: Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. Criterios de evaluaci\u00f3n: Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias. Se han utilizado bucles y se ha verificado su funcionamiento. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos. Se han creado y utilizado funciones. Se han utilizado formularios web para interactuar con el usuario del navegador Web. Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario. Se han a\u00f1adido comentarios al c\u00f3digo.","title":"El lenguaje PHP"},{"location":"02php.html#php","text":"Acr\u00f3nimo de Personal Home Page Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web. Sintaxis similar a C / Java El c\u00f3digo se ejecuta en el servidor (en Apache mediante mod_php) El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor. \u00daltima versi\u00f3n: 7.4 (Nov 2019), la 7.0 en Diciembre 2015 2x m\u00e1s r\u00e1pido que PHP5 Los bloques de c\u00f3digo se escriben entre <?php y ?> , mientras que las sentencias se separan mediante ; . <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < title > PHP f\u00e1cil </ title > </ head > < body > <!-- Muestra una frase con HTML --> Hola mundo < br > <!-- Muestra una frase con PHP --> <?php echo \"Es muy f\u00e1cil programar en PHP.\" ; ?> </ body > </ html >","title":"PHP"},{"location":"02php.html#generando-contenido","text":"Tenemos tres posibilidad a la hora de generar contenido en nuestros documentos PHP: echo expresi\u00f3n; print (expresi\u00f3n); <?= expresi\u00f3n ?> Las que vamos a utilizar son echo cuando lo hagamos dentro de un bloque de instrucciones y <?= cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML. <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Echo y print </ title > </ head > < body > < p > <?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <? = \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <?php print ( \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ) ?> </ p > </ body > </ html >","title":"Generando contenido"},{"location":"02php.html#comentarios","text":"Podemos utilizar comentarios de una l\u00ednea o de bloque: <?php // Este es un comentario de una sola l\u00ednea /* Este es un comentario que ocupa varias l\u00edneas */ ?>","title":"Comentarios"},{"location":"02php.html#errores","text":"Si hay un error de ejecuci\u00f3n, se produce un Fatal Error . Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11 Stack trace: # 0 { main } thrown in C:\\xampp\\htdocs\\202echo.php on line 11 Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de try / catch .","title":"Errores"},{"location":"02php.html#variables","text":"Comienzan por $ , por ejemplo $nombre . Empiezan por letras o guion bajo _ . Son case sensitive : $var != $VaR Conveniente inicializarlas, sino dan error. $nombre = \"Aitor\"; $nombreCompleto = \"Aitor Medrano\"; $numero = 123; $pi = 3.14; $suerte = true; $sinValor; echo $sinValor;","title":"Variables"},{"location":"02php.html#constantes","text":"","title":"Constantes"},{"location":"02php.html#operadores","text":"","title":"Operadores"},{"location":"02php.html#arimeticos","text":"","title":"Arim\u00e9ticos"},{"location":"02php.html#comparacion","text":"","title":"Comparaci\u00f3n"},{"location":"02php.html#logicos","text":"","title":"L\u00f3gicos"},{"location":"02php.html#asignacion","text":"","title":"Asignaci\u00f3n"},{"location":"02php.html#precedencia-de-operadores","text":"","title":"Precedencia de operadores"},{"location":"02php.html#trabajando-con-formularios","text":"","title":"Trabajando con formularios"},{"location":"02php.html#condiciones","text":"","title":"Condiciones"},{"location":"02php.html#bucles","text":"","title":"Bucles"},{"location":"02php.html#referencias","text":"PHP en 2020 , por Jes\u00fas Amieiro","title":"Referencias"},{"location":"02php.html#actividades","text":"Visualiza el v\u00eddeo de Jes\u00fas Amieiro sobre PHP en 2020 a partir del minuto 3:32 (son 40 minutos aproximadamente). 201tresfrases.php : Muestra 3 frases, cada una en un p\u00e1rrafo utilizando las tres posibilidades que existen de mostrar contenido. Tras ello, introduce dos comentarios, uno de bloque y otro de una l\u00ednea. 202calculos.php : Escribe un programa que utilice las variables $x y $y . As\u00edgnales los valores 166 y 999 respectivamente. A continuaci\u00f3n, muestra por pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3n y la multiplicaci\u00f3n. 203datosPersonales.php : Escribe un programa que almacene en variables tu nombre, primer apellido, segundo apellido, email, a\u00f1o de nacimiento y tel\u00e9fono. Luego mu\u00e9stralos por pantalla dentro de una tabla. 204datosPersonales.html y 204datosPersonales.php : Es el mismo ejercicio que el anterior, pero separando la l\u00f3gica. En el primer archivo crearemos el formulario para introducir los datos, y luego recogemos los datos y generamos la tabla en el segundo archivo. 205madlib.php : A partir de un nombre, un verbo, un adjetivo y un adverbio, crea una historia que contenga dichos elementos. Por ejemplo: Entrada: perro / caminar / azul / r\u00e1pidamente Salida: \u00bf Te gusta caminar con tu perro azul r\u00e1pidamente ? 205madlib2.php Crea un madlib m\u00e1s extenso, leyendo m\u00e1s datos de entrada. 206anyos.php : Tras leer la edad de una persona, mostrar la edad que tendr\u00e1 dentro de 10 a\u00f1os y hace 10 a\u00f1os. Adem\u00e1s, muestra qu\u00e9 a\u00f1o ser\u00e1 en cada uno de los casos. Finalmente, muestra el a\u00f1o de jubilaci\u00f3n suponiendo que trabajar\u00e1s hasta los 65 a\u00f1os. Tip: $anyoActual = date(\"Y\"); 207dinero.php : A partir de una cantidad de dinero, mostrar su descomposici\u00f3n en billetes (500, 200, 100, 50, 20, 10, 5) y monedas (2, 1), para que el n\u00famero de elementos sea m\u00ednimo. No se utilizar ninguna instrucci\u00f3n condicional. Por ejemplo, al introducir 139 deb\u00e9 mostrar: 1 billete de 100 1 billete de 20 1 billete de 10 1 billete de 5 2 monedas de 2 208mayor3.php : Sin hacer uso de condiciones compuestas, muestra el mayor de tres n\u00fameros ( a , b y c ). 208mayor3c.php : Utiliza condiciones compuestas. 209posnegcero.php : A partir de un numero , muestra por pantalla si el n\u00famero es positivo , negativo o cero . 210nombreEdad.php : A partir de una edad muestra por pantalla: beb\u00e9 si tiene menos de 3 a\u00f1os ni\u00f1o si tiene entre 3 y 12 a\u00f1os adolescente entre 13 y 17 a\u00f1os adulto entre 18 y 66 jubilado a partir de 67 211reloj.php : Escribe un programa que funcione similar a un reloj, de manera que a partir de los valores de hora , minuto y segundo muestre la hora dentro de un segundo. Tras las 23:59:59 ser\u00e1n las 0:0:0 . 212calendario.php : Escribe un programa similar a un calendario de manera que a partir de dia , mes y anyo muestre la fecha dentro de un d\u00eda. Debes tener en cuenta que no todos los meses tienen 30 d\u00edas. En este caso, no vamos a tener en cuenta los a\u00f1os bisiestos. 214ecuacion2g.php : Crea un programa que resuelva una ecuaci\u00f3n de 2\u00ba grado del tipo ax\u00b2 + bx + c = 0 . Ten en cuenta que puede tener 2, 1 o no tener soluci\u00f3n.","title":"Actividades"},{"location":"04herramientas.html","text":"Herramientas \u00b6 Composer \u00b6 Para instalar Composer, necesitamos modificar nuestra instalaci\u00f3n. Si estamos usando XAMPP, hemos de instalar Composer en el propio sistema operativo TODO: COMPLETAR En cambio, si usamos Docker, necesitamos modificar la configuraci\u00f3n de nuestro contenedor. Pruebas con PhpUnit \u00b6 Documentaci\u00f3n con phpDocumentor \u00b6","title":"Herramientas"},{"location":"04herramientas.html#herramientas","text":"","title":"Herramientas"},{"location":"04herramientas.html#composer","text":"Para instalar Composer, necesitamos modificar nuestra instalaci\u00f3n. Si estamos usando XAMPP, hemos de instalar Composer en el propio sistema operativo TODO: COMPLETAR En cambio, si usamos Docker, necesitamos modificar la configuraci\u00f3n de nuestro contenedor.","title":"Composer"},{"location":"04herramientas.html#pruebas-con-phpunit","text":"","title":"Pruebas con PhpUnit"},{"location":"04herramientas.html#documentacion-con-phpdocumentor","text":"","title":"Documentaci\u00f3n con phpDocumentor"},{"location":"05accesoDatos.html","text":"Acceso a datos (26h) \u00b6 Duraci\u00f3n estimada: 26 sesiones Esta unidad trabaja el acceso a los datos desde PHP. SQL \u00b6 Partir de un par de ejemplos ... la Tienda puede ser uno Otro un Yahoo Respuestas (https://github.com/PacktPublishing/Laravel-Foundations-Basics-to-Every-App) ... Tabla pregunta: con id, titulo, descripcion, created_at, updated_at La Severo Tienda \u00b6 A lo largo de esta unidad vamos a trabajar con una base de datos existente, que almacena la informaci\u00f3n de un tienda: Vamos a ver como crear la base de datos dependiendo de nuestra instalaci\u00f3n, XAMP \u00b6 Si estamos utilizando XAMP, ya viene instalado tanto con MariaDB como sistema gestor de base de datos, como PhpMyAdmin como herramienta web para facilitar su gesti\u00f3n. As\u00ed pues, si entra\u00eds a ...... podr\u00e9is ver el inicio Docker \u00b6 En cambio, si trabajamos con Docker, tendremos que modificar nuestra plantilla, para configurar un nuevo contenedor que contenga la base de datos. mysqli \u00b6 PDO \u00b6 Acceso a ficheros \u00b6 Archivos CSV \u00b6 Archivos PDF \u00b6 Eloquent \u00b6 Mapeo ORM \u00b6 Modelo \u00b6 php artisan make:model Pregunta","title":"Acceso a datos (26h)"},{"location":"05accesoDatos.html#acceso-a-datos-26h","text":"Duraci\u00f3n estimada: 26 sesiones Esta unidad trabaja el acceso a los datos desde PHP.","title":"Acceso a datos (26h)"},{"location":"05accesoDatos.html#sql","text":"Partir de un par de ejemplos ... la Tienda puede ser uno Otro un Yahoo Respuestas (https://github.com/PacktPublishing/Laravel-Foundations-Basics-to-Every-App) ... Tabla pregunta: con id, titulo, descripcion, created_at, updated_at","title":"SQL"},{"location":"05accesoDatos.html#la-severo-tienda","text":"A lo largo de esta unidad vamos a trabajar con una base de datos existente, que almacena la informaci\u00f3n de un tienda: Vamos a ver como crear la base de datos dependiendo de nuestra instalaci\u00f3n,","title":"La Severo Tienda"},{"location":"05accesoDatos.html#mysqli","text":"","title":"mysqli"},{"location":"05accesoDatos.html#pdo","text":"","title":"PDO"},{"location":"05accesoDatos.html#acceso-a-ficheros","text":"","title":"Acceso a ficheros"},{"location":"05accesoDatos.html#archivos-csv","text":"","title":"Archivos CSV"},{"location":"05accesoDatos.html#archivos-pdf","text":"","title":"Archivos PDF"},{"location":"05accesoDatos.html#eloquent","text":"","title":"Eloquent"},{"location":"05accesoDatos.html#mapeo-orm","text":"","title":"Mapeo ORM"},{"location":"06frameworks.html","text":"Frameworks PHP. Laravel \u00b6 Duraci\u00f3n estimada: 40 sesiones Frameworks \u00b6 Puesta en marcha \u00b6 Los requisitos para poner en marcha Laravel son tener instalados los comandos php y composer . Para crear el proyecto: composer create-project laravel/laravel --prefer-dist NombreProyecto Una vez creado el proyecto Laravel, es conveniente situarse en el ra\u00edz del mismo y ejecutar composer update php artisan key:generate Configuraci\u00f3n \u00b6 En el directorio raiz del proyecto tenemos el archivo .env . Este archivo define las variables de entorno que personalizan nuestro entorno. As\u00ed pues, es aqu\u00ed donde deberemos configurar nuestra base de datos. DB_HOST=localhost DB_DATABASE=severorespuestas DB_USERNAME=severo DB_PASSWORD=ochoa Migraciones \u00b6 https://richos.gitbooks.io/laravel-5/content/capitulos/chapter6.html A la hora de definir nuestra base de datos, el primer paso suele ser su dise\u00f1o tanto conceptual, como l\u00f3gico y f\u00edsico, haciendo uso de alg\u00fana herramienta gr\u00e1fica tipo MySQL Workbench para la posterior generaci\u00f3n del c\u00f3digo SQL con la estructura de las tablas y sus relaciones. Las migraciones ( https://laravel.com/docs/master/migrations ) permiten a Laravel definir la estructura de la base de datos de manera program\u00e1tica, esto es, mediante PHP en vez de SQL. Adem\u00e1s de desacoplar el sistema gestor de base de datos de nuestra aplicaci\u00f3n mediante el uso de la fachada Schema , las migraciones evitan errores de sintaxis y mantienen los entornos de producci\u00f3n, preproducci\u00f3n, pruebas y entorno local con la misma informaci\u00f3n. Todo proyecto Laravel viene con tres migraciones por defecto, las cuales podemos modificar o eliminar. Creaci\u00f3n \u00b6 Para crear una migraci\u00f3n podemos crear directamente nuestras clases en la ruta database/migrations/ de nuestro proyecto Laravel , o utilizar los comandos de artisan . Para crear nuestras migraciones en Laravel se usa el siguiente comando: php artisan make:migration nombreMigracion que nos crea la clase vac\u00eda para escribir nuestra migraci\u00f3n, o bien el comando: php artisan make:migration nombreMigracion --create=nombreTabla que nos agrega una plantilla de trabajo b\u00e1sica para empezar a trabajar. Esta clase que acabamos de crear hereda de Illuminate\\Database\\Migrations\\Migration . El m\u00e9todo que se encarga de generar la migraci\u00f3n es up() , y dentro de \u00e9l, mediante la clase Schema indicaremos la estructura de la tabla junto con sus atributos y dominios. Para deshacer las migraciones rescribiremos el m\u00e9todo down() . Por ejemplo, vamos a crear la tabla preguntas de nuestra aplicaci\u00f3n. Tablas en plural Ya lo comentamos en la unidad anterior. Laravel se basa en la convenci\u00f3n sobre la configuraci\u00f3n. Por ello, las tablas se nombran en plural. Para ello, primero crearemos la migraci\u00f3n mediante la consola: php artisan make:migration createPreguntasTable Y posteriormente rellenaremos los m\u00e9todos con su definici\u00f3n: <?php use Illuminate\\Database\\Migrations\\Migration ; use Illuminate\\Database\\Schema\\Blueprint ; use Illuminate\\Support\\Facades\\Schema ; class CreatePreguntasTable extends Migration { /** * Ejecuta las migraciones. * * @return void */ public function up () { Schema :: create ( 'preguntas' , function ( Blueprint $table ) { $table -> id (); $table -> string ( 'titulo' ); $table -> text ( 'descripcion' ) -> nullable (); $table -> timestamps (); }); } /** * Deshace las migraciones. * * @return void */ public function down () { Schema :: dropIfExists ( 'preguntas' ); } } Si nos fijamos en el m\u00e9todo up() , mediante Schema::create('nombreTabla', funcionBlueprint) le indicamos los campos, con sus tipos de datos y restricciones. Pod\u00e9is consultar todos los tipos disponibles en https://laravel.com/docs/master/migrations#available-column-types . Los tipos m\u00e1s utilizados son: id : crea un campo autoincrementable y le asigna la clave primaria. No recibe ning\u00fan par\u00e1metro. integer : crea un campo de tipo entero decimal : crea un campo de tipo decimal, al que se le indican tanto la precisi\u00f3n como las escala (d\u00edgitos decimales) table->decimal('amount', $precision = 8, $scale = 2); string : crea una campo de tipo cadena text : crea un campo de tipo texto timestamp : crea las columnas created_at y updated_at . No recibe ning\u00fan par\u00e1metro. Ejecuci\u00f3n \u00b6 As\u00ed pues, una vez creada la migraci\u00f3n, s\u00f3lo nos queda ejecutarla mediante la opci\u00f3n migrate : php artisan migrate Si en alg\u00fan momento queremos deshacer la \u00faltima migraci\u00f3n, realizaremos un rollback : php artisan migrate:rollback Finalmente, si queremos deshacer todos los cambios, realizaremos un reset : php artisan migrate:reset As\u00ed pues, si ejecutamos nuestras migraciones y nos conectamos a nuestra base de datos, podremos ver c\u00f3mo se ha creado la tabla preguntas . $ php artisan migrate Migrating: 2021_08_06_112804_create_preguntas_table Migrated: 2021_08_06_112804_create_preguntas_table (97.47ms) Y si nos conectamos a la base de datos, veremos que realmente ha creado dos tablas: migrations y preguntas . La tabla migrations almacena un historico de las migraciones realizadas y nuestra tabla preguntas tiene la estructura que hab\u00edamos definido: Rutas \u00b6 https://laravel.com/docs/master/routing Vistas \u00b6 https://laravel.com/docs/master/views Controladores \u00b6 https://laravel.com/docs/master/controllers Validaciones \u00b6 https://laravel.com/docs/master/validation Integraci\u00f3n con Eloquent \u00b6 Para integrar nuestras migraciones con los modelos, si el nombre de la tabla coincide, ya estar\u00edan conectados. Modelos en singural Ya lo comentamos en la unidad anterior. Laravel se basa en la convenci\u00f3n sobre la configuraci\u00f3n. Por ello, los modelos se nombran en singular, y su tablas asociadas en plural. Para facilitar el trabajo a la hora de crear los modelos, podemos indicarle que tambi\u00e9n genere su migraci\u00f3n con la opci\u00f3n --migration o -m (la migraci\u00f3n se crea desde 0, con lo cual no puede existir una migraci\u00f3n previa con dicho nombre): php artisan make:model nombreModelo --migration La migraci\u00f3n creada tendr\u00e1 el esqueleto rellenado con los atributos $table->id() y el $table->timestamps() . Controlador recurso \u00b6 M\u00e9todos create, show.... Formulario de create Pregunta Formulario de store Pregunta 1 Validar 2 Guardar en BD 3 Redirect a vista/controller TODO: Revisar las validaciones de los controladores ... creo que el lugar correcto es aqu\u00ed al recoger datos Referencias \u00b6 Curso de Laravel de www.pildorasinformaticas.es: https://www.pildorasinformaticas.es/course/laravel/ Libro / Apuntes sobre Laravel 5 en castellano: https://richos.gitbooks.io/laravel-5 Apuntes Laravel creados por igomis , docente del IES Batoi de Alcoy(valenciano): https://igomis.github.io/apunts/ Actividades \u00b6","title":"Frameworks PHP. Laravel"},{"location":"06frameworks.html#frameworks-php-laravel","text":"Duraci\u00f3n estimada: 40 sesiones","title":"Frameworks PHP. Laravel"},{"location":"06frameworks.html#frameworks","text":"","title":"Frameworks"},{"location":"06frameworks.html#puesta-en-marcha","text":"Los requisitos para poner en marcha Laravel son tener instalados los comandos php y composer . Para crear el proyecto: composer create-project laravel/laravel --prefer-dist NombreProyecto Una vez creado el proyecto Laravel, es conveniente situarse en el ra\u00edz del mismo y ejecutar composer update php artisan key:generate","title":"Puesta en marcha"},{"location":"06frameworks.html#configuracion","text":"En el directorio raiz del proyecto tenemos el archivo .env . Este archivo define las variables de entorno que personalizan nuestro entorno. As\u00ed pues, es aqu\u00ed donde deberemos configurar nuestra base de datos. DB_HOST=localhost DB_DATABASE=severorespuestas DB_USERNAME=severo DB_PASSWORD=ochoa","title":"Configuraci\u00f3n"},{"location":"06frameworks.html#migraciones","text":"https://richos.gitbooks.io/laravel-5/content/capitulos/chapter6.html A la hora de definir nuestra base de datos, el primer paso suele ser su dise\u00f1o tanto conceptual, como l\u00f3gico y f\u00edsico, haciendo uso de alg\u00fana herramienta gr\u00e1fica tipo MySQL Workbench para la posterior generaci\u00f3n del c\u00f3digo SQL con la estructura de las tablas y sus relaciones. Las migraciones ( https://laravel.com/docs/master/migrations ) permiten a Laravel definir la estructura de la base de datos de manera program\u00e1tica, esto es, mediante PHP en vez de SQL. Adem\u00e1s de desacoplar el sistema gestor de base de datos de nuestra aplicaci\u00f3n mediante el uso de la fachada Schema , las migraciones evitan errores de sintaxis y mantienen los entornos de producci\u00f3n, preproducci\u00f3n, pruebas y entorno local con la misma informaci\u00f3n. Todo proyecto Laravel viene con tres migraciones por defecto, las cuales podemos modificar o eliminar.","title":"Migraciones"},{"location":"06frameworks.html#creacion","text":"Para crear una migraci\u00f3n podemos crear directamente nuestras clases en la ruta database/migrations/ de nuestro proyecto Laravel , o utilizar los comandos de artisan . Para crear nuestras migraciones en Laravel se usa el siguiente comando: php artisan make:migration nombreMigracion que nos crea la clase vac\u00eda para escribir nuestra migraci\u00f3n, o bien el comando: php artisan make:migration nombreMigracion --create=nombreTabla que nos agrega una plantilla de trabajo b\u00e1sica para empezar a trabajar. Esta clase que acabamos de crear hereda de Illuminate\\Database\\Migrations\\Migration . El m\u00e9todo que se encarga de generar la migraci\u00f3n es up() , y dentro de \u00e9l, mediante la clase Schema indicaremos la estructura de la tabla junto con sus atributos y dominios. Para deshacer las migraciones rescribiremos el m\u00e9todo down() . Por ejemplo, vamos a crear la tabla preguntas de nuestra aplicaci\u00f3n. Tablas en plural Ya lo comentamos en la unidad anterior. Laravel se basa en la convenci\u00f3n sobre la configuraci\u00f3n. Por ello, las tablas se nombran en plural. Para ello, primero crearemos la migraci\u00f3n mediante la consola: php artisan make:migration createPreguntasTable Y posteriormente rellenaremos los m\u00e9todos con su definici\u00f3n: <?php use Illuminate\\Database\\Migrations\\Migration ; use Illuminate\\Database\\Schema\\Blueprint ; use Illuminate\\Support\\Facades\\Schema ; class CreatePreguntasTable extends Migration { /** * Ejecuta las migraciones. * * @return void */ public function up () { Schema :: create ( 'preguntas' , function ( Blueprint $table ) { $table -> id (); $table -> string ( 'titulo' ); $table -> text ( 'descripcion' ) -> nullable (); $table -> timestamps (); }); } /** * Deshace las migraciones. * * @return void */ public function down () { Schema :: dropIfExists ( 'preguntas' ); } } Si nos fijamos en el m\u00e9todo up() , mediante Schema::create('nombreTabla', funcionBlueprint) le indicamos los campos, con sus tipos de datos y restricciones. Pod\u00e9is consultar todos los tipos disponibles en https://laravel.com/docs/master/migrations#available-column-types . Los tipos m\u00e1s utilizados son: id : crea un campo autoincrementable y le asigna la clave primaria. No recibe ning\u00fan par\u00e1metro. integer : crea un campo de tipo entero decimal : crea un campo de tipo decimal, al que se le indican tanto la precisi\u00f3n como las escala (d\u00edgitos decimales) table->decimal('amount', $precision = 8, $scale = 2); string : crea una campo de tipo cadena text : crea un campo de tipo texto timestamp : crea las columnas created_at y updated_at . No recibe ning\u00fan par\u00e1metro.","title":"Creaci\u00f3n"},{"location":"06frameworks.html#ejecucion","text":"As\u00ed pues, una vez creada la migraci\u00f3n, s\u00f3lo nos queda ejecutarla mediante la opci\u00f3n migrate : php artisan migrate Si en alg\u00fan momento queremos deshacer la \u00faltima migraci\u00f3n, realizaremos un rollback : php artisan migrate:rollback Finalmente, si queremos deshacer todos los cambios, realizaremos un reset : php artisan migrate:reset As\u00ed pues, si ejecutamos nuestras migraciones y nos conectamos a nuestra base de datos, podremos ver c\u00f3mo se ha creado la tabla preguntas . $ php artisan migrate Migrating: 2021_08_06_112804_create_preguntas_table Migrated: 2021_08_06_112804_create_preguntas_table (97.47ms) Y si nos conectamos a la base de datos, veremos que realmente ha creado dos tablas: migrations y preguntas . La tabla migrations almacena un historico de las migraciones realizadas y nuestra tabla preguntas tiene la estructura que hab\u00edamos definido:","title":"Ejecuci\u00f3n"},{"location":"06frameworks.html#rutas","text":"https://laravel.com/docs/master/routing","title":"Rutas"},{"location":"06frameworks.html#vistas","text":"https://laravel.com/docs/master/views","title":"Vistas"},{"location":"06frameworks.html#controladores","text":"https://laravel.com/docs/master/controllers","title":"Controladores"},{"location":"06frameworks.html#validaciones","text":"https://laravel.com/docs/master/validation","title":"Validaciones"},{"location":"06frameworks.html#integracion-con-eloquent","text":"Para integrar nuestras migraciones con los modelos, si el nombre de la tabla coincide, ya estar\u00edan conectados. Modelos en singural Ya lo comentamos en la unidad anterior. Laravel se basa en la convenci\u00f3n sobre la configuraci\u00f3n. Por ello, los modelos se nombran en singular, y su tablas asociadas en plural. Para facilitar el trabajo a la hora de crear los modelos, podemos indicarle que tambi\u00e9n genere su migraci\u00f3n con la opci\u00f3n --migration o -m (la migraci\u00f3n se crea desde 0, con lo cual no puede existir una migraci\u00f3n previa con dicho nombre): php artisan make:model nombreModelo --migration La migraci\u00f3n creada tendr\u00e1 el esqueleto rellenado con los atributos $table->id() y el $table->timestamps() .","title":"Integraci\u00f3n con Eloquent"},{"location":"06frameworks.html#controlador-recurso","text":"M\u00e9todos create, show.... Formulario de create Pregunta Formulario de store Pregunta 1 Validar 2 Guardar en BD 3 Redirect a vista/controller TODO: Revisar las validaciones de los controladores ... creo que el lugar correcto es aqu\u00ed al recoger datos","title":"Controlador recurso"},{"location":"06frameworks.html#referencias","text":"Curso de Laravel de www.pildorasinformaticas.es: https://www.pildorasinformaticas.es/course/laravel/ Libro / Apuntes sobre Laravel 5 en castellano: https://richos.gitbooks.io/laravel-5 Apuntes Laravel creados por igomis , docente del IES Batoi de Alcoy(valenciano): https://igomis.github.io/apunts/","title":"Referencias"},{"location":"06frameworks.html#actividades","text":"","title":"Actividades"},{"location":"07frameworks2.html","text":"Uso avanzado de Frameworks \u00b6 Plantillas con Blade \u00b6 Integraci\u00f3n de CSS y JS \u00b6 Autenticaci\u00f3n y autorizaci\u00f3n \u00b6 https://igomis.github.io/apunts/docs/4.8.Laravel.html Tip Pregunta Respuesta Relacion P-R Autenticaci\u00f3n Relacion con usuario en modelo Relacionar con migraciones Relacionar en vistas Proteger edit, update por Auth:id p\u00e1gina profile ... listado de preguntas y respuestas del usuario Utilizar la fuci\u00f3n diffForHumas para ellapsed time Antes se hac\u00eda as\u00ed.... Run scaffolding php artisan make:auth Crea el HomeController , que utiliza el middleware auth . Middleware \u00b6 Componente que se situa entre el enrutador y el controlador. Explicar Ejecutar las migraciones Explorar los ficheros generados Auth:routes() ??? Laravel Breeze \u00b6 Laravel Breeze es un starter kit que se compone de un conjunto de rutas, controladores y vistas necesarias para regitrar y autenticar usuarios en cualquier aplicaci\u00f3n. Las vistas est\u00e1n creadas con Laravel y los estilos con Tailwind CSS. Primero hemos de a\u00f1adir la dependencia mediante Composer: composer require laravel/breeze --dev Tras ello, ejecutaremos el comando breeze:install para generar todo el contenido necesario (rutas, vistas, controladores, recursos, ...), compilaremos todos los assets CSS y generaremos las migraciones: php artisan breeze:install npm install npm run dev php artisan migrate Mailtrap Para poder probar el env\u00edo de correo mailtrap.io, servidor de correo para pruebas para equipos de desarrollo (realmente no est\u00e1 env\u00edando los correos) i18n \u00b6","title":"Uso avanzado de Frameworks"},{"location":"07frameworks2.html#uso-avanzado-de-frameworks","text":"","title":"Uso avanzado de Frameworks"},{"location":"07frameworks2.html#plantillas-con-blade","text":"","title":"Plantillas con Blade"},{"location":"07frameworks2.html#integracion-de-css-y-js","text":"","title":"Integraci\u00f3n de CSS y JS"},{"location":"07frameworks2.html#autenticacion-y-autorizacion","text":"https://igomis.github.io/apunts/docs/4.8.Laravel.html Tip Pregunta Respuesta Relacion P-R Autenticaci\u00f3n Relacion con usuario en modelo Relacionar con migraciones Relacionar en vistas Proteger edit, update por Auth:id p\u00e1gina profile ... listado de preguntas y respuestas del usuario Utilizar la fuci\u00f3n diffForHumas para ellapsed time Antes se hac\u00eda as\u00ed.... Run scaffolding php artisan make:auth Crea el HomeController , que utiliza el middleware auth .","title":"Autenticaci\u00f3n y autorizaci\u00f3n"},{"location":"07frameworks2.html#middleware","text":"Componente que se situa entre el enrutador y el controlador. Explicar Ejecutar las migraciones Explorar los ficheros generados Auth:routes() ???","title":"Middleware"},{"location":"07frameworks2.html#laravel-breeze","text":"Laravel Breeze es un starter kit que se compone de un conjunto de rutas, controladores y vistas necesarias para regitrar y autenticar usuarios en cualquier aplicaci\u00f3n. Las vistas est\u00e1n creadas con Laravel y los estilos con Tailwind CSS. Primero hemos de a\u00f1adir la dependencia mediante Composer: composer require laravel/breeze --dev Tras ello, ejecutaremos el comando breeze:install para generar todo el contenido necesario (rutas, vistas, controladores, recursos, ...), compilaremos todos los assets CSS y generaremos las migraciones: php artisan breeze:install npm install npm run dev php artisan migrate Mailtrap Para poder probar el env\u00edo de correo mailtrap.io, servidor de correo para pruebas para equipos de desarrollo (realmente no est\u00e1 env\u00edando los correos)","title":"Laravel Breeze"},{"location":"07frameworks2.html#i18n","text":"","title":"i18n"},{"location":"08rest.html","text":"Servicios REST \u00b6 Duraci\u00f3n estimada: 32 sesiones Producci\u00f3n y consumo \u00b6 AJAX con JSON \u00b6 Interacci\u00f3n con Vue.js \u00b6 https://manuais.iessanclemente.net/index.php/LARAVEL_Framework_-_Tutorial_01_-_Creaci\u00f3n_de_API_RESTful_(actualizado) https://github.com/jmnavarro/http-api-design https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api https://leanpub.com/build-apis-you-wont-hate","title":"Servicios REST"},{"location":"08rest.html#servicios-rest","text":"Duraci\u00f3n estimada: 32 sesiones","title":"Servicios REST"},{"location":"08rest.html#produccion-y-consumo","text":"","title":"Producci\u00f3n y consumo"},{"location":"08rest.html#ajax-con-json","text":"","title":"AJAX con JSON"},{"location":"08rest.html#interaccion-con-vuejs","text":"https://manuais.iessanclemente.net/index.php/LARAVEL_Framework_-_Tutorial_01_-_Creaci\u00f3n_de_API_RESTful_(actualizado) https://github.com/jmnavarro/http-api-design https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api https://leanpub.com/build-apis-you-wont-hate","title":"Interacci\u00f3n con Vue.js"}]}