{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Desenvolupament Web en Entorn Servidor \u00b6 Ac\u00ed pots trobar les anotacions del m\u00f2dul de Desenvolupament web en entorn servidor , que s'imparteix en el segon curs del cicle formatiu de grau superior de Desenvolupament d'Aplicacions Web. La duraci\u00f3 del m\u00f2dul \u00e9s de 160 hores lectives, a ra\u00f3 de 8 hores setmanals , i es desenvolupa al llarg dels dos primers trimestres del curs. S'ha planificat basant-se en 3 sessions de 3,3 i 2 hores lectives per setmana. Qu\u00e8 aprendr\u00e9? \u00b6 A desenvolupar aplicacions web din\u00e0miques, que obtenen la informaci\u00f3 a partir d'una base de dades. Analitzar l'estructura d'una aplicaci\u00f3 client/servidor, separant el codi de presentaci\u00f3 de la l\u00f2gica de negoci Obtindre informaci\u00f3 a partir de les dades emmagatzemades, aix\u00ed com modificar-los. Resultats d'aprenentatge \u00b6 Selecciona les arquitectures i tecnologies de programaci\u00f3 Web en entorn servidor, analitzant les seues capacitats i caracter\u00edstiques pr\u00f2pies. Escriu sent\u00e8ncies executables per un servidor Web reconeixent i aplicant procediments d'integraci\u00f3 del codi en llenguatges de marques. Escriu blocs de sent\u00e8ncies embeguts en llenguatges de marques, seleccionant i utilitzant les estructures de programaci\u00f3. Desenvolupa aplicacions Web embegudes en llenguatges de marques analitzant i incorporant funcionalitats segons especificacions. Desenvolupa aplicacions Web identificant i aplicant mecanismes per a separar el codi de presentaci\u00f3 de la l\u00f2gica de negoci. Desenvolupa aplicacions d'acc\u00e9s a magatzems de dades, aplicant mesures per a mantindre la seguretat i la integritat de la informaci\u00f3. Desenvolupa serveis Web analitzant el seu funcionament i implantant l'estructura dels seus components. Genera p\u00e0gines Web din\u00e0miques analitzant i utilitzant tecnologies del servidor Web que afigen codi al llenguatge de marques. Desenvolupa aplicacions Web h\u00edbrides seleccionant i utilitzant llibreries de codi i repositoris heterogenis d'informaci\u00f3. Unitats did\u00e0ctiques / Temporalitzaci\u00f3 \u00b6 A continuaci\u00f3 es mostren les unitats did\u00e0ctiques i una estimaci\u00f3 temporal de cadascuna d'elles. La primera avaluaci\u00f3 contindria les unitats compreses entre la 1 i 5, i part de la unitats 6. Aix\u00ed doncs, des de la meitat de la unitat 6 a la unitat 9 es veuran en la segona avaluaci\u00f3. Primera avaluaci\u00f3 \u00b6 Duraci\u00f3 estimada: 72 hores Arquitectures Web (4h) Client/Servidor. MVC. El llenguatge PHP (26h) Condicions i bucles. Arrays. Orientaci\u00f3 a objectes amb *PHP (18h) Classes i objectes Namespaces Excepcions Programaci\u00f3 Web (12h) Formularis. Cookies i sessi\u00f3. Eines Web (16h) Composer . \u00das de logs amb Monolog . Webscraping . Documentaci\u00f3 amb phpDocumentor . Proves amb PhpUnit . Segona avaluaci\u00f3 \u00b6 Duraci\u00f3 estimada: 88 hores Acc\u00e9s a dades (28h) SQL PDO Fitxers CSV i PDF. ORM amb Eloquent . Frameworks PHP. Laravel b\u00e0sic (24h) Rutes Vistes. Migracions i integraci\u00f3 amb Eloquent . \u00das avan\u00e7at de Frameworks (22h) Plantilles amb Blade . Autenticaci\u00f3 i autoritzaci\u00f3. i18n . Serveis REST (12h) Producci\u00f3 i consum. AJAX amb JSON . Interacci\u00f3 amb Vue.js . Instruments de qualificaci\u00f3 \u00b6 La nota de cada avaluaci\u00f3 es calcula mitjan\u00e7ant: 30% Treball en Classe / Activitats S'avaluen totes les activitats realitzades en classe i a casa. Les activitats s'avaluen mitjan\u00e7ant tasques de Aules amb qualificacions compreses entre 0 i 3 punts: 0: No entregada 1: Entregada per\u00f2 soluci\u00f3 err\u00f2nia o incompleta 2: Entregada i soluci\u00f3 acceptable, encara que t\u00e9 algun apartat incomplet 3: Entregada i soluci\u00f3 correcta. 70% Activitat d'avaluaci\u00f3 Una o dues proves per avaluaci\u00f3. La nota final es calcula mitjan\u00e7ant la mitjana de cadascuna de les avaluacions.","title":"Inicio"},{"location":"index.html#desenvolupament-web-en-entorn-servidor","text":"Ac\u00ed pots trobar les anotacions del m\u00f2dul de Desenvolupament web en entorn servidor , que s'imparteix en el segon curs del cicle formatiu de grau superior de Desenvolupament d'Aplicacions Web. La duraci\u00f3 del m\u00f2dul \u00e9s de 160 hores lectives, a ra\u00f3 de 8 hores setmanals , i es desenvolupa al llarg dels dos primers trimestres del curs. S'ha planificat basant-se en 3 sessions de 3,3 i 2 hores lectives per setmana.","title":"Desenvolupament Web en Entorn Servidor"},{"location":"index.html#que-aprendre","text":"A desenvolupar aplicacions web din\u00e0miques, que obtenen la informaci\u00f3 a partir d'una base de dades. Analitzar l'estructura d'una aplicaci\u00f3 client/servidor, separant el codi de presentaci\u00f3 de la l\u00f2gica de negoci Obtindre informaci\u00f3 a partir de les dades emmagatzemades, aix\u00ed com modificar-los.","title":"Qu\u00e8 aprendr\u00e9?"},{"location":"index.html#resultats-daprenentatge","text":"Selecciona les arquitectures i tecnologies de programaci\u00f3 Web en entorn servidor, analitzant les seues capacitats i caracter\u00edstiques pr\u00f2pies. Escriu sent\u00e8ncies executables per un servidor Web reconeixent i aplicant procediments d'integraci\u00f3 del codi en llenguatges de marques. Escriu blocs de sent\u00e8ncies embeguts en llenguatges de marques, seleccionant i utilitzant les estructures de programaci\u00f3. Desenvolupa aplicacions Web embegudes en llenguatges de marques analitzant i incorporant funcionalitats segons especificacions. Desenvolupa aplicacions Web identificant i aplicant mecanismes per a separar el codi de presentaci\u00f3 de la l\u00f2gica de negoci. Desenvolupa aplicacions d'acc\u00e9s a magatzems de dades, aplicant mesures per a mantindre la seguretat i la integritat de la informaci\u00f3. Desenvolupa serveis Web analitzant el seu funcionament i implantant l'estructura dels seus components. Genera p\u00e0gines Web din\u00e0miques analitzant i utilitzant tecnologies del servidor Web que afigen codi al llenguatge de marques. Desenvolupa aplicacions Web h\u00edbrides seleccionant i utilitzant llibreries de codi i repositoris heterogenis d'informaci\u00f3.","title":"Resultats d'aprenentatge"},{"location":"index.html#unitats-didactiques-temporalitzacio","text":"A continuaci\u00f3 es mostren les unitats did\u00e0ctiques i una estimaci\u00f3 temporal de cadascuna d'elles. La primera avaluaci\u00f3 contindria les unitats compreses entre la 1 i 5, i part de la unitats 6. Aix\u00ed doncs, des de la meitat de la unitat 6 a la unitat 9 es veuran en la segona avaluaci\u00f3.","title":"Unitats did\u00e0ctiques / Temporalitzaci\u00f3"},{"location":"index.html#primera-avaluacio","text":"Duraci\u00f3 estimada: 72 hores Arquitectures Web (4h) Client/Servidor. MVC. El llenguatge PHP (26h) Condicions i bucles. Arrays. Orientaci\u00f3 a objectes amb *PHP (18h) Classes i objectes Namespaces Excepcions Programaci\u00f3 Web (12h) Formularis. Cookies i sessi\u00f3. Eines Web (16h) Composer . \u00das de logs amb Monolog . Webscraping . Documentaci\u00f3 amb phpDocumentor . Proves amb PhpUnit .","title":"Primera avaluaci\u00f3"},{"location":"index.html#segona-avaluacio","text":"Duraci\u00f3 estimada: 88 hores Acc\u00e9s a dades (28h) SQL PDO Fitxers CSV i PDF. ORM amb Eloquent . Frameworks PHP. Laravel b\u00e0sic (24h) Rutes Vistes. Migracions i integraci\u00f3 amb Eloquent . \u00das avan\u00e7at de Frameworks (22h) Plantilles amb Blade . Autenticaci\u00f3 i autoritzaci\u00f3. i18n . Serveis REST (12h) Producci\u00f3 i consum. AJAX amb JSON . Interacci\u00f3 amb Vue.js .","title":"Segona avaluaci\u00f3"},{"location":"index.html#instruments-de-qualificacio","text":"La nota de cada avaluaci\u00f3 es calcula mitjan\u00e7ant: 30% Treball en Classe / Activitats S'avaluen totes les activitats realitzades en classe i a casa. Les activitats s'avaluen mitjan\u00e7ant tasques de Aules amb qualificacions compreses entre 0 i 3 punts: 0: No entregada 1: Entregada per\u00f2 soluci\u00f3 err\u00f2nia o incompleta 2: Entregada i soluci\u00f3 acceptable, encara que t\u00e9 algun apartat incomplet 3: Entregada i soluci\u00f3 correcta. 70% Activitat d'avaluaci\u00f3 Una o dues proves per avaluaci\u00f3. La nota final es calcula mitjan\u00e7ant la mitjana de cadascuna de les avaluacions.","title":"Instruments de qualificaci\u00f3"},{"location":"01arquitecturas.html","text":"Arquitectures Web \u00b6 Duraci\u00f3 i criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 4 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 1. Selecciona les arquitectures i tecnologies de programaci\u00f3 web en entorn servidor, analitzant les seves capacitats i caracter\u00edstiques pr\u00f2pies. a) S'han caracteritzat i diferenciat els models d'execuci\u00f3 de codi en el servidor i en el client Web. b) S'han reconegut els avantatges que proporciona la generaci\u00f3 din\u00e0mica de p\u00e0gines Web i les seues difer\u00e8ncies amb la inclusi\u00f3 de sent\u00e8ncies de guions a l'interior de les p\u00e0gines Web. c) S'han identificat els mecanismes d'execuci\u00f3 de codi en els servidors Web. d) S'han reconegut les funcionalitats que aporten els servidors d'aplicacions i la seua integraci\u00f3 amb els servidors Web. e) S'han identificat i caracteritzat els principals llenguatges i tecnologies relacionats amb la programaci\u00f3 Web en entorn servidor. f) S'han verificat els mecanismes d'integraci\u00f3 dels llenguatges de marques amb els llenguatges de programaci\u00f3 en entorn servidor. g) S'han reconegut i avaluat les eines de programaci\u00f3 en entorn servidor. Les arquitectures web defineixen la forma en qu\u00e8 les p\u00e0gines d'un lloc web estan estructurades i enlla\u00e7ades entre si. Les aplicacions web es basen en el model client-servidor. Client / Servidor \u00b6 Arquitectura Client Servidor El client inicia el proc\u00e9s amb una sol\u00b7licitud al servidor que genera un missatge de resposta. Ambdos es comuniquen utilitzant un protocol com\u00fa. En les aplicacions web, els clients solen ser navegadors els que realitzen peticions( request normalment mitjan\u00e7ant el protocol GET mitjan\u00e7ant el port 80/443), i estos responen( response ) amb la p\u00e0gina web sol\u00b7licitada o amb un missatge d\u2019error. La noves arquitectures substitueixen el servidor per un balancejador de c\u00e0rrega de manera que N servidors donen resposta a M clients. P\u00e0gina web din\u00e0mica \u00b6 Si la p\u00e0gina web \u00fanicament cont\u00e9 HTML + CSS es considera una p\u00e0gina est\u00e0tica. Per a generar una p\u00e0gina din\u00e0mica, on el contingut canvia, hui dia tenim dues alternatives: Utilitzar un llenguatge de servidor que genere el contingut, ja siga mitjan\u00e7ant l'acc\u00e9s a una BD o serveis externs. Utilitzar serveis REST de tercers invocats des de JS. P\u00e0gina web din\u00e0mica Les tecnologies utlitzades (i els perfils de desenvolupament associats) per a la generaci\u00f3 de p\u00e0gines din\u00e0miques s\u00f3n: Perfil Ferramenta Tecnologia Front-end / client Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp Perfil Full-stack En les ofertes de treball quan fan refer\u00e8ncia a un Full-stack developer , estan buscant un perfil que domina tant el front-end com el back-end . Single Page Application \u00b6 Hui dia, gran part del desenvolupament web est\u00e0 mudant des d'una arquitectura web client-servidor cl\u00e0ssica on el client realitza una petici\u00f3 al backend , per una arquitectura SPA on el client guanya molt major pes i segueix una programaci\u00f3 reactiva que accedeix a serveis remots REST que realitzen les operacions (comunicant-se mitjan\u00e7ant JSON ). Arquitectura tradicional vs SPA Arquitectura de 3 capas \u00b6 Cal distingir entre capes f\u00edsiques ( tier ) i capes l\u00f2giques ( layer ). Tier \u00b6 Capa f\u00edsica d'una arquitectura suposa un nou element de maquinari separat f\u00edsicament. Les capes f\u00edsiques m\u00e9s allunyades del client estan m\u00e9s protegides, tant per firewalls com per VPN . Exemple d'arquitectura en tres capes f\u00edsiques (3 tier ): Servidor Web Servidor d'Aplicacions Servidor de base de dades Arquitectura de tres capes f\u00edsiques Cluster en tiers No confondre les capes amb la quantitat de servidors. Actualment es treballa amb arquitectures amb m\u00faltiples servidors en una mateixa capa f\u00edsica mitjan\u00e7ant un cl\u00faster, per a oferir toler\u00e0ncia a errors i escalabilitat horitzontal. Layer \u00b6 En canvi, les capes l\u00f2giques ( layers ) organitzen el codi respecte a la seua funcionalitat: Presentaci\u00f3 Negoci / Aplicaci\u00f3 / Proc\u00e9s Dades / Persist\u00e8ncia Com s'observa, cadascuna de les capes es pot implementar amb diferents llenguatges de programaci\u00f3 i/o eines. Arquitectura de tres capes f\u00edsiques en tres l\u00f2giques MVC \u00b6 Model-View-Controller o Model-Vista-Controlador \u00e9s un model d'arquitectura que separa les dades i la l\u00f2gica de negoci respecte a la interf\u00edcie d'usuari i el component encarregat de gestionar els esdeveniments i les comunicacions. En separar els components en elements conceptuals permet reutilitzar el codi i millorar la seua organitzaci\u00f3 i manteniment. Els seus elements s\u00f3n: Model: representa la informaci\u00f3 i gestiona tots els accessos a aquesta, tant consultes com actualitzacions provinents, normalment, d'una base de dades. S'accedeix via el controlador. Controlador: Respon a les accions de l'usuari, i realitza peticions al model per a sol\u00b7licitar informaci\u00f3. Despr\u00e9s de rebre la resposta del model, li envia les dades a la vista. Vista: Presenta a l'usuari de manera visual el model i les dades preparades pel controlador. L'usuari *interactura amb la vista i realitza noves peticions al controlador. L'estudiarem en m\u00e9s detall en aprofundir en l'\u00fas dels frameworks PHP . Decisions de disseny \u00b6 Quina grand\u00e0ria t\u00e9 el projecte? Quins llenguatges de programaci\u00f3 conec? Val la pena l'esfor\u00e7 d'aprendre un nou? Usar\u00e9 eines de codi obert o eines propiet\u00e0ries? Quin \u00e9s el cost d'utilitzar solucions comercials? Programar\u00e9 l'aplicaci\u00f3 jo nom\u00e9s o formar\u00e9 part d'un grup de programadors? Conte amb algun servidor web o gestor de base de dades disponible o puc decidir lliurement utilitzar el que crega necessari? Quin tipus de llic\u00e8ncia aplicar\u00e9 a l'aplicaci\u00f3 que desenvolupe? Herramientas \u00b6 Servidor Web \u00b6 Programari que rep peticions HTTP (GET, POST, DELETE, ...). Retorna el recurs sol\u00b7licitat (HTML, CSS, JS, JSON, imatges, etc...) El producte m\u00e9s implantant \u00e9s Apatxe Web Server ( https://httpd.apache.org/ ), creat en 1995. Programari lliure i multiplataforma Sistema de m\u00f2duls din\u00e0mics \u2192 PHP, Python, Perl Utilitza l'arxiu .*htaccess per a la seua configuraci\u00f3 En l'actualitat, Apatxe est\u00e0 perdent mercat respecte a Nginx ( https://www.nginx.com ). Es tracta d'un producte m\u00e9s modern (2004) i que en determinats escenaris t\u00e9 millor rendiment que Apatxe. Comparativa servidors web: https://w3techs.com/technologies/history_overview/web_server/ms/q Servidor d'Aplicacions \u00b6 Programari que ofereix serveis addicionals als d'un servidor web: Clustering Balanceig de c\u00e0rrega Toler\u00e0ncia a fallades Tomcat ( http://tomcat.apache.org/ ) \u00e9s el servidor d'aplicacions open source i multiplataforma de refer\u00e8ncia per a una arquitectura Java. Cont\u00e9n un contenidor Web Java que interpreta Servlets i JSP . Info Tant els servidors web com els servidors d'aplicacions s'estudien en el m\u00f2dul de \"Desplegament d'Aplicacions Web\". Llenguatges en el servidor \u00b6 Les aplicacions que generen les p\u00e0gines web es programen en algun dels seg\u00fcents llenguatges: PHP: El m\u00e9s est\u00e9s. Normalment s'executa com un m\u00f2dul al servidor. Es f\u00e0cil i barat trobar allotjaments que l'oferisquen. JSP: La versi\u00f3 de Java per a la web. Li cal un contenidor web. ASP.NET: Integrada en la plataforma de microsoft .NET Ruby: Molt apreciat per els desenvolupadors web. GO: La versi\u00f3 de google de phyton. Phyton: El m\u00e9s popular. NodeJS: Utilitza Javascript. Comparaci\u00f3 de llenguatges Criteris per apendre un llenguatge de programaci\u00f3 JavaEE \u00b6 Java Enterprise Edition \u00e9s la soluci\u00f3 Java per al desenvolupament d'aplicacions * enterprise . Ofereix una arquitectura molt completa i complexa, escalable i tolerant a fallades. Plantejada per a aplicacions per a grans sistemes. PHP \u00b6 Llenguatge de prop\u00f2sit general dissenyat per al desenvolupament de p\u00e0gines web din\u00e0miques Al principi, llenguatge no tipat. Actualment en la versi\u00f3 8. Es recomana almenys utilitzar una versi\u00f3 superior a la 7.0. Codi embegut en l'HTML Instruccions entre etiquetes <?php y ?> Per a generar codi dins de PHP, podem usar la instrucci\u00f3 echo Multitud de llibreries i frameworks: Laravel, Symfony, Codeigniter, Zend La seua documentaci\u00f3 \u00e9s bastant completa: https://www.php.net/manual/es/index.php El seg\u00fcent mapa mental mostra un resum dels seus elements: Elements del llenguatge PHP Durant les seg\u00fcents unitats estudiarem PHP en profunditat. Posada en marxa \u00b6 Pera fer correr les aplicacions de servidor ens cal, com a m\u00ednim, un servidor web , l'interpret de php i un motor de base de dades . Hem de distinguir l' entorn de desenvolupament , on anem a programar i mantindre la nostra aplicaci\u00f3, de l' entorn de producci\u00f3 , on anem a executar-la. Normalment el primer dep\u00e9n de nosaltres mentre que el segon pot dependre de l'empresa on s'allotjar\u00e0 la nostra web. Per a preparar el nostre entorn de desenvolupament podem optar per: Qualsevol soluci\u00f3 LAMP (Linux, Apache, Mysql, PHP). Als que haurem d'afegir, una vegada els projectes es facen grans composer, git i les opcions de la part de client . Una m\u00e0quina virtual ja configurada. Una soluci\u00f3 docker. La primera soluci\u00f3 \u00e9s senzilla d'implementar per\u00f2 no hauria de ser la nostra primera opci\u00f3 per: Estem possant en marxa en la nostra m\u00e0quina una s\u00e8rie de servicis que normalment no fariem, baixant el rendiment de la m\u00e0quina i obrint vulnerabilitats. Si treballem en grup, les instal\u00b7lacions i el funcionament no s\u00f3n iguals, depenen del sistema operatiu que t\u00e9 instal\u00b7lat cadasc\u00fa. All\u00f2 que li funciona a \u00fa pot ser no li funciona a un altre. Aix\u00f2 \u00e9s inevitable quan el projecte es complica i es perd molt de temps. Passa el mateix quan passem a l'entorn de producci\u00f3. La segona soluci\u00f3 soluciona els dos primers problemes, doncs tots els desenvolupadors poden tindre virtualitzada, la mateixa m\u00e0quina. Encara que si la m\u00e0quina no la fem nosaltres sin\u00f3 que utilitzem alguna ja configurada ( vagrant ) o si ens cal instal\u00b7lar alguna cosa m\u00e9s, ho hauria de fer tot l'equip. Aix\u00ed i tot, tindriem les seg\u00fcents desaventatges: A l'instal\u00b7lar una maquina virtual sencera ocupa recursos del sistema. La m\u00e0quina instal\u00b7la m\u00e9s coses de les necess\u00e0ries habitualment. No reprodueix l'entorn de producci\u00f3. Pot ser molt \u00fatil, per exemple, quan la fem servir per desenvolupar en un framework, que ja ve configurat per fer-lo funcionar inmediatament i amb totes les caracter\u00edstiques instal\u00b7lades. La tercera opci\u00f3 t\u00e9 les seg\u00fcents caracter\u00edstiques: Al principi \u00e9s m\u00e9s dif\u00edcil de possar en funcionamet ja que calen coneixements de docker. Tots els desenvolupadors comparteixen entorn encara que utilitzen m\u00e0quines o sistemes operatius diferents. Si hi ha algun canvi de configuraci\u00f3 de l'entorn \u00e9s f\u00e1cilment transladable a tots els desenvolupadors. Es poden crear tants entorns de desenvolupament com projectes diferents hi hajen. Els contenidors ocupen pocs recursos. Els projectes es poden possar en producci\u00f3 utilitzan una soluci\u00f3 docker de manera inmediata. XAMPP \u00b6 XAMPP (https://www.apachefriends.org/es/index.html) \u00e9s una distribuci\u00f3 composta amb el programari necessari per a desenvolupar en entorn servidor. Es compon de les seg\u00fcents eines sobre la base de les seues sigles: X per al sistema operatiu (d'aqu\u00ed ve que es conega altrament com LAMP o WAMP). A per a Apatxe. M per a MySQL / MariaDB. Tamb\u00e9 inclou phpMyAdmin per a l'administraci\u00f3 de la base de dades des d'una interf\u00edcie web. P per a PHP. l'\u00faltima P per a Perl. Des de la pr\u00f2pia p\u00e0gina es pot descarregar l'arxiu executable per al sistema operatiu del nostre ordinador. Es recomana llegir la FAQ de cada sistema operatiu amb instruccions per a la seua posada en marxa. XAMPP en Windows Si treballes amb el teu propi ordinador, XAMPP \u00e9s una soluci\u00f3 m\u00e9s senzilla que Docker, sobretot si treballes amb Windows com a sistema operatiu. Docker \u00b6 Docker ( https://www.docker.com ) \u00e9s un gestor de contenidors, considerant un contenidor com un m\u00e8tode de virtualitzaci\u00f3 del sistema operatiu. L'\u00fas de contenidors requereix menys recursos que una m\u00e0quina virtual, per tant, el seu llan\u00e7ament i detenci\u00f3 s\u00f3n m\u00e9s r\u00e0pids que les m\u00e0quines virtuals. Aix\u00ed doncs, Docker permet crear, provar i implementar aplicacions r\u00e0pidament, a partir d'una s\u00e8rie de plantilles que es coneixen com a imatges de Docker . Per a aix\u00f2 \u00e9s necessari tindre instal\u00b7lat Docker Desktop ( https://www.docker.com/products/docker-desktop ) en els nostres entorns de desenvolupament (el qual ja inclou en nucli de Docker i l'eina docker compose ). Per a instal\u00b7lar-ho en Windows, \u00e9s necessari instal\u00b7lar pr\u00e8viament WSL 2 , el qual \u00e9s un subsistema de Linux dins de Windows . Al llarg del curs anirem creant diferents contenidors amb els serveis necessaris, de manera que cada vegada nom\u00e9s treballem amb el programari m\u00ednim. Versions Al llarg del curs usarem PHP 8.0 . Respecte a Docker , per a escriure les anotacions hem utilitzat la versio 20.10 i la versio 2.19 de docker compose . Finalment, la versi\u00f3 de Docker Desktop que hem utilitzat \u00e9s la 4.0 . Instal\u00b7laci\u00f3 de docker \u00b6 La instal\u00b7laci\u00f3 de docker dependr\u00e0 del sistema operatiu que estem utilitzant. Ac\u00ed anem a vore la que efecturan els que utilitzen linux, amb el sistema operatiu linux-mint o ubuntu , que \u00e9s el que ve instal\u00b7lat en les imatges suministrades. Per a mac o windows s'haur\u00e0 de mirar la p\u00e0gina web de docker Ens donem privilegis sudo su Utilitzant els repositoris de docker l'instal\u00b7lem: echo \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\" | tee /etc/apt/sources.list.d/docker.list curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - apt update apt install docker-ce docker-ce-cli containerd.io pigz Donem permisos a l'usuari afegint-lo al grup de docker usermod -aG docker $USER On $USER \u00e9s el teu usuari. Tamb\u00e9 haurem d'instal\u00b7lar el docker-compose curl -L \"https://github.com/docker/compose/releases/download/1.26.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose I provem docker --version Faltar\u00e0 engegar el servei de docker per a poder executar contenidors sudo systemctl start docker.service Plantilla Servidor Web + PHP \u00b6 Docker es basa en l'\u00fas d'imatges per a crear contenidors. Docker Compose simplifica el treball amb m\u00faltiples contenidors, i per aix\u00f2, per a facilitar l'arranc, ens centrarem en Docker Compose utilitzant una plantilla que \u00fanicament contindr\u00e0 com a serveis Nginx i PHP. Per a aix\u00f2, emplenarem l'arxiu docker-compose.yaml amb: Nginx i PHP # Services services : nginx : image : nginx:1.19 ports : - 80:80 volumes : - ./src:/var/www/php - ./.docker/nginx/conf.d:/etc/nginx/conf.d # cargamos la configuraci\u00f3n de un fichero externo depends_on : - php # enlazamos nginx con php php : image : php:8.0-fpm working_dir : /var/www/php volumes : - ./src:/var/www/php Dins de la carpeta que continga aquest arxiu, hem de crear una carpeta src on col\u00b7locarem el nostre codi font. Per a facilitar la posada en marxa, teniu la plantilla de Nginx/PHP disponible per a la seua desc\u00e0rrega. Quan estiguem llestos, llan\u00e7arem el servei mitjan\u00e7ant: docker-compose up -d Si volem veure el contingut dels arxius de log del servei utilitzarem: docker-compose logs -f Per a copiar un arxiu des del nostre sistema a l'interior del contenidor: docker cp ./miFichero idContenedor:/tmp I a l'inrev\u00e9s, si volem consultar un arxiu contingut dins d'un contenidor, el copiarem al nostre sistema: docker cp idContenedor:/tmp/archivoAConsultar.txt ./ Finalment, si volem accedir a un terminal interactiu dins del contenidor: docker exec -it nombreContenedor bash Altres comandos que podem arribar a utilitzar s\u00f3n: docker ps : Veure els contenidors que es estan executant docker ps -a : Veure tots els contenidors docker start nombreContenedor : Arrancar un contenidor docker images : Veure les imatges que tenim descarregades Una altra forma m\u00e9s senzilla per a llan\u00e7ar de nou els contenidors i gestionar-los una vegada creats \u00e9s utilitzar la interf\u00edcie gr\u00e0fica que ofereix Docker Desktop: Arranc de contenidor mitjan\u00e7ant Docker Desktop Docker stack Existeixen diverses opcions mitjan\u00e7ant Docker que ofereixen solucions completes i empaquetes per a tot el stack de desenvolupament. En posteriors sessions utilitzarem tant Devilbox ( http://devilbox.org ) com Laradock ( https://laradock.io ) Per\u00f2 vull saver com funciona... En el m\u00f2dul de Desplegament d'aplicacions estudiareu en profunditat, a m\u00e9s de Docker, Apatxe i altres serveis que ens serviran d'ajuda per al desenvolupament en entorn servidor. Entorn de desenvolupament \u00b6 En este curso utilitzarem PHP Storm ( https://www.jetbrains.com/phpstorm/ ) com a entorn de desenvolupament. Existixen altres alternatives, com Visual Studio Code ( https://code.visualstudio.com ). Hola mon \u00b6 I com no, el nostre primer exemple ser\u00e0 un Hola M\u00f3n en PHP. Si nomenem l'arxiu com index.php , en accedir a http://localhost autom\u00e0ticament carregar\u00e0 el resultat: <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Hola M\u00f3n </ title > </ head > < body > <?php echo \"Hola M\u00f3n\" ; ?> </ body > </ html > Refer\u00e8ncies \u00b6 Curs de introducci\u00f3 a Docker, per Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/ Article Arquitectures Web i sa evoluci\u00f3 Activitats \u00b6 Cerca en internet quals s\u00f3n els tres frameworks PHP m\u00e9s utilitzats, i indica: Nom i URL Any de creaci\u00f3 \u00daltima versi\u00f3 Cerca tres ofertes de treball de desenvolupament de programari en Infojobs a la prov\u00edncia d'Alacant que citen PHP i anota: Empresa + lloc + frameworks PHP + requeriments + sou + enlla\u00e7 a l'oferta. Una vegada arrancat el servei PHP (mitjan\u00e7ant XAMPP o Docker), crea l'arxiu info.php i afig el seg\u00fcent fragment de codi: <?php phpinfo () ?> Anota els valors de: Versi\u00f3 de PHP Loaded Configuration File memory_limit DOCUMENT_ROOT Obri l'arxiu php.ini-production que est\u00e0 dins del contenidor (pots esbrinar la ruta a partir de la propietat Configuration File (php.ini) Path ) i indica per a qu\u00e8 serveixen les seg\u00fcents propietats i quins valors contenen: file_uploads max_execution_time short_open_tag php.ini Es el archivo de configuraci\u00f3n de PHP, y en toda instalaci\u00f3n vienen dos plantillas ( php.ini-development y php.ini-production ) para que elijamos los valores m\u00e1s acordes a nuestro proyecto y creemos nuestro archivo propio de php.ini .","title":"1.- Arquitectures Web"},{"location":"01arquitecturas.html#arquitectures-web","text":"Duraci\u00f3 i criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 4 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 1. Selecciona les arquitectures i tecnologies de programaci\u00f3 web en entorn servidor, analitzant les seves capacitats i caracter\u00edstiques pr\u00f2pies. a) S'han caracteritzat i diferenciat els models d'execuci\u00f3 de codi en el servidor i en el client Web. b) S'han reconegut els avantatges que proporciona la generaci\u00f3 din\u00e0mica de p\u00e0gines Web i les seues difer\u00e8ncies amb la inclusi\u00f3 de sent\u00e8ncies de guions a l'interior de les p\u00e0gines Web. c) S'han identificat els mecanismes d'execuci\u00f3 de codi en els servidors Web. d) S'han reconegut les funcionalitats que aporten els servidors d'aplicacions i la seua integraci\u00f3 amb els servidors Web. e) S'han identificat i caracteritzat els principals llenguatges i tecnologies relacionats amb la programaci\u00f3 Web en entorn servidor. f) S'han verificat els mecanismes d'integraci\u00f3 dels llenguatges de marques amb els llenguatges de programaci\u00f3 en entorn servidor. g) S'han reconegut i avaluat les eines de programaci\u00f3 en entorn servidor. Les arquitectures web defineixen la forma en qu\u00e8 les p\u00e0gines d'un lloc web estan estructurades i enlla\u00e7ades entre si. Les aplicacions web es basen en el model client-servidor.","title":"Arquitectures Web"},{"location":"01arquitecturas.html#client-servidor","text":"Arquitectura Client Servidor El client inicia el proc\u00e9s amb una sol\u00b7licitud al servidor que genera un missatge de resposta. Ambdos es comuniquen utilitzant un protocol com\u00fa. En les aplicacions web, els clients solen ser navegadors els que realitzen peticions( request normalment mitjan\u00e7ant el protocol GET mitjan\u00e7ant el port 80/443), i estos responen( response ) amb la p\u00e0gina web sol\u00b7licitada o amb un missatge d\u2019error. La noves arquitectures substitueixen el servidor per un balancejador de c\u00e0rrega de manera que N servidors donen resposta a M clients.","title":"Client / Servidor"},{"location":"01arquitecturas.html#pagina-web-dinamica","text":"Si la p\u00e0gina web \u00fanicament cont\u00e9 HTML + CSS es considera una p\u00e0gina est\u00e0tica. Per a generar una p\u00e0gina din\u00e0mica, on el contingut canvia, hui dia tenim dues alternatives: Utilitzar un llenguatge de servidor que genere el contingut, ja siga mitjan\u00e7ant l'acc\u00e9s a una BD o serveis externs. Utilitzar serveis REST de tercers invocats des de JS. P\u00e0gina web din\u00e0mica Les tecnologies utlitzades (i els perfils de desenvolupament associats) per a la generaci\u00f3 de p\u00e0gines din\u00e0miques s\u00f3n: Perfil Ferramenta Tecnologia Front-end / client Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp Perfil Full-stack En les ofertes de treball quan fan refer\u00e8ncia a un Full-stack developer , estan buscant un perfil que domina tant el front-end com el back-end .","title":"P\u00e0gina web din\u00e0mica"},{"location":"01arquitecturas.html#single-page-application","text":"Hui dia, gran part del desenvolupament web est\u00e0 mudant des d'una arquitectura web client-servidor cl\u00e0ssica on el client realitza una petici\u00f3 al backend , per una arquitectura SPA on el client guanya molt major pes i segueix una programaci\u00f3 reactiva que accedeix a serveis remots REST que realitzen les operacions (comunicant-se mitjan\u00e7ant JSON ). Arquitectura tradicional vs SPA","title":"Single Page Application"},{"location":"01arquitecturas.html#arquitectura-de-3-capas","text":"Cal distingir entre capes f\u00edsiques ( tier ) i capes l\u00f2giques ( layer ).","title":"Arquitectura de 3 capas"},{"location":"01arquitecturas.html#tier","text":"Capa f\u00edsica d'una arquitectura suposa un nou element de maquinari separat f\u00edsicament. Les capes f\u00edsiques m\u00e9s allunyades del client estan m\u00e9s protegides, tant per firewalls com per VPN . Exemple d'arquitectura en tres capes f\u00edsiques (3 tier ): Servidor Web Servidor d'Aplicacions Servidor de base de dades Arquitectura de tres capes f\u00edsiques Cluster en tiers No confondre les capes amb la quantitat de servidors. Actualment es treballa amb arquitectures amb m\u00faltiples servidors en una mateixa capa f\u00edsica mitjan\u00e7ant un cl\u00faster, per a oferir toler\u00e0ncia a errors i escalabilitat horitzontal.","title":"Tier"},{"location":"01arquitecturas.html#layer","text":"En canvi, les capes l\u00f2giques ( layers ) organitzen el codi respecte a la seua funcionalitat: Presentaci\u00f3 Negoci / Aplicaci\u00f3 / Proc\u00e9s Dades / Persist\u00e8ncia Com s'observa, cadascuna de les capes es pot implementar amb diferents llenguatges de programaci\u00f3 i/o eines. Arquitectura de tres capes f\u00edsiques en tres l\u00f2giques","title":"Layer"},{"location":"01arquitecturas.html#mvc","text":"Model-View-Controller o Model-Vista-Controlador \u00e9s un model d'arquitectura que separa les dades i la l\u00f2gica de negoci respecte a la interf\u00edcie d'usuari i el component encarregat de gestionar els esdeveniments i les comunicacions. En separar els components en elements conceptuals permet reutilitzar el codi i millorar la seua organitzaci\u00f3 i manteniment. Els seus elements s\u00f3n: Model: representa la informaci\u00f3 i gestiona tots els accessos a aquesta, tant consultes com actualitzacions provinents, normalment, d'una base de dades. S'accedeix via el controlador. Controlador: Respon a les accions de l'usuari, i realitza peticions al model per a sol\u00b7licitar informaci\u00f3. Despr\u00e9s de rebre la resposta del model, li envia les dades a la vista. Vista: Presenta a l'usuari de manera visual el model i les dades preparades pel controlador. L'usuari *interactura amb la vista i realitza noves peticions al controlador. L'estudiarem en m\u00e9s detall en aprofundir en l'\u00fas dels frameworks PHP .","title":"MVC"},{"location":"01arquitecturas.html#decisions-de-disseny","text":"Quina grand\u00e0ria t\u00e9 el projecte? Quins llenguatges de programaci\u00f3 conec? Val la pena l'esfor\u00e7 d'aprendre un nou? Usar\u00e9 eines de codi obert o eines propiet\u00e0ries? Quin \u00e9s el cost d'utilitzar solucions comercials? Programar\u00e9 l'aplicaci\u00f3 jo nom\u00e9s o formar\u00e9 part d'un grup de programadors? Conte amb algun servidor web o gestor de base de dades disponible o puc decidir lliurement utilitzar el que crega necessari? Quin tipus de llic\u00e8ncia aplicar\u00e9 a l'aplicaci\u00f3 que desenvolupe?","title":"Decisions de disseny"},{"location":"01arquitecturas.html#herramientas","text":"","title":"Herramientas"},{"location":"01arquitecturas.html#servidor-web","text":"Programari que rep peticions HTTP (GET, POST, DELETE, ...). Retorna el recurs sol\u00b7licitat (HTML, CSS, JS, JSON, imatges, etc...) El producte m\u00e9s implantant \u00e9s Apatxe Web Server ( https://httpd.apache.org/ ), creat en 1995. Programari lliure i multiplataforma Sistema de m\u00f2duls din\u00e0mics \u2192 PHP, Python, Perl Utilitza l'arxiu .*htaccess per a la seua configuraci\u00f3 En l'actualitat, Apatxe est\u00e0 perdent mercat respecte a Nginx ( https://www.nginx.com ). Es tracta d'un producte m\u00e9s modern (2004) i que en determinats escenaris t\u00e9 millor rendiment que Apatxe. Comparativa servidors web: https://w3techs.com/technologies/history_overview/web_server/ms/q","title":"Servidor Web"},{"location":"01arquitecturas.html#servidor-daplicacions","text":"Programari que ofereix serveis addicionals als d'un servidor web: Clustering Balanceig de c\u00e0rrega Toler\u00e0ncia a fallades Tomcat ( http://tomcat.apache.org/ ) \u00e9s el servidor d'aplicacions open source i multiplataforma de refer\u00e8ncia per a una arquitectura Java. Cont\u00e9n un contenidor Web Java que interpreta Servlets i JSP . Info Tant els servidors web com els servidors d'aplicacions s'estudien en el m\u00f2dul de \"Desplegament d'Aplicacions Web\".","title":"Servidor d'Aplicacions"},{"location":"01arquitecturas.html#llenguatges-en-el-servidor","text":"Les aplicacions que generen les p\u00e0gines web es programen en algun dels seg\u00fcents llenguatges: PHP: El m\u00e9s est\u00e9s. Normalment s'executa com un m\u00f2dul al servidor. Es f\u00e0cil i barat trobar allotjaments que l'oferisquen. JSP: La versi\u00f3 de Java per a la web. Li cal un contenidor web. ASP.NET: Integrada en la plataforma de microsoft .NET Ruby: Molt apreciat per els desenvolupadors web. GO: La versi\u00f3 de google de phyton. Phyton: El m\u00e9s popular. NodeJS: Utilitza Javascript. Comparaci\u00f3 de llenguatges Criteris per apendre un llenguatge de programaci\u00f3","title":"Llenguatges en el servidor"},{"location":"01arquitecturas.html#posada-en-marxa","text":"Pera fer correr les aplicacions de servidor ens cal, com a m\u00ednim, un servidor web , l'interpret de php i un motor de base de dades . Hem de distinguir l' entorn de desenvolupament , on anem a programar i mantindre la nostra aplicaci\u00f3, de l' entorn de producci\u00f3 , on anem a executar-la. Normalment el primer dep\u00e9n de nosaltres mentre que el segon pot dependre de l'empresa on s'allotjar\u00e0 la nostra web. Per a preparar el nostre entorn de desenvolupament podem optar per: Qualsevol soluci\u00f3 LAMP (Linux, Apache, Mysql, PHP). Als que haurem d'afegir, una vegada els projectes es facen grans composer, git i les opcions de la part de client . Una m\u00e0quina virtual ja configurada. Una soluci\u00f3 docker. La primera soluci\u00f3 \u00e9s senzilla d'implementar per\u00f2 no hauria de ser la nostra primera opci\u00f3 per: Estem possant en marxa en la nostra m\u00e0quina una s\u00e8rie de servicis que normalment no fariem, baixant el rendiment de la m\u00e0quina i obrint vulnerabilitats. Si treballem en grup, les instal\u00b7lacions i el funcionament no s\u00f3n iguals, depenen del sistema operatiu que t\u00e9 instal\u00b7lat cadasc\u00fa. All\u00f2 que li funciona a \u00fa pot ser no li funciona a un altre. Aix\u00f2 \u00e9s inevitable quan el projecte es complica i es perd molt de temps. Passa el mateix quan passem a l'entorn de producci\u00f3. La segona soluci\u00f3 soluciona els dos primers problemes, doncs tots els desenvolupadors poden tindre virtualitzada, la mateixa m\u00e0quina. Encara que si la m\u00e0quina no la fem nosaltres sin\u00f3 que utilitzem alguna ja configurada ( vagrant ) o si ens cal instal\u00b7lar alguna cosa m\u00e9s, ho hauria de fer tot l'equip. Aix\u00ed i tot, tindriem les seg\u00fcents desaventatges: A l'instal\u00b7lar una maquina virtual sencera ocupa recursos del sistema. La m\u00e0quina instal\u00b7la m\u00e9s coses de les necess\u00e0ries habitualment. No reprodueix l'entorn de producci\u00f3. Pot ser molt \u00fatil, per exemple, quan la fem servir per desenvolupar en un framework, que ja ve configurat per fer-lo funcionar inmediatament i amb totes les caracter\u00edstiques instal\u00b7lades. La tercera opci\u00f3 t\u00e9 les seg\u00fcents caracter\u00edstiques: Al principi \u00e9s m\u00e9s dif\u00edcil de possar en funcionamet ja que calen coneixements de docker. Tots els desenvolupadors comparteixen entorn encara que utilitzen m\u00e0quines o sistemes operatius diferents. Si hi ha algun canvi de configuraci\u00f3 de l'entorn \u00e9s f\u00e1cilment transladable a tots els desenvolupadors. Es poden crear tants entorns de desenvolupament com projectes diferents hi hajen. Els contenidors ocupen pocs recursos. Els projectes es poden possar en producci\u00f3 utilitzan una soluci\u00f3 docker de manera inmediata.","title":"Posada en marxa"},{"location":"01arquitecturas.html#xampp","text":"XAMPP (https://www.apachefriends.org/es/index.html) \u00e9s una distribuci\u00f3 composta amb el programari necessari per a desenvolupar en entorn servidor. Es compon de les seg\u00fcents eines sobre la base de les seues sigles: X per al sistema operatiu (d'aqu\u00ed ve que es conega altrament com LAMP o WAMP). A per a Apatxe. M per a MySQL / MariaDB. Tamb\u00e9 inclou phpMyAdmin per a l'administraci\u00f3 de la base de dades des d'una interf\u00edcie web. P per a PHP. l'\u00faltima P per a Perl. Des de la pr\u00f2pia p\u00e0gina es pot descarregar l'arxiu executable per al sistema operatiu del nostre ordinador. Es recomana llegir la FAQ de cada sistema operatiu amb instruccions per a la seua posada en marxa. XAMPP en Windows Si treballes amb el teu propi ordinador, XAMPP \u00e9s una soluci\u00f3 m\u00e9s senzilla que Docker, sobretot si treballes amb Windows com a sistema operatiu.","title":"XAMPP"},{"location":"01arquitecturas.html#docker","text":"Docker ( https://www.docker.com ) \u00e9s un gestor de contenidors, considerant un contenidor com un m\u00e8tode de virtualitzaci\u00f3 del sistema operatiu. L'\u00fas de contenidors requereix menys recursos que una m\u00e0quina virtual, per tant, el seu llan\u00e7ament i detenci\u00f3 s\u00f3n m\u00e9s r\u00e0pids que les m\u00e0quines virtuals. Aix\u00ed doncs, Docker permet crear, provar i implementar aplicacions r\u00e0pidament, a partir d'una s\u00e8rie de plantilles que es coneixen com a imatges de Docker . Per a aix\u00f2 \u00e9s necessari tindre instal\u00b7lat Docker Desktop ( https://www.docker.com/products/docker-desktop ) en els nostres entorns de desenvolupament (el qual ja inclou en nucli de Docker i l'eina docker compose ). Per a instal\u00b7lar-ho en Windows, \u00e9s necessari instal\u00b7lar pr\u00e8viament WSL 2 , el qual \u00e9s un subsistema de Linux dins de Windows . Al llarg del curs anirem creant diferents contenidors amb els serveis necessaris, de manera que cada vegada nom\u00e9s treballem amb el programari m\u00ednim. Versions Al llarg del curs usarem PHP 8.0 . Respecte a Docker , per a escriure les anotacions hem utilitzat la versio 20.10 i la versio 2.19 de docker compose . Finalment, la versi\u00f3 de Docker Desktop que hem utilitzat \u00e9s la 4.0 .","title":"Docker"},{"location":"01arquitecturas.html#entorn-de-desenvolupament","text":"En este curso utilitzarem PHP Storm ( https://www.jetbrains.com/phpstorm/ ) com a entorn de desenvolupament. Existixen altres alternatives, com Visual Studio Code ( https://code.visualstudio.com ).","title":"Entorn de desenvolupament"},{"location":"01arquitecturas.html#hola-mon","text":"I com no, el nostre primer exemple ser\u00e0 un Hola M\u00f3n en PHP. Si nomenem l'arxiu com index.php , en accedir a http://localhost autom\u00e0ticament carregar\u00e0 el resultat: <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Hola M\u00f3n </ title > </ head > < body > <?php echo \"Hola M\u00f3n\" ; ?> </ body > </ html >","title":"Hola mon"},{"location":"01arquitecturas.html#referencies","text":"Curs de introducci\u00f3 a Docker, per Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/ Article Arquitectures Web i sa evoluci\u00f3","title":"Refer\u00e8ncies"},{"location":"01arquitecturas.html#activitats","text":"Cerca en internet quals s\u00f3n els tres frameworks PHP m\u00e9s utilitzats, i indica: Nom i URL Any de creaci\u00f3 \u00daltima versi\u00f3 Cerca tres ofertes de treball de desenvolupament de programari en Infojobs a la prov\u00edncia d'Alacant que citen PHP i anota: Empresa + lloc + frameworks PHP + requeriments + sou + enlla\u00e7 a l'oferta. Una vegada arrancat el servei PHP (mitjan\u00e7ant XAMPP o Docker), crea l'arxiu info.php i afig el seg\u00fcent fragment de codi: <?php phpinfo () ?> Anota els valors de: Versi\u00f3 de PHP Loaded Configuration File memory_limit DOCUMENT_ROOT Obri l'arxiu php.ini-production que est\u00e0 dins del contenidor (pots esbrinar la ruta a partir de la propietat Configuration File (php.ini) Path ) i indica per a qu\u00e8 serveixen les seg\u00fcents propietats i quins valors contenen: file_uploads max_execution_time short_open_tag php.ini Es el archivo de configuraci\u00f3n de PHP, y en toda instalaci\u00f3n vienen dos plantillas ( php.ini-development y php.ini-production ) para que elijamos los valores m\u00e1s acordes a nuestro proyecto y creemos nuestro archivo propio de php.ini .","title":"Activitats"},{"location":"02php.html","text":"El llenguatge PHP \u00b6 Duraci\u00f3 i criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 26 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 2. Escriu sent\u00e8ncies executables per un servidor Web reconeixent i aplicant procediments d'integraci\u00f3 del codi en llenguatges de marques. a) S'han reconegut els mecanismes de generaci\u00f3 de p\u00e0gines Web a partir de llenguatges de marques amb codi embegut. b) S'han identificat les principals tecnologies associades. c) S'han utilitzat etiquetes per a la inclusi\u00f3 de codi en el llenguatge de marques. d) S'ha reconegut la sintaxi del llenguatge de programaci\u00f3 que s'ha d'utilitzar. e) S'han escrit sent\u00e8ncies simples i s'ha comprovat els seus efectes en el document resultant. f) S'han utilitzat directives per a modificar el comportament predeterminat. g) S'han utilitzat els diferents tipus de variables i operadors disponibles en el llenguatge. h) S'han identificat els \u00e0mbits d'utilitzaci\u00f3 de les variables. 3. Escriu blocs de sent\u00e8ncies embeguts en llenguatges de marques, seleccionant i utilitzant les estructures de programaci\u00f3. a) S'han utilitzat mecanismes de decisi\u00f3 en la creaci\u00f3 de blocs de sent\u00e8ncies. b) S'han utilitzat bucles i s'ha verificat el seu funcionament. c) S'han utilitzat \u00abarrays\u00bb per a emmagatzemar i recuperar conjunts de dades. d) S'han creat i utilitzat funcions. e) S'han utilitzat formularis Web per a interactuar amb l'usuari del navegador Web. f) S'han emprat m\u00e8todes per a recuperar la informaci\u00f3 introdu\u00efda en el formulari. g) S'han afegit comentaris al codi. PHP \u00b6 Acr\u00f2nim de Personal Home Page Llenguatge de prop\u00f2sit general, encara que el seu fort \u00e9s el *desarollo web. Sintaxi similar a C / Java El codi s'executa en el servidor (en Apatxe mitjan\u00e7ant mod_php ) El client rep el resultat generat despr\u00e9s d'interpretar el codi en el servidor. El codi s'emmagatzema en arxiu amb extensi\u00f3 .*php . L'\u00faltima versi\u00f3 \u00e9s la 8.1, de Novembre de 2021. La seua documentaci\u00f3 \u00e9s extensa i est\u00e0 tradu\u00efda: https://www.php.net/manual/es/ . Codi embegut \u00b6 Els blocs de codi s'escriuen entre <?php y ?> , mentre que les sent\u00e8ncies se separen mitjan\u00e7ant ; . <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < title > PHP f\u00e1cil </ title > </ head > < body > <!-- Muestra una frase con HTML --> Hola mundo < br > <!-- Muestra una frase con PHP --> <?php echo \"Es muy f\u00e1cil programar en PHP.\" ; ?> </ body > </ html > Nom\u00e9s etiquetes d'obertura Si el nostre codi nom\u00e9s contindr\u00e0 codi PHP i res d'html, com per exemple, quan codifiquem classes o interf\u00edcies, nom\u00e9s posarem l'etiqueta d'obertura, per a aix\u00ed indicar que \u00e9s una arxiu de php pur. Generant contingut \u00b6 Tenim tres possibilitats a l'hora de generar contingut en els nostres documents PHP: echo expresi\u00f3n ; print (expresi\u00f3n); <?= expresi\u00f3n ?> Les que utilitzarem s\u00f3n echo quan ho fem dins d'un bloc d'instruccions i <?= quan nom\u00e9s anem a mostrar el valor d'una variable dins d'un fragment HTML. <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Echo y print </ title > </ head > < body > < p > <?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <? = \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <?php print ( \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ) ?> </ p > </ body > </ html > Comentaris \u00b6 Podem utilitzar comentaris d'una l\u00ednia o de bloc: <?php // Este es un comentario de una sola l\u00ednea /* Este es un comentario que ocupa varias l\u00edneas */ ?> Errors \u00b6 Si hi ha un error d'execuci\u00f3, es produeix un Fatal Error . Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11 Stack trace: # 0 { main } thrown in C:\\xampp\\htdocs\\202echo.php on line 11 Des de PHP 5 es llancen com una excepci\u00f3. M\u00e9s endavant veurem l'\u00fas de try / catch . Variables \u00b6 No \u00e9s necessari declarar-les pr\u00e8viament. Comencen per $ , per exemple $nom . Despr\u00e9s del $ , el seg\u00fcent car\u00e0cter ha de ser una lletra en min\u00fascula (recomanaci\u00f3) o gui\u00f3 baix _ . Despr\u00e9s ja es poden posar n\u00fameros. S\u00f3n case sensitive : $*var != $*vAR No es declara el seu tipus, el tipat \u00e9s din\u00e0mic. S'assigna en temps d'execuci\u00f3 depenent del valor assignat. Convenient inicialitzar-les, sin\u00f3 donen error. <?php $nombre = \"Aitor\" ; $nombreCompleto = \"Aitor Medrano\" ; $numero = 123 ; $numero2 = 456 ; $pi = 3.14 ; $suerte = true ; $sinValor ; echo $sinValor ; ?> Tipus Encara que a priori no hi ha tipus de dades, internament PHP treballa amb quatre tipus escalars: boolean , integer , float i string i quatre tipus compostos: array , object , callable i iterable . Existeix un tipus especial per a null (m\u00e9s informaci\u00f3 en http://php.net/manual/es/language.types.null.php ). Constants \u00b6 S\u00f3n variables el valor dels quals no varien. Existeixen dues possibilitats: define(NOMBRE, valor); const NOMBRE; // PHP > 5.3 <?php define ( \"PI\" , 3.1416 ); const IVA = 0.21 ; echo PI , \" \" , IVA ; // No se pone el s\u00edmbolo dolar ?> Es declaren sempre en MAJ\u00daSCULES Hi ha un conjunt de constants ja predefinides, tamb\u00e9 conegudes com magic constants : https://www.php.net/manual/es/language.constants.predefined.php Operadors \u00b6 Arim\u00e8tics \u00b6 Exemple Nom Resultadt -$a Negaci\u00f3 Oposat de $a . $a + $b Suma Suma de $a i $b . $a - $b Resta Difer\u00e8ncia de $a i $b . $a * $b Multiplicaci\u00f3 Producte de $a i $b . $a / $b Divisi\u00f3 Cocient de $a i $b . $a % $b M\u00f2dul / Resto Resta de $a dividit per $b . $a ** $b Pot\u00e8ncia Resultat de $a elevat a $b . En el cas de cadenes , si volem concatenar-les, s'utilitza l'operador . : <?php $x = 33 ; $y = 11 ; $z = $x + $y ; echo \"La suma de 33 y 11 es \" . 44. \"<br />\" ; echo \"La suma de \" . $x . \" y \" . $y . \" es \" . ( 33 + 11 ) . \"<br />\" ; echo \"La suma de \" . $x . \" y \" . $y . \" es \" . $z . \"<br />\" ; ?> Realment, en comptes de concatenar cadenes amb variables, podem imprimir-les directament ja que s'expandeixen autom\u00e0ticament: <?php echo \"La suma de $x y $y es $z <br />\" ; ?> A vegades, necessitem envoltar el nom de la variable entre claus per a poder unir m\u00e9s text al resultat: <?php $color = \"rojo\" ; echo \"El plural de $color el ${ color } s\" ; ?> M\u00e9s endavant estudiarem algunes funcions per al tractament de cadenes. Comparaci\u00f3 \u00b6 Exemple Nom Resultat $a == $b Igual true si $a \u00e9s igual a $b despres de la conversi\u00f3 de tipus. $a === $b Id\u00e8ntic, Comparaci\u00f3 estricta true si $a \u00e9s igual a $b , i s\u00f3n del mateix tipus de dades. $a != $b , $a <> $b Diferent true si $a no \u00e9s igual a $b despres de la conversi\u00f3 de tipus. $a !== $b No id\u00e8ntic true si $a no \u00e9s igual a $b , o si no s\u00f3n del mateix tipus. $a < $b Menor que true si $a \u00e9s estrictament menor que $b . $a > $b Major que true si $a \u00e9s estrictamente major que $b . $a <= $b Menor o igual que true si $a \u00e9s menor o igual que $b . $a >= $b Major o igual que true si $a \u00e9s major o igual que $b . $a <=> $b Nau espacial Torna -1 , 0 o 1 cuando $a \u00e9s respectivament menor, igual, o major que $b . $a ?? $b ?? $c Fussi\u00f3 de null El primer operador d'esquerra a dreta que existisca i no siga null . null si no hi ha valors definits i no s\u00f3n null . PHP >= 7. L\u00f2gics \u00b6 Exemple Nom Resultat $a and $b , $a && $b And (i) true si tant $a com $b s\u00f2n true . $a or $b , $a || $b Or (o inclusiva) true si qualsevol de $a o $b s\u00f3n true . $a xor $b Xor (o exclusiva) true si $a o $b s\u00f3n true , pero no ambd\u00f3s. !$a Not (no) true si $a no \u00e9s true . Assignaci\u00f3 \u00b6 Exemple Nom Resultat $a = $b Assignaci\u00f3 Assign a $a el valor de $b $a += $b Assignaci\u00f3 de la suma Li afegix a $a el valor de $b . Equivalent a $a = $a + $b $a -= $b Assignaci\u00f3 de la resta Li resta a $a el valor de $b . Equivalent a $a = $a - $b $a *= $b Assignaci\u00f3 del producte Assigna a $a el producte de $a per $b . Equivalent a $a = $a * $b $a /= $b Assignaci\u00f3 de la divisi\u00f3 Assigna a $a el concient de $a entre $b . Equivalent a $a = $a / $b $a %= $b Assignaci\u00f3 de la resta Assigna a $a la resta de dividir $a entre $b . Equivalent a $a = $a % $b $a .= $b Concatenaci\u00f3 Concatena a $a la cadena $b . Equivalent a $a = $a . $b $a++ Increment Incrementa $a en una unitat. Equivalent a $a = $a + 1 $a-- Decrement Decrementa $a en una unitat. Equivalent a $a = $a - 1 Prioritat dels operadors Recorda la prioritat. Primer els par\u00e8ntesis, despr\u00e9s la negaci\u00f3 ( ! ), productes/divisions, sumes/restes, comparacions, l\u00f2gics i finalment es realitza l'assignaci\u00f3. M\u00e9s informaci\u00f3 en https://www.php.net/manual/es/language.operators.precedence.php Autoavaluaci\u00f3 Si $a=5 i $b=4 , esbrina el valor de $c si $c = $a*2 > $b+5 && !($b<>4) Treballant amb formularis \u00b6 Les dades s'envien via URL amb el format var1=valor1&var2=valor2\u2026 . Per exemple: exemple.php?nom=Bruce&cognom=Wayne Es divideix en dos passos: Generar un formulari amb action='arxiu.php' method='GET' En l'arxiu .php llegir les dades amb $_GET['nombreVar'] Separarem sempre que podem el codi HTML del de PHP. Per exemple, el formulari el col\u00b7loquem en saluda.html : < form action = \"saluda.php\" method = \"get\" > < p >< label for = \"nombre\" > Nombre: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" ></ p > < p >< label for = \"apellido1\" > Primer apellido: </ label > < input type = \"text\" name = \"apellido1\" id = \"apellido1\" ></ p > < p >< input type = \"submit\" value = \"enviar\" ></ p > </ form > I arrepleguem les dades en saluda.php : <?php $nombre = $_GET [ \"nombre\" ]; $apellido1 = $_GET [ \"apellido1\" ]; echo \"Hola $nombre $apellido1 \" ; ?> Si el volgu\u00e9rem realitzar tot en un \u00fanic arxiu (la qual cosa no \u00e9s recomanable), podem fer-ho aix\u00ed: < form action = \"\" method = \"get\" > < p >< label for = \"nombre\" > Nombre: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" ></ p > < p >< label for = \"apellido1\" > Primer apellido: </ label > < input type = \"text\" name = \"apellido1\" id = \"apellido1\" ></ p > < input type = \"submit\" value = \"enviar\" > </ form > < p > <?php if ( isset ( $_GET [ 'nombre' ])) { $nombre = $_GET [ \"nombre\" ]; $apellido1 = $_GET [ \"apellido1\" ]; echo \"Hola $nombre $apellido1 \" ; } ?> </ p > El treball amb formularis l'estudiarem en profunditat en la unitat 4, i veurem que a m\u00e9s de *GET , podem enviar les dades amb POST . Condicions \u00b6 La condici\u00f3 simple es realitza mitjan\u00e7ant la instrucci\u00f3 if . Entre par\u00e8ntesi es posa la condici\u00f3 que es avalua a true o false . Si no es posen claus, en comptes d'obrir un bloc, s'executar\u00e0 nom\u00e9s la seg\u00fcent instrucci\u00f3. Sempre claus \u00c9s recomanable posar claus sempre encara que en el moment de codificar nom\u00e9s hi haja una \u00fanica instrucci\u00f3. D'aquesta manera, es queda preparat per a afegir m\u00e9s contingut en el futur sense provocar bugs . <?php $hora = 8 ; // La hora en formato de 24 horas if ( $hora === 8 ) { echo \"Suena el despertador.\" ; } echo \"<br>\" ; if ( $hora === 8 ) echo \"Suena el despertador.\" ; ?> Les condicions compostes mitjan\u00e7ant if-else : <?php $hora = 17 ; // La hora en formato de 24 horas if ( $hora <= 12 ) { echo \"Son las \" . $hora . \" de la ma\u00f1ana\" ; } else { echo \"Son las \" . ( $hora - 12 ) . \" de la tarde\" ; } ?> Les condicions niades mitjan\u00e7ant if-else if-else : <?php $hora = 14 ; // La hora en formato de 24 horas if ( $hora === 8 ) { echo \"Es la hora de desayunar.\" ; } else if ( $hora === 14 ) { echo \"Es la hora de la comida.\" ; } else if ( $hora === 21 ) { echo \"Es la hora de la cena.\" ; } else { echo \"Ahora no toca comer.\" ; } ?> La sent\u00e8ncia switch tamb\u00e9 permet treballar amb condicions m\u00faltiples: <?php $hora = 14 ; // La hora en formato de 24 horas switch ( $hora ) { case 9 : echo \"Es la hora de desayunar.\" ; break ; case 14 : echo \"Es la hora de la comida.\" ; break ; case 21 : echo \"Es la hora de la cena.\" ; break ; default : echo \"Ahora no toca comer\" ; } ?> No oblides el break Un error molt com\u00fa \u00e9s oblidar la instrucci\u00f3 break despr\u00e9s de cada cas. Si no ho posem, executar\u00e0 el seg\u00fcent cas autom\u00e0ticament. Finalment, tamb\u00e9 tenim l'operador ternari condici\u00f3 ? valorTrue : valorFalse <?php $hora = 14 ; $formato = ( $hora > 12 ) ? 24 : 12 ; echo \"El formato es de $formato horas\" ?> Si volem comprovar si una variable t\u00e9 valor i si no donar-li un valor determinat, usarem l'operador ?: (es coneix com l'operador Elvis - https://en.wikipedia.org/wiki/Elvis_operator ) amb la sintaxi expressi\u00f3 ?: valorSiVacio : <?php $nombre = $_GET [ 'nombre' ] ?: \"desconocido\" ?> Bucles \u00b6 Mitjan\u00e7ant la instrucci\u00f3 while : <?php $i = 1 ; while ( $i <= 10 ) { echo \"L\u00ednea \" . $i ; echo \"<br>\" ; $i ++ ; } ?> Mitjan\u00e7ant la instrucci\u00f3 do-while : <?php do { $dado = rand ( 1 , 6 ); // rand() devuelve un valor aleatorio echo \"Tirando el dado... \" ; echo \"ha salido un \" . $dado . \".\" ; echo \"<br>\" ; } while ( $dado != 5 ); echo \"\u00a1Bien! Saco una ficha de casa.\" ; ?> Mitjan\u00e7ant la instrucci\u00f3 for : <?php // Bucle ascendente for ( $i = 1 ; $i <= 10 ; $i ++ ) { echo \"L\u00ednea \" . $i ; echo \"<br>\" ; } // Bucle descendente for ( $i = 10 ; $i >= 0 ; $i -- ) { echo \"L\u00ednea \" . $i ; echo \"<br>\" ; } ?> M\u00e9s endavant estudiarem el bucle foreach per a rec\u00f3rrer arrays. PHP, de la mateixa manera que Java i C, permet trencar els bucles mitjan\u00e7ant la instrucci\u00f3 break . Al seu torn, continue permet saltar a la seg\u00fcent iteraci\u00f3. Si pots, evita break i continue Personalment, no m'agrada el seu \u00fas. Preferisc l'\u00fas de variables flag per a controlar l'eixida dels bucles. Per exemple: <?php $salir = false ; for ( $i = 1 ; $i <= 10 && ! $salir ; $i ++ ) { if ( $i === 5 ) { echo \"Salgo cuando i=5\" ; $salir = true ; } } ?> Arrays \u00b6 Per a emmagatzemar dades compostes, podem utilitzar tant arrays senzills com arrays associatius (similars a un mapa). En realitat tots els arrays s\u00f3n mapes ordenats compostos de parells clau-valor. Compte amb mesclar tipus Com el tipat \u00e9s din\u00e0mic, nostres arrays poden contenir dades de diferents tipus. No es recomana mesclar els tipus. De la mateixa manera que Java, es defineixen mitjan\u00e7ant claud\u00e0tors, s\u00f3n 0-index, i es pot assignar un valor a un posici\u00f3 determinada: <?php $frutas = array ( \"naranja\" , \"pera\" , \"manzana\" ); $frutas2 = [ \"naranja\" , \"pera\" , \"manzana\" ]; $frutas3 = []; $frutas3 [ 0 ] = \"naranja\" ; $frutas3 [ 1 ] = \"pera\" ; $frutas3 [] = \"manzana\" ; // lo a\u00f1ade al final Podem obtindre la grand\u00e0ria del array mitjan\u00e7ant la funci\u00f3 count(array) . Per a rec\u00f3rrer el array farem \u00fas d'un bucle for : <?php $tam = count ( $frutas ); // tama\u00f1o del array for ( $i = 0 ; $i < count ( $frutas ); $i ++ ) { echo \"Elemento $i : $frutas[$i] <br />\" ; } Una altra manera de rec\u00f3rrer els arrays, fins i tot m\u00e9s elegant, \u00e9s fer \u00fas de foreach . La seua sintaxi \u00e9s foreach (array as element) : <?php // Mitjan\u00e7ant foreach no necessitem saber la grand\u00e0ria del array foreach ( $frutas as $fruta ) { echo \" $fruta <br />\" ; } Arrays associatius \u00b6 Cada element \u00e9s un parell clau-valor. En comptes d'accedir per la posici\u00f3, el fem mitjan\u00e7ant una clau. Aix\u00ed doncs, per a cada clau s'emmagatzema un valor. A l'hora de rec\u00f3rrer aquest tipus de arrays, mitjan\u00e7ant foreach separem cada element en una parella clau => valor : <?php $capitales = [ \"Italia\" => \"Roma\" , \"Francia\" => \"Paris\" , \"Portugal\" => \"Lisboa\" ]; $capitalFrancia = $capitales [ \"Francia\" ]; // se accede al elemento por la clave, no la posici\u00f3n $capitales [ \"Alemania\" ] = \"Berl\u00edn\" ; // a\u00f1adimos un elemento echo \"La capital de Francia es $capitalFrancia <br />\" ; echo \"La capital de Francia es { $capitales [ \"Francia\" ] } <br />\" ; $capitales [] = \"Madrid\" ; // se a\u00f1ade con la clave 0 !!! \u00a1\u00a1\u00a1No asignar valores sin clave!!! foreach ( $capitales as $valor ) { // si recorremos un array asociativo, mostraremos los valores echo \" $valor <br />\" ; } foreach ( $capitales as $pais => $ciudad ) { // separamos cada elemento en clave => valor echo \" $pais : $ciudad <br />\" ; } Operacions \u00b6 print_r($array) : mostra el contingut de tot el $array . Si volem mostrar el contingut amb un format determinat, hem de rec\u00f3rrer el array amb foreach . var_dump($mixed) : mostra el contingut de l'element rebut. Mostra m\u00e9s informaci\u00f3 que print_r . $elem = array_pop($array) : elimina l'\u00faltim $element array_push($array, $elem) : afig un $element al final $boole\u00e0 = in_array($elem, $array) : esbrina si $elem est\u00e0 en el $array PHP Consola <?php $frutas = [ \"naranja\" , \"pera\" , \"manzana\" ]; array_push ( $frutas , \"pi\u00f1a\" ); print_r ( $frutas ); $ultFruta = array_pop ( $frutas ); if ( in_array ( \"pi\u00f1a\" , $frutas )) { echo \"<p>Queda pi\u00f1a</p>\" ; } else { echo \"<p>No queda pi\u00f1a</p>\" ; } print_r ( $frutas ); Array ( [0] => naranja [1] => pera [2] => manzana [3] => pi\u00f1a ) <p>No queda pi\u00f1a</p> Array ( [0] => naranja [1] => pera [2] => manzana ) $claus = array_keys($array) : retorna les claus del $array associatiu $tam = count($array) : retorna la grand\u00e0ria de $array sort($array) : ordena els elements del $array isset($array[element]) : indica si existeix/t\u00e9 valor element dins del array unset($array[element]) : elimina l'element del array (deixa un buit) PHP Consola <?php $capitales = array ( \"Italia\" => \"Roma\" , \"Francia\" => \"Paris\" , \"Portugal\" => \"Lisboa\" ); $paises = array_keys ( $capitales ); print_r ( $paises ); sort ( $paises ); print_r ( $paises ); unset ( $capitales [ \"Francia\" ]); print_r ( $capitales ); Array ( [0] => Italia [1] => Francia [2] => Portugal ) Array ( [0] => Francia [1] => Italia [2] => Portugal ) Array ( [Italia] => Roma [Portugal] => Lisboa ) En assignar un array a un altre es realitza una c\u00f2pia. Compte amb aquesta operaci\u00f3 que pot consumir molts recursos. PHP Consola <?php $nombres = [ \"Juan\" , \"Ana\" , \"Pedro\" , \"Laura\" ]; $copia = $nombres ; sort ( $nombres ); print_r ( $nombres ); print_r ( $copia ); Array ( [0] => Ana [1] => Juan [2] => Laura [3] => Pedro ) Array ( [0] => Juan [1] => Ana [2] => Pedro [3] => Laura ) Existeixen molt\u00edssimes m\u00e9s funcions per a treballar amb arrays. Pots consultar roda la informaci\u00f3 en la documentaci\u00f3 oficial . Articles per a aprofundir en les operacions amb arrays Un article molt complet (en angl\u00e9s) de Com treballar amb arrays en PHP de la manera correcta . Un altre article recomanable (en angl\u00e9s) \u00e9s Com ordenar arrays en PHP . Arrays bidimensionales \u00b6 Consisteix en un array de arrays, ja siguen arrays seq\u00fcencials o associatius. Pot haver-hi N dimensiones. <?php $persona [ \"nombre\" ] = \"Bruce Wayne\" ; $persona [ \"telefonos\" ] = [ \"966 123 456\" , \"636 636 636\" ]; // array de arrays ordinarios $persona [ \"profesion\" ] = [ \"dia\" => \"fil\u00e1ntropo\" , \"noche\" => \"caballero oscuro\" ]; // array de arrays asociativos echo $persona [ 'nombre' ] . \" por la noche trabaja de \" . $persona [ 'profesion' ][ 'noche' ]; Combinant els arrays associatius en diverses dimensions podem emmagatzemar la informaci\u00f3 com si fora una taula: <?php $menu1 = [ \"Plato1\" => \"Macarrones con queso\" , \"Plato2\" => \"Pescado asado\" , \"Bebida\" => \"Coca-Cola\" , \"Postre\" => \"Helado de vainilla\" ]; $menu2 = [ \"Plato1\" => \"Sopa\" , \"Plato2\" => \"Lomo con patatas\" , \"Bebida\" => \"Agua\" , \"Postre\" => \"Arroz con leche\" ]; $menus = [ $menu1 , $menu2 ]; // creamos un array a partir de arrays asociativos foreach ( $menus as $menudeldia ) { echo \"Men\u00fa del d\u00eda<br/>\" ; foreach ( $menudeldia as $platos => $comida ) { echo \" $platos : $comida <br/>\" ; } } // Per a accedir a un element concret es nien els claud\u00e0tors $postre0 = $menus [ 0 ][ \"Postre\" ]; Encara que puga semblar una bona idea crear aquest tipus d'estructures, \u00e9s millor utilitzar objectes conjuntament amb arrays (possiblement arrays d'altres objectes) per a crear estructures complexes que permeten modelar millor els problemes. Funcions \u00b6 Al no declarar-se els tipus de dades, els par\u00e0metres de les funcions no tenen tipus ni s'indica el tipus de dada que retornen. El pas de par\u00e0metres es realitza per valor, \u00e9s a dir, es realitza una c\u00f2pia de la variable. <?php function nombreFuncion ( $par1 , $par2 , ... ) { // c\u00f3digo return $valor ; } $resultado = nombreFuncion ( $arg1 , $arg2 , \u2026 ); ?> Per exemple: <?php function diaSemana () { $semana = [ \"lunes\" , \"martes\" , \"mi\u00e9rcoles\" , \"jueves\" , \"viernes\" , \"s\u00e1bado\" , \"domingo\" ]; $dia = $semana [ rand ( 0 , 6 )]; return $dia ; } $diaCine = diaSemana (); echo \"El pr\u00f3ximo $diaCine voy al cine.\" ; ?> Par\u00e0metres per refer\u00e8ncia \u00b6 Si volem passar un par\u00e0metre per refer\u00e8ncia, en la declaraci\u00f3 de la funci\u00f3, indicarem els par\u00e0metres mitjan\u00e7ant l'operador & * per a indicar la direcci\u00f3 de mem\u00f2ria de la variable. <?php function duplicarPorValor ( $argumento ) { $argumento = $argumento * 2 ; echo \"Dentro de la funci\u00f3n: $argumento .<br>\" ; } function duplicarPorReferencia ( & $argumento ) { $argumento = $argumento * 2 ; echo \"Dentro de la funci\u00f3n: $argumento .<br>\" ; } $numero1 = 5 ; echo \"Antes de llamar: $numero1 .<br>\" ; duplicarPorValor ( $numero1 ); echo \"Despu\u00e9s de llamar: $numero1 .<br>\" ; echo \"<br>\" ; $numero2 = 7 ; echo \"Antes de llamar: $numero2 .<br>\" ; duplicarPorReferencia ( $numero2 ); echo \"Despu\u00e9s de llamar: $numero2 .<br>\" ; ?> Par\u00e0metres per defecte / opcionals \u00b6 Permeten assignar valors en la declaraci\u00f3, i posteriorment, deixar l'argument en blanc. <?php function obtenerCapital ( $pais = \"todos\" ) { $capitales = array ( \"Italia\" => \"Roma\" , \"Francia\" => \"Paris\" , \"Portugal\" => \"Lisboa\" ); if ( $pais == \"todos\" ) { return array_values ( $capitales ); } else { return $capitales [ $pais ]; } } print_r ( obtenerCapital ()); echo \"<br/>\" ; echo obtenerCapital ( \"Francia\" ); En el cas de conviure amb una altra mena de par\u00e0metres, els par\u00e0metres que tenen el valor assignat per defecte sempre es col\u00b7loquen al final. <?php function saluda ( $nombre , $prefijo = \"Sr\" ) { echo \"Hola \" . $prefijo . \" \" . $nombre ; } saluda ( \"Aitor\" , \"Mr\" ); saluda ( \"Aitor\" ); saluda ( \"Marina\" , \"Srta\" ); Par\u00e0metres variables \u00b6 Podem tindre funcions on en la declaraci\u00f3 no indiquem la quantitat de dades d'entrada. $arrayArgs = func_get_args(); \u2192 Obt\u00e9 un array amb els par\u00e0metres $quantitat = func_num_args(); \u2192 Obt\u00e9 la quantitat de par\u00e0metres rebuts $valor = func_get_arg(numArgumento); \u2192 Obt\u00e9 el par\u00e0metre que ocupa la posici\u00f3 numArgumento . Aquestes funcions no es poden passar com a par\u00e0metre a una altra funci\u00f3 (com a funcions variable, que veurem m\u00e9s endavant). Per a aix\u00f2, hem de guardar pr\u00e8viament la funci\u00f3 en una variable. <?php function sumaParametros () { if ( func_num_args () == 0 ) { return false ; } else { $suma = 0 ; for ( $i = 0 ; $i < func_num_args (); $i ++ ) { $suma += func_get_arg ( $i ); } return $suma ; } } echo sumaParametros ( 1 , 5 , 9 ); // 15 ?> Des de PHP 5.6, es pot utilitzar l'operador ... ( variadics ) el qual \"disfressa\" els par\u00e0metres com un array: <?php function sumaParametrosMejor ( ... $numeros ) { if ( count ( $numeros ) == 0 ) { return false ; } else { $suma = 0 ; foreach ( $numeros as $num ) { $suma += $num ; } return $suma ; } } echo sumaParametrosMejor ( 1 , 5 , 9 ); // 15 ?> M\u00e9s usos de ... Tamb\u00e9 es pot utilitzar per a dividir un array en variables separades per a proporcionar arguments <?php function suma ( $a , $b ) { return $a + $b ; } echo suma ( ... [ 1 , 5 ]) . \"<br />\" ; $a = [ 1 , 5 ]; echo suma ( ... $a ); ?> Arguments amb nom \u00b6 Des de PHP 8.0 podem passar els arguments amb el nom (a m\u00e9s de per posici\u00f3, com hem fet fins ara). Els arguments amb nom es passen posant el nom com a prefix del par\u00e0metres separat per dos punts: $resultat = funcion( arg1 : valor1, arg2 : valor2); Aquesta caracter\u00edstica complementa els parametros opcionals permitiendonos saltar el seu valor: <?php function funcionArgumentosNombre ( $a , $b = 2 , $c = 4 ) { echo \" $a $b $c \" ; } funcionArgumentosNombre ( c : 3 , a : 1 ); // \"1 2 3\" Tant els par\u00e0metres opcionals com els obligatoris poden tindre nom, per\u00f2 els arguments amb nom s'han de posar despr\u00e9s dels que no ho tenen. <?php funcionArgumentosNombre ( 1 , c : 3 ); // \"1 2 3\" Funcions amb tipus \u00b6 Des de PHP7 en les funcions, tant els par\u00e0metre com la seua devoluci\u00f3, permeten la definici\u00f3 de tipus. Aix\u00f2 es coneix com strict_types (tipificaci\u00f3 estricta) i cal definir-ho en la primera l\u00ednia de cada arxiu .php perqu\u00e8 el propi interprete PHP comprove els tipus i llance errors si els tipus s\u00f3n incorrectes, mitjan\u00e7ant la sent\u00e8ncia <?php declare ( strict_types = 1 ); Aix\u00ed doncs, definirem els tipus dels par\u00e0metres i dels valors retornats mitjan\u00e7ant els tipus: int , float , string , bool , object i array . Si una funci\u00f3 no retorna res s'indica mitjan\u00e7ant el tipus void . <?php declare ( strict_types = 1 ); function suma ( int $a , int $b ) : int { return $a + $b ; } $num = 33 ; echo suma ( 10 , 30 ); echo suma ( 10 , $num ); echo suma ( \"10\" , 30 ); // error por tipificaci\u00f3n estricta, sino dar\u00eda 40 ?> Abast \u00b6 Les variables definides fora de les funcions tenen abast global : accessibles des de qualsevol funci\u00f3. Els par\u00e0metres d'una funci\u00f3 i les variables declarades dins d'una funci\u00f3 (es coneixen com a variables locals) nom\u00e9s s\u00f3n accessibles des de dins de la mateixa funci\u00f3 \u2192 aconseguisca de funci\u00f3**. En cas de conflicte, tenen prioritat les variables locals. Per a evitar el conflicte, dins de la funci\u00f3, podem declarar la variable com a global . Abast local Abast global <?php function miCiudad () { $ciudad = \"Elche\" ; echo \"Dentro de la funci\u00f3n: $ciudad .<br>\" ; } $ciudad = \"Alicante\" ; echo \"Antes de la funci\u00f3n: $ciudad .<br>\" ; miCiudad (); echo \"Despu\u00e9s de la funci\u00f3n: $ciudad .<br>\" ?> <?php function miCiudad () { global $ciudad ; $ciudad = \"Elche\" ; echo \"Dentro de la funci\u00f3n: $ciudad .<br>\" ; } $ciudad = \"Alicante\" ; echo \"Antes de llamar: $ciudad .<br>\" ; miCiudad (); echo \"Despu\u00e9s de llamar: $ciudad .<br>\" ?> No globals Per favor, cal evitar l'\u00fas de variables globals dins de les funcions. En el cas de necessitar-les, \u00e9s millor passar-les com a par\u00e0metre a les funcions. Funcions variable \u00b6 Permet assignar una funci\u00f3 a una variable. Nom de la funci\u00f3 entre cometes. Si una variable va seguida de par\u00e8ntesi, PHP buscar\u00e0 una funci\u00f3 amb el seu valor. <?php $miFuncionSuma = \"suma\" ; echo $miFuncionSuma ( 3 , 4 ); // invoca a la funci\u00f3n suma ?> Funcions an\u00f2nimes PHP permet la definici\u00f3 i \u00fas de funcions an\u00f2nimes, \u00e9s a dir, funcions que no tenen nom, i s'utilitzen principalment per a gestionar els callbacks . Aquest tipus de funcions s'utilitza molt en JavaScript per a gestionar els esdeveniments i promeses. <?php $anonima = function () { echo \"Hola\" ; }; $anonima (); $anonimaConParametro = function ( $nombre ) { echo \"Hola \" . $nombre ; }; $anonimaConParametro ( \"Aitor\" ); // Uso de variables externas a la funci\u00f3n an\u00f3nima --> `use` $mensaje = \"Hola\" ; $miClosure = function () use ( $mensaje ) { echo $mensaje ; }; $miClosure (); // Uso de par\u00e1metros $holaPHP = function ( $arg ) use ( $mensaje ) { echo $mensaje . \" \" . $arg ; }; $holaPHP ( \"PHP\" ); ?> Des de PHP 7.4 s'han introdu\u00eft les funciones fletxa (arrow functions) per a simplificar la seua definici\u00f3 i \u00fas. Teniu m\u00e9s informaci\u00f3 sobre funcions an\u00f2nimes i fletxa en el seg\u00fcent article (en angl\u00e9s): Funcions an\u00f2nimes i fletxa en PHP Biblioteca de funcions \u00b6 Podem agrupar un conjunt de funcions en un arxiu, per a permetre la seua reutilitzaci\u00f3. Posteriorment, s'inclou amb: include(arxiu); / include_once(arxiu); require(arxiu); / require_once(arxiu); Si no troba l'arxiu, require llan\u00e7a un error fatal, include l'ignora Les funcions _once nom\u00e9s es carreguen una vegada, si ja ha sigut inclosa pr\u00e8viament, no el torna a fer, evitant bucles. Per exemple, col\u00b7loquem les funcions en l'arxiu biblioteca.php : <?php function suma ( int $a , int $b ) : int { return $a + $b ; } function resta ( int $a , int $b ) : int { return $a - $b ; } ?> I posteriorment en un altre arxiu: <?php include_once ( \"biblioteca.php\" ); echo suma ( 10 , 20 ); echo resta ( 40 , 20 ); ?> Plantilles mitjan\u00e7ant include \u00b6 Mitjan\u00e7ant l'\u00fas de la instrucci\u00f3 include tamb\u00e9 podem separar fragments de codi PHP/HTML que vulguem reutilitzar en els nostres llocs web i crear un sistema molt senzill de plantilles. Per exemple, separarem una p\u00e0gina en tres parts, primer la part superior en encap\u00e7alat.php : <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > <? = $titulo ?> </ title > </ head > < body > La part de baix, per exemple, nom\u00e9s contindr\u00e0 HTML i la col\u00b7loquem en peu.html : < footer > Aitor Medrano </ footer > </ body > </ html > I despr\u00e9s ens centrem \u00fanicament en el contingut que canvia en pagina.php : <?php $titulo = \"P\u00e1gina con includes\" ; include ( \"encap\u00e7alat.php\" ); ?> < h1 > <? = $titulo ?> </ h1 > <?php include ( \"peu.html\" ); ?> Funcions predefinides \u00b6 El llenguatge ofereix un ventall de funcions ja definides, agrupades per la seua funcionalitat: https://www.php.net/manual/es/funcref.php Cadenes \u00b6 Ja hem vist que es poden crear amb cometes simples ( '' , sense interpretaci\u00f3) o cometes dobles ( \"\" , interpreten el contingut i les seq\u00fc\u00e8ncies de fuita \\n , \\t , \\$ , { , \u2026 - *magic quotes) <?php \"Me llamo $nombre \" \"Son 30 { $moneda } s\" ?> S'accedeixen als car\u00e0cters com si fora un array. <?php $cadena = \u201cYo soy Batman\u201d ; $ygriega = $cadena [ 0 ]; ?> A m\u00e9s de echo , podem mostrar les cadenes mitjan\u00e7ant la funci\u00f3 printf . Aquesta funci\u00f3 ve heretada del llenguatge C, i en la cadena s'indica el tipus de dada a formatar i genera una eixida formatada. Si vull guardar el resultat en una variable, podem utilitzar sprintf . <?php $num = 33 ; $nombre = \"Larry Bird\" ; printf ( \"%s llevaba el n\u00famero %d\" , $nombre , $num ); // %d -> n\u00famero decimal, %s -> string $frase = sprintf ( \"%s llevaba el n\u00famero %d\" , $nombre , $num ); echo $frase ?> Teniu molts m\u00e9s exemples en https://www.w3schools.com/php/func_string_printf.asp Operacions b\u00e0siques \u00b6 Totes les funcions es poden consultar en https://www.php.net/manual/es/ref.strings.php Les m\u00e9s importants s\u00f3n: strlen : obt\u00e9 la longitud d'una cadena i retorna un nombre enter substr : retorna una subcadena de la cadena original str_replau : reempla\u00e7a car\u00e0cters en una cadena strtolower i strtoupper : Transformen una cadena de car\u00e0cters en la mateixa cadena en min\u00fascules o maj\u00fascules respectivament. <?php $cadena = \"El caballero oscuro\" ; $tam = strlen ( $cadena ); echo \"La longitud de ' $cadena ' es: $tam <br />\" ; $oscuro = substr ( $cadena , 13 ); // desde 13 al final $caba = substr ( $cadena , 3 , 4 ); // desde 3, 4 letras $katman = str_replace ( \"c\" , \"k\" , $cadena ); echo \" $oscuro $caba ahora es $katman \" ; echo \"Grande \" . strtoupper ( $cadena ); ?> Si volem treballar amb car\u00e0cters ASCII de manera individual, s\u00f3n \u00fatils les funcions: chr : obt\u00e9 el car\u00e0cter a partir d'un ASCII ord : obt\u00e9 l'ASCII d'un car\u00e0cter <?php function despues ( string $letra ) : string { $asciiLetra = ord ( $letra ); return chr ( $asciiLetra + 1 ); } echo despues ( \"B\" ); ?> Si volem netejar cadenes, tenim les funcions: trim : elimina els espais al principi i al final ltrim / rtrim o chop : Elimina els espais inicials / finals d'una cadena. str_pad : emplena la cadenes fins a una longitud especificada i amb el car\u00e0cter o car\u00e0cters especificats. <?php $cadena = \" Programando en PHP \" ; $limpia = trim ( $cadena ); // \"Programando en PHP\" $sucia = str_pad ( $limpia , 23 , \".\" ); // \"Programando en PHP.....\" ?> Comparant i buscant \u00b6 La comparaci\u00f3 de cadenes pot ser amb conversi\u00f3 de tipus mitjan\u00e7ant == o estricta amb === . Tamb\u00e9 funcionen els operadors < i > si ambdues s\u00f3n cadenes. En comparar cadenes amb valors numericos podem utilitzar: strcmp : 0 iguals, <0 si a<b o >0 si a>b strcasecmp : les passa a min\u00fascules i compara strncmp / strncasecmp : compara els N primers car\u00e0cters strnatcmp : comparacions naturals <?php $frase1 = \"Alfa\" ; $frase2 = \"Alfa\" ; $frase3 = \"Beta\" ; $frase4 = \"Alfa5\" ; $frase5 = \"Alfa10\" ; var_dump ( $frase1 == $frase2 ); // true var_dump ( $frase1 === $frase2 ); // true var_dump ( strcmp ( $frase1 , $frase2 ) ); // 0 var_dump ( strncmp ( $frase1 , $frase5 , 3 ) ); // 0 var_dump ( $frase2 < $frase3 ); // true var_dump ( strcmp ( $frase2 , $frase3 ) ); // -1 var_dump ( $frase4 < $frase5 ); // false var_dump ( strcmp ( $frase4 , $frase5 ) ); // 4 \u2192 f4 > f5 var_dump ( strnatcmp ( $frase4 , $frase5 ) ); // -1 \u2192 f4 < f5 ?> Si el que volem \u00e9s buscar dins d'una cadena, tenim: strpos / strrpos : cerca en una cadena i retorna la posici\u00f3 de la primera/\u00faltima ocurr\u00e8ncia. strstr / strchr (\u00e0lies) : cerca una cadena i retorna la subcadena a partir d'on l'ha trobada stristr : ignora les maj\u00fascules <?php $frase = \"Quien busca encuentra, eso dicen, a veces\" ; $pos1 = strpos ( $frase , \",\" ); // encuentra la primera coma $pos2 = strrpos ( $frase , \",\" ); // encuentra la \u00faltima coma $trasComa = strstr ( $frase , \",\" ); // \", eso dicen, a veces\" ?> Si volem esbrinar que cont\u00e9 les cadenes, tenim un conojunto de funcions de comprovacions de tipus, es coneixen com les funcions ctype que retornen un boole\u00e0: ctype_alpha \u2192 lletres ctype_alnum \u2192 alfanum\u00e8rics ctype_digit \u2192 d\u00edgits ctype_punct \u2192 car\u00e0cters de puntuaci\u00f3, sense espais ctype_space \u2192 s\u00f3n espais, tabulador, salt de l\u00ednia <?php $prueba1 = \"hola\" ; $prueba2 = \"hola33\" ; $prueba3 = \"33\" ; $prueba4 = \",.()[]\" ; $prueba5 = \" ,.()[]\" ; echo ctype_alpha ( $prueba1 ) . \"<br>\" ; // true echo ctype_alnum ( $prueba2 ) . \"<br>\" ; // true echo ctype_digit ( $prueba3 ) . \"<br>\" ; // true echo ctype_punct ( $prueba4 ) . \"<br>\" ; // true echo ctype_space ( $prueba5 ) . \"<br>\" ; // false echo ctype_space ( $prueba5 [ 0 ]) . \"<br>\" ; // true ?> Treballant amb subcadenes \u00b6 Si volem trencar les cadenes en trossos, tenim: explode : converteix en array la cadena mitjan\u00e7ant un separador. implode / join : passa un array a cadena amb un separador str_split / chunk_split : passa una cadena a una array/cadena cada X car\u00e0cters <?php $frase = \"Quien busca encuentra, eso dicen, a veces\" ; $partes = explode ( \",\" , $frase ); $ciudades = [ \"Elche\" , \"Aspe\" , \"Alicante\" ]; $cadenaCiudades = implode ( \">\" , $ciudades ); $partes3cadena = chunk_split ( $frase , 3 ); // Qui // en // bus // ca // ... $partes3array = str_split ( $frase , 3 ); // [\"Qui\", \"en \", \"bus\", \"ca \", \"enc\", \u2026] ?> Si volem treballar amb tokens: strtok(cadena, separador) i dins del bucle: strtok(separador) Finalment, per a separar-la sobre la base del format: sscanf : a l'inrev\u00e9s que sprintf , crea un array a partir de la cadena i el patr\u00f3. Finalment, altres operacions que podem realitzar per a treballar amb subcadenes s\u00f3n: substr_count : nombre de vegades que apareix la subcadena dins de la cadena substr_replau : reempla\u00e7a part de la cadena a partir de la seua posici\u00f3, i opcionalment, longitud <?php $batman = \"Bruce Wayne es Batman\" ; $empresa = substr ( $batman , 6 , 5 ); // Wayne $bes = substr_count ( $batman , \"B\" ); // 2 // Bruce Wayne es camarero $camarero1 = substr_replace ( $batman , \"camarero\" , 15 ); $camarero2 = substr_replace ( $batman , \"camarero\" , - 6 ); // quita 6 desde el final // Bruno es Batman $bruno = substr_replace ( $batman , \"Bruno\" , 0 , 11 ); ?> Tamb\u00e9 disposem d'una s\u00e8rie de funcions que faciliten les codificacions des d'i cap a HTML: htmlentities : converteix a entitats HTML, per exemple, \u00e1 per \uffc3\uffa1 , \u00f1 per \uffc3\uffb1 , < per< , etc.. htmlspecialchars : idem per\u00f2 nom\u00e9s amb els car\u00e0cters especials ( & , \" , ' , < , > , ...) striptags : elimina etiquetes HTML. nl2br : canvia salts de l\u00ednia per <br /> . rawurlencode / rawurldecode : codifica/descodifica una URL (espais, ...). Aquestes funcions les utilitzarem en la unitat 4.- Programaci\u00f3 Web. Matem\u00e1tiques \u00b6 Disposem tant de constants com funcions ja definides per a treballar amb operacions matem\u00e0tiques: https://www.php.net/manual/es/ref.math.php Constants ja definides M_PI , M_E , M_EULER , M_LN2 , M_LOG2E PHP_INT_MAX , PHP_FLOAT_MAX Funciones de c\u00e0lcul pow , sqrt , log , decbin , bindec , decoct , dechex , base_convert , max , min Funcions trigonom\u00e8triques sense , cos , tan , deg2rad , rad2deg Funcions per a treballar amb n\u00fameros aleatoris rand , mt_rand (m\u00e9s r\u00e0pida) Encara que la majoria d'elles s\u00f3n molt espec\u00edfiques de problemes matem\u00e0tics / estad\u00edstics, \u00e9s molt com\u00fa que h\u00e0gem d'arredonir i/o formatar els c\u00e0lculs abans de mostrar-los a l'usuari. Mitjan\u00e7ant la funci\u00f3 number_format(numere, cantidadDecimales, separadorDecimales, separadorMiles) podermos passar n\u00fameros a cadena amb decimals i/o separadors de decimals i/o de milers. <?php $nf = 1234.5678 ; echo number_format ( $nf , 2 ); // 1,234.57 echo number_format ( $nf , 2 , \"M\" , \"#\" ); // 1#234M57 ?> Per a arredonir, tenim abs per al valor absolut i round per a arredonir, ceil per a aproximaci\u00f3 per exc\u00e9s i floor per defecte. <?php $num = 7.7 ; $siete = floor ( $num ); $ocho = ceil ( $num ); $otro = 4.49 ; $cuatro = round ( $otro ); $cuatrocinco = round ( $otro , 1 ); $cinco = round ( $cuatrocinco ); ?> Tipus de dades \u00b6 Finalment, per a realitzar conversions de dades o si volem treballar amb tipus de dades, tenim les seg\u00fcents funcions: floatval , intval , strval : retorna una variable de la mena de la funci\u00f3 indicada settype : for\u00e7a la conversi\u00f3 gettype : obt\u00e9 el tipus is_int , is_float , is_string , is_array , is_object : retorna un boole\u00e0 a partir del tipus rebut <?php $uno = 1 ; var_dump ( is_int ( $uno )); // true $unofloat = floatval ( $uno ); settype ( $uno , \"string\" ); var_dump ( is_int ( $uno )); // false var_dump ( is_string ( $uno )); // true settype ( $uno , \"float\" ); var_dump ( is_int ( $uno )); // false var_dump ( is_float ( $uno )); // true var_dump ( is_int ( intval ( $uno ))); // true ?> Refer\u00e8ncies \u00b6 Manual de PHP PHP en 2020 , por Jes\u00fas Amieiro Apunts de PHP de Bartolom\u00e9 Sintes, profesor del IES Abastos de Valencia Gu\u00eda de Estilo - PSR PHP - La manera correcta Activitats \u00b6 PHP b\u00e0sic \u00b6 Visualitza el v\u00eddeo de Jes\u00fas Amieiro sobre PHP en 2020 a partir del minut 3.32 (s\u00f3n 40 minuts aproximadament). Quina relaci\u00f3 existeix entre PHP i Facebook? Respecte al rendiment, quina versi\u00f3 m\u00ednima haur\u00edem d'utilitzar? Per qu\u00e8 PHP t\u00e9 mala fama? 201.php : tresfrases - Mostra 3 frases, cadascuna en un par\u00e0graf utilitzant les tres possibilitats que existeixen de mostrar contingut. Despr\u00e9s d'aix\u00f2, introdueix dos comentaris, un de bloc i un altre d'una l\u00ednia. 202.php : calculs -Escriu un programa que utilitze les variables $x i $i . Assigna'ls els valors 166 i 999 respectivament. A continuaci\u00f3, mostra per pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3 i la multiplicaci\u00f3. 203.php : dadessPersonals -Escriu un programa que emmagatzeme en variables el teu nom, primer cognom, segon cognom, email, any de naixement i tel\u00e8fon. Despr\u00e9s mostra'ls per pantalla dins d'una taula. 204.html i 204.php : dadesPersonals - \u00c9s el mateix exercici que l'anterior, per\u00f2 separant la l\u00f2gica. En el primer arxiu crearem el formulari per a introduir les dades, i despr\u00e9s recollim les dades i generem la taula en el segon arxiu. Construir formulari Boostrap online 205.html i 205.php : madlib -A partir d'un nom, un verb, un adjectiu i un adverbi, crea una hist\u00f2ria que continga aquests elements. Per exemple: Entrada: gos / caminar / blau / r\u00e0pidament Eixida: T'agrada caminar amb el teu gos blau r\u00e0pidament ? 206.php : anys - Despr\u00e9s de llegir l'edat d'una persona, mostrar l'edat que tindr\u00e0 dins de 10 anys i fa 10 anys. A m\u00e9s, mostra quin any ser\u00e0 en cadascun dels casos. Finalment, mostra l'any de jubilaci\u00f3 suposant que treballar\u00e0s fins als 67 anys. En aquest cas, no fa falta que pr\u00e8viament crees un formulari, pots provar l'exercici via URL: 206anyos.php?edat=33 . $anyoActual = date(\"Y\"); 207.php : dines -A partir d'una quantitat de diners, mostrar la seua descomposici\u00f3 en bitllets (500, 200, 100, 50, 20, 10, 5) i monedes (2, 1), perqu\u00e8 el nombre d'elements siga m\u00ednim. No s'ha d'utilitzar cap instrucci\u00f3 condicional. Per exemple, en introduir 139 ha de mostrar: 1 bitllet de 100 0 bitllet de 50 1 bitllet de 20 1 bitllet de 10 1 bitllet de 5 2 moneda de 2 Pots for\u00e7ar a realitzar la divisi\u00f3 sencera mitjan\u00e7ant la funci\u00f3 intdiv($dividend, $divisor) o passar un n\u00famero flotant a enter pots usar la funci\u00f3 intval() 208. 208.php : posnegzero - A partir d'un numero , mostra per pantalla si el n\u00famero \u00e9s positiu , negatiu o zero . 209. 209.php : major3 -Sense fer \u00fas de condicions amb operadors l\u00f2gics, mostra el major de tres n\u00fameros ( a , b i c ). 210.php : nomEdat - A partir d'una edat mostra per pantalla: beb\u00e9 si t\u00e9 menys de 3 anys xiquet si t\u00e9 entre 3 i 12 anys adolescent entre 13 i 17 anys adult entre 18 i 66 jubilat a partir de 67 211.php : rellotge - Escriu un programa que funcione similar a un rellotge, de manera que a partir dels valors de hora , minut i segon mostre l'hora dins d'un segon. Despr\u00e9s de les 23.59:59 seran les 0:0:0 . 212.php : ecuacio2g - Crea un programa que resolga una equaci\u00f3 de 2n grau del tipus ax\u00b2 + bx + c = 0 . Tingues en compte que pot tindre 2, 1 o no tindre soluci\u00f3 depenent del valor del discriminant b\u00b2-4ac . Per a calcular l'arrel quadrada haur\u00e0s d'utilitzar la funci\u00f3 sqrt() index.php : index - Completa el fitxer index.php per enlla\u00e7ar tots els exercicis Exercicis d'investigaci\u00f3: Investiga perqu\u00e8 serveix l'operador nau espacial, disponible des de PHP7 ( https://www.php.net/manual/es/migration70.new-features.php ). Explica amb un parell de l\u00ednies el seu prop\u00f2sit i mitjan\u00e7ant codi demostra el seu \u00fas. Investiga per a qu\u00e8 serveix la instrucci\u00f3 match() , disponible des de PHP8 ( https://www.php.net/manual/es/control-structures.match.php ). Explica amb un parell de l\u00ednies el seu prop\u00f2sit i mitjan\u00e7ant codi demostra el seu \u00fas. Bucles \u00b6 Escriu un programa que mostre els nombres parells del 0 al 50 (dins d'una llista desordenada). Escriu un programa que sume els n\u00fameros de l'1 al 10. A partir d'una base i exponent , mitjan\u00e7ant l'acumulaci\u00f3 de productes, calcula la pot\u00e8ncia utilitzant la instrucci\u00f3 for . Mostra dins d'una taula HTML la taula de multiplicar del nombre que reba com a par\u00e0metre. Utilitza <thead> amb els seus respectius <th> i <tbody > per a dibuixar la taula. Per exemple: a * b = a*b 7 * 1 = 7 7 * 2 = 14 ... 7 * 10 = 70 224.html : Crea un formulari que permeta llegir una quantitat . 224.php : a partir de la quantitat, prepara un formulari amb tantes caixes de dades com el seu valor. Finalment a partir de les dades de totes les caixes de la p\u00e0gina anterior, suma'ls i mostra el total. Tip Per a guardar una dada oculta pots utilitzar un camp de formulari de tipus ocult: <input type=\"hidden\" name=\"cantidad\" value=\"33\" /> 225.html i 225.php : Apartir d'un nombre de files i columnes , crear una taula amb aqueixa grand\u00e0ria. Les cel\u00b7les han d'estar emplenades amb els valors de les coordenades de cada cel\u00b7la. 226.html i 226.php : Basant-te en l'exercici anterior, emplena la taula de manera que nom\u00e9s les vores tinguen contingut, quedant-se la resta de cel\u00b7les en blanc. 227.html i 227.php :Basant-te en l'exercici anterior, ara nom\u00e9s ha d'apar\u00e9ixer el contingut dels dues diagonals. 228.php : Crea un programa que mostre per pantalla un quadrat exactament igual (fixa't b\u00e9 en els encap\u00e7alats, tant de les files com de les columnes) al de la imatge amb les taules de multiplicar. Arrays \u00b6 230.php : Emplena un array amb 50 n\u00fameros aleatoris compresos entre el 0 i el 99, i despr\u00e9s mostra-ho en una llista desordenada. Per a crear un n\u00famero aleatori, utilitza la funci\u00f3 rand(inici, fi) . Per exemple: $num = rand(0, 99) 231.html : Prepara un formulari amb un caixa de text que realitze a una pregunta a l'usuari. 231.php : A partir de l'anterior, crea un programa que mostre la pregunta rebuda i genere una resposta de manera aleat\u00f2ria entre un conjunt de respostes predefinides, emmagatzemades en un array: Si, no, potser, clar que s\u00ed, per descomptat que no, no ho tinc clar, segur, jo diria que s\u00ed, ni de co\u00f1a, etc..*. 232.php : A partir de l'exercici 230, genera un array aleatori de 33 elements amb n\u00fameros compresos entre el 0 i 100 i calcula: El major El menor La mitjana 233.php : Emplena un array de 100 elements de manera aleat\u00f2ria amb valors M o F (per exemple [\"M\", \"M\", \"F\", \"M\", ...] ). Una vegada completat, torna a rec\u00f3rrer-ho i calcula quants elements hi ha de cadascun dels valors emmagatzemant el resultat en un array associatiu ['M' => 44, 'F' => 66] (no utilitzes variables per a comptar les M o les F ). Finalment, mostra el resultat per pantalla 234.php : Torna a realitzar l'exercici 207, el de les monedes (500, 200, 100, 50, 20, 10, 5, 2, 1), per\u00f2 fent \u00fas de arrays i un bucle. Emmagatzema el resultat en un array associatiu. Mostra el resultat en una llista desordenada \u00fanicament amb les quantitats que tenen algun valor. 235.php : Mitjan\u00e7ant un array associatiu, emmagatzema el nom i l'al\u00e7ada de 5 persones ( nom => al\u00e7ada ). Posteriorment, recorre el array i mostra-ho en una taula HTML. Finalment afig una \u00faltima fila a la taula amb l'altura mitjana. 236.php : Mitjan\u00e7ant un array bidimensional, emmagatzema el nom, altura i email de 5 persones. Per a aix\u00f2, crea un array de persones, sent cada persona un array associatiu: [ ['nom'=>'Aitor', 'altura'=>182, 'email'=>'aitor@correo.com'],[\u2026],\u2026 ] Posteriorment, recorre el array i mostra-ho en una taula HTML. 237.html i 237.php : a partir d'un formulari amb un camp de quantitat de persones, generar un nou formulari per a llegir el nom, altura i email de quantitat persones. 237.php : A partir de les persones introdu\u00efdes, mostrar les seues dades en una taula, i posteriorment, destacar les dades del m\u00e9s alt i el del m\u00e9s baix. 238.php : Emplena un array bidimensional de 6 files per 9 columnes amb n\u00fameros aleatoris compresos entre 100 i 999 (tots dos inclosos). Tots els n\u00fameros han de ser diferents, \u00e9s a dir, no es pot repetir cap. Mostra a continuaci\u00f3 per pantalla el contingut del array de tal forma que: La columna del m\u00e0xim ha d'apar\u00e9ixer en blau. La fila del m\u00ednim ha d'apar\u00e9ixer en verd La resta de n\u00fameros han d'apar\u00e9ixer en negre. Funcions \u00b6 functions.php : Crea les seg\u00fcents funcions: Una funci\u00f3 que esbrine si un n\u00famero \u00e9s parell: esParell(int $num): bool Una funci\u00f3 que retorne un array de grand\u00e0ria $tam amb n\u00fameros aleatoris compr\u00e9s entre $min i $max : arrayAleatori(int $tam, int $min, int $max) : array Una funci\u00f3 que reba un $array per refer\u00e8ncia i retorne la quantitat de nombres parells que hi ha emmagatzemats: countParells(array &$array): int functions.php : Crea les seg\u00fcents funcions: Una funci\u00f3 que retorne el major de tots els n\u00fameros rebuts com a par\u00e0metres: function major(): int . No pots usar la funci\u00f3 max() . Una funci\u00f3 que concatene tots els par\u00e0metres rebuts separant-los amb un espai: function concatenar(...$paraules) : string . Utilitza l'operador ... . functions.php : Afig les seg\u00fcents funcions: digits(int $num): int \u2192 retorna la quantitat de d\u00edgits d'un n\u00famero. digitN(int $num, int $post): int \u2192 retorna el d\u00edgit que ocupa, comen\u00e7ant per l'esquerra, la posici\u00f3 $post . llevaDarrere(int $num, int $cant): int \u2192 li lleva per darrere (dreta) $cant d\u00edgits. llevaDavant(int $num, int $cant): int \u2192 li lleva per davant (esquerra) $cant d\u00edgits. Per a provar les funcions, fes \u00fas tant de pas d'arguments posicionals com arguments amb nom. functions.php : Crea una biblioteca amb dues funcions: peseta2euros: passa de pessetes a euros euro2pesetes: passa d'euros a pessetes Cada funci\u00f3 ha de rebre dos par\u00e0metres: La quantitat a transformar La cotitzaci\u00f3, amb un par\u00e0metre per defecte amb el factor de transformaci\u00f3. 243.php : utilitza per construir un formulari que fa\u00e7a la transformaci\u00f3 en ambdos sentits. 244.php : A partir d'una quantitat de productes, llegir el nom i cost de la quantitat de productes indicats (similar a l'exercici 237, per\u00f2 aquesta vegada no fa falta crear el formulari amb la quantitat, es rep mitjan\u00e7ant un par\u00e0metre GET via URL). 244.php : Despr\u00e9s de llegir les dades del tiquet de compra, enumera en una taula els productes, amb el seu preu en euros i pessetes, i finalment, en una \u00faltima fila, totalitzar en totes dues monedes. Simularem un formulari d'acc\u00e9s: 245.php : el formulari d'entrada, que sol\u00b7licita l'usuari i contrasenya. 245.php : rep les dades i comprova si s\u00f3n correctes (els usuaris es guarden en un array associatiu en el fitxer 247password.php ).Utilitza include . 245.php : L'usuari introdu\u00eft \u00e9s correcte 245.php : L'usuari \u00e9s incorrecte. Informar si tots dos estan mal o nom\u00e9s la contrasenya. Tornar a mostrar el formulari d'acc\u00e9s. Funcions predefinides \u00b6 Tots els exercicis s'han de realitzar creant noves funcions per a encapsular el codi. A m\u00e9s de la pr\u00f2pia funci\u00f3, l'exercici ha de contindre codi per a poder provar-lo. 250fraseImpares.php : Lee una frase i retorna una nova amb solo els car\u00e0cters de les posicions imparelles. 251vocales.php : A partir d'una frase, retorna la quantitat de cadascuna de les vocals, i el total d'elles. 252analizador.php : A partir d'una frase amb paraules nom\u00e9s separades per espais, retornar Lletres totals i quantitat de paraules Una l\u00ednia per cada paraula indicant la seua grand\u00e0ria no es pot usar str_word_count 252analizadorWC.php : Investiga que fa la funci\u00f3 str_word_count , i torna a fer l'exercici. 253cani.php : EsCrIu UnA fUnCi\u00d3 qUe TrAnSfOrMe UnA cAdEnA eN cAnI. 254palindromo.php : Escriu una funci\u00f3 que retorne un boole\u00e0 indicant si una paraula \u00e9s pal\u00edndroma (es llig igual d'esquerra a dreta que de dreta a esquerra, per exemple, \u201clligar \u00e9s ser agil\u201d). 255codificar.php : Utilitzant les funcions per a treballar amb car\u00e0cters, a partir d'una cadena i un despla\u00e7ament: Si el despla\u00e7ament \u00e9s 1, substitueix l'A per B, la B per C, etc. El despla\u00e7ament no pot ser negatiu Si s'ix de l'abecedari, ha de tornar a comen\u00e7ar Cal respectar els espais, punts i comes. 256filtrado.html : Crea un programa que permeta a l'usuari llegir un conjunt de n\u00fameros separats per espais. 256filtrado.php : El programa filtrar\u00e0 els n\u00fameros llegits per a tornar a mostrar \u00fanicament els nombres parells i indicar\u00e0 la quantitat existent. Dona'm n\u00fameros: 1 4 7 9 23 10 8 Els 3 nombres parells s\u00f3n: 4 10 8 257investiga.php : Investiga les seg\u00fcents funcions de cadena (explica per a qu\u00e8 serveixen mitjan\u00e7ant comentaris, i programa un xicotet exemple de cadascuna d'elles): ucwords , strrev , str_repeat i md5 . Els seg\u00fcents exercicis es basen en la generaci\u00f3 de n\u00fameros aleatoris. 260generador.php : Crea una funci\u00f3 que permet generar una lletra aleat\u00f2ria, maj\u00fascula o min\u00fascula. 261generaContrasenya.php : Crea una funci\u00f3 que a partir d'una grand\u00e0ria, genere una contrasenya aleat\u00f2ria composta de lletres i d\u00edgits de manera aleat\u00f2ria. 262quinielas.php : Crea les seg\u00fcents funcions: quinigol() : array \u2192 Genera un array multidimensional amb 6 resultats aleatoris amb combinacions [012M, 012M] travessa() : array \u2192 Genera un array amb una combinaci\u00f3 de travessa generada de manera aleat\u00f2ria: 14 resultats amb 1X2 i el ple al quinze amb [012M, 012M] taula(array $travessa) : string \u2192 transforma un array d'una quniela en una taula HTML","title":"2.- El llenguatge PHP"},{"location":"02php.html#el-llenguatge-php","text":"Duraci\u00f3 i criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 26 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 2. Escriu sent\u00e8ncies executables per un servidor Web reconeixent i aplicant procediments d'integraci\u00f3 del codi en llenguatges de marques. a) S'han reconegut els mecanismes de generaci\u00f3 de p\u00e0gines Web a partir de llenguatges de marques amb codi embegut. b) S'han identificat les principals tecnologies associades. c) S'han utilitzat etiquetes per a la inclusi\u00f3 de codi en el llenguatge de marques. d) S'ha reconegut la sintaxi del llenguatge de programaci\u00f3 que s'ha d'utilitzar. e) S'han escrit sent\u00e8ncies simples i s'ha comprovat els seus efectes en el document resultant. f) S'han utilitzat directives per a modificar el comportament predeterminat. g) S'han utilitzat els diferents tipus de variables i operadors disponibles en el llenguatge. h) S'han identificat els \u00e0mbits d'utilitzaci\u00f3 de les variables. 3. Escriu blocs de sent\u00e8ncies embeguts en llenguatges de marques, seleccionant i utilitzant les estructures de programaci\u00f3. a) S'han utilitzat mecanismes de decisi\u00f3 en la creaci\u00f3 de blocs de sent\u00e8ncies. b) S'han utilitzat bucles i s'ha verificat el seu funcionament. c) S'han utilitzat \u00abarrays\u00bb per a emmagatzemar i recuperar conjunts de dades. d) S'han creat i utilitzat funcions. e) S'han utilitzat formularis Web per a interactuar amb l'usuari del navegador Web. f) S'han emprat m\u00e8todes per a recuperar la informaci\u00f3 introdu\u00efda en el formulari. g) S'han afegit comentaris al codi.","title":"El llenguatge PHP"},{"location":"02php.html#php","text":"Acr\u00f2nim de Personal Home Page Llenguatge de prop\u00f2sit general, encara que el seu fort \u00e9s el *desarollo web. Sintaxi similar a C / Java El codi s'executa en el servidor (en Apatxe mitjan\u00e7ant mod_php ) El client rep el resultat generat despr\u00e9s d'interpretar el codi en el servidor. El codi s'emmagatzema en arxiu amb extensi\u00f3 .*php . L'\u00faltima versi\u00f3 \u00e9s la 8.1, de Novembre de 2021. La seua documentaci\u00f3 \u00e9s extensa i est\u00e0 tradu\u00efda: https://www.php.net/manual/es/ .","title":"PHP"},{"location":"02php.html#codi-embegut","text":"Els blocs de codi s'escriuen entre <?php y ?> , mentre que les sent\u00e8ncies se separen mitjan\u00e7ant ; . <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < title > PHP f\u00e1cil </ title > </ head > < body > <!-- Muestra una frase con HTML --> Hola mundo < br > <!-- Muestra una frase con PHP --> <?php echo \"Es muy f\u00e1cil programar en PHP.\" ; ?> </ body > </ html > Nom\u00e9s etiquetes d'obertura Si el nostre codi nom\u00e9s contindr\u00e0 codi PHP i res d'html, com per exemple, quan codifiquem classes o interf\u00edcies, nom\u00e9s posarem l'etiqueta d'obertura, per a aix\u00ed indicar que \u00e9s una arxiu de php pur.","title":"Codi embegut"},{"location":"02php.html#generant-contingut","text":"Tenim tres possibilitats a l'hora de generar contingut en els nostres documents PHP: echo expresi\u00f3n ; print (expresi\u00f3n); <?= expresi\u00f3n ?> Les que utilitzarem s\u00f3n echo quan ho fem dins d'un bloc d'instruccions i <?= quan nom\u00e9s anem a mostrar el valor d'una variable dins d'un fragment HTML. <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Echo y print </ title > </ head > < body > < p > <?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <? = \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?> </ p > < p > <?php print ( \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ) ?> </ p > </ body > </ html >","title":"Generant contingut"},{"location":"02php.html#comentaris","text":"Podem utilitzar comentaris d'una l\u00ednia o de bloc: <?php // Este es un comentario de una sola l\u00ednea /* Este es un comentario que ocupa varias l\u00edneas */ ?>","title":"Comentaris"},{"location":"02php.html#errors","text":"Si hi ha un error d'execuci\u00f3, es produeix un Fatal Error . Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11 Stack trace: # 0 { main } thrown in C:\\xampp\\htdocs\\202echo.php on line 11 Des de PHP 5 es llancen com una excepci\u00f3. M\u00e9s endavant veurem l'\u00fas de try / catch .","title":"Errors"},{"location":"02php.html#variables","text":"No \u00e9s necessari declarar-les pr\u00e8viament. Comencen per $ , per exemple $nom . Despr\u00e9s del $ , el seg\u00fcent car\u00e0cter ha de ser una lletra en min\u00fascula (recomanaci\u00f3) o gui\u00f3 baix _ . Despr\u00e9s ja es poden posar n\u00fameros. S\u00f3n case sensitive : $*var != $*vAR No es declara el seu tipus, el tipat \u00e9s din\u00e0mic. S'assigna en temps d'execuci\u00f3 depenent del valor assignat. Convenient inicialitzar-les, sin\u00f3 donen error. <?php $nombre = \"Aitor\" ; $nombreCompleto = \"Aitor Medrano\" ; $numero = 123 ; $numero2 = 456 ; $pi = 3.14 ; $suerte = true ; $sinValor ; echo $sinValor ; ?> Tipus Encara que a priori no hi ha tipus de dades, internament PHP treballa amb quatre tipus escalars: boolean , integer , float i string i quatre tipus compostos: array , object , callable i iterable . Existeix un tipus especial per a null (m\u00e9s informaci\u00f3 en http://php.net/manual/es/language.types.null.php ).","title":"Variables"},{"location":"02php.html#constants","text":"S\u00f3n variables el valor dels quals no varien. Existeixen dues possibilitats: define(NOMBRE, valor); const NOMBRE; // PHP > 5.3 <?php define ( \"PI\" , 3.1416 ); const IVA = 0.21 ; echo PI , \" \" , IVA ; // No se pone el s\u00edmbolo dolar ?> Es declaren sempre en MAJ\u00daSCULES Hi ha un conjunt de constants ja predefinides, tamb\u00e9 conegudes com magic constants : https://www.php.net/manual/es/language.constants.predefined.php","title":"Constants"},{"location":"02php.html#operadors","text":"","title":"Operadors"},{"location":"02php.html#arimetics","text":"Exemple Nom Resultadt -$a Negaci\u00f3 Oposat de $a . $a + $b Suma Suma de $a i $b . $a - $b Resta Difer\u00e8ncia de $a i $b . $a * $b Multiplicaci\u00f3 Producte de $a i $b . $a / $b Divisi\u00f3 Cocient de $a i $b . $a % $b M\u00f2dul / Resto Resta de $a dividit per $b . $a ** $b Pot\u00e8ncia Resultat de $a elevat a $b . En el cas de cadenes , si volem concatenar-les, s'utilitza l'operador . : <?php $x = 33 ; $y = 11 ; $z = $x + $y ; echo \"La suma de 33 y 11 es \" . 44. \"<br />\" ; echo \"La suma de \" . $x . \" y \" . $y . \" es \" . ( 33 + 11 ) . \"<br />\" ; echo \"La suma de \" . $x . \" y \" . $y . \" es \" . $z . \"<br />\" ; ?> Realment, en comptes de concatenar cadenes amb variables, podem imprimir-les directament ja que s'expandeixen autom\u00e0ticament: <?php echo \"La suma de $x y $y es $z <br />\" ; ?> A vegades, necessitem envoltar el nom de la variable entre claus per a poder unir m\u00e9s text al resultat: <?php $color = \"rojo\" ; echo \"El plural de $color el ${ color } s\" ; ?> M\u00e9s endavant estudiarem algunes funcions per al tractament de cadenes.","title":"Arim\u00e8tics"},{"location":"02php.html#comparacio","text":"Exemple Nom Resultat $a == $b Igual true si $a \u00e9s igual a $b despres de la conversi\u00f3 de tipus. $a === $b Id\u00e8ntic, Comparaci\u00f3 estricta true si $a \u00e9s igual a $b , i s\u00f3n del mateix tipus de dades. $a != $b , $a <> $b Diferent true si $a no \u00e9s igual a $b despres de la conversi\u00f3 de tipus. $a !== $b No id\u00e8ntic true si $a no \u00e9s igual a $b , o si no s\u00f3n del mateix tipus. $a < $b Menor que true si $a \u00e9s estrictament menor que $b . $a > $b Major que true si $a \u00e9s estrictamente major que $b . $a <= $b Menor o igual que true si $a \u00e9s menor o igual que $b . $a >= $b Major o igual que true si $a \u00e9s major o igual que $b . $a <=> $b Nau espacial Torna -1 , 0 o 1 cuando $a \u00e9s respectivament menor, igual, o major que $b . $a ?? $b ?? $c Fussi\u00f3 de null El primer operador d'esquerra a dreta que existisca i no siga null . null si no hi ha valors definits i no s\u00f3n null . PHP >= 7.","title":"Comparaci\u00f3"},{"location":"02php.html#logics","text":"Exemple Nom Resultat $a and $b , $a && $b And (i) true si tant $a com $b s\u00f2n true . $a or $b , $a || $b Or (o inclusiva) true si qualsevol de $a o $b s\u00f3n true . $a xor $b Xor (o exclusiva) true si $a o $b s\u00f3n true , pero no ambd\u00f3s. !$a Not (no) true si $a no \u00e9s true .","title":"L\u00f2gics"},{"location":"02php.html#assignacio","text":"Exemple Nom Resultat $a = $b Assignaci\u00f3 Assign a $a el valor de $b $a += $b Assignaci\u00f3 de la suma Li afegix a $a el valor de $b . Equivalent a $a = $a + $b $a -= $b Assignaci\u00f3 de la resta Li resta a $a el valor de $b . Equivalent a $a = $a - $b $a *= $b Assignaci\u00f3 del producte Assigna a $a el producte de $a per $b . Equivalent a $a = $a * $b $a /= $b Assignaci\u00f3 de la divisi\u00f3 Assigna a $a el concient de $a entre $b . Equivalent a $a = $a / $b $a %= $b Assignaci\u00f3 de la resta Assigna a $a la resta de dividir $a entre $b . Equivalent a $a = $a % $b $a .= $b Concatenaci\u00f3 Concatena a $a la cadena $b . Equivalent a $a = $a . $b $a++ Increment Incrementa $a en una unitat. Equivalent a $a = $a + 1 $a-- Decrement Decrementa $a en una unitat. Equivalent a $a = $a - 1 Prioritat dels operadors Recorda la prioritat. Primer els par\u00e8ntesis, despr\u00e9s la negaci\u00f3 ( ! ), productes/divisions, sumes/restes, comparacions, l\u00f2gics i finalment es realitza l'assignaci\u00f3. M\u00e9s informaci\u00f3 en https://www.php.net/manual/es/language.operators.precedence.php Autoavaluaci\u00f3 Si $a=5 i $b=4 , esbrina el valor de $c si $c = $a*2 > $b+5 && !($b<>4)","title":"Assignaci\u00f3"},{"location":"02php.html#treballant-amb-formularis","text":"Les dades s'envien via URL amb el format var1=valor1&var2=valor2\u2026 . Per exemple: exemple.php?nom=Bruce&cognom=Wayne Es divideix en dos passos: Generar un formulari amb action='arxiu.php' method='GET' En l'arxiu .php llegir les dades amb $_GET['nombreVar'] Separarem sempre que podem el codi HTML del de PHP. Per exemple, el formulari el col\u00b7loquem en saluda.html : < form action = \"saluda.php\" method = \"get\" > < p >< label for = \"nombre\" > Nombre: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" ></ p > < p >< label for = \"apellido1\" > Primer apellido: </ label > < input type = \"text\" name = \"apellido1\" id = \"apellido1\" ></ p > < p >< input type = \"submit\" value = \"enviar\" ></ p > </ form > I arrepleguem les dades en saluda.php : <?php $nombre = $_GET [ \"nombre\" ]; $apellido1 = $_GET [ \"apellido1\" ]; echo \"Hola $nombre $apellido1 \" ; ?> Si el volgu\u00e9rem realitzar tot en un \u00fanic arxiu (la qual cosa no \u00e9s recomanable), podem fer-ho aix\u00ed: < form action = \"\" method = \"get\" > < p >< label for = \"nombre\" > Nombre: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" ></ p > < p >< label for = \"apellido1\" > Primer apellido: </ label > < input type = \"text\" name = \"apellido1\" id = \"apellido1\" ></ p > < input type = \"submit\" value = \"enviar\" > </ form > < p > <?php if ( isset ( $_GET [ 'nombre' ])) { $nombre = $_GET [ \"nombre\" ]; $apellido1 = $_GET [ \"apellido1\" ]; echo \"Hola $nombre $apellido1 \" ; } ?> </ p > El treball amb formularis l'estudiarem en profunditat en la unitat 4, i veurem que a m\u00e9s de *GET , podem enviar les dades amb POST .","title":"Treballant amb formularis"},{"location":"02php.html#condicions","text":"La condici\u00f3 simple es realitza mitjan\u00e7ant la instrucci\u00f3 if . Entre par\u00e8ntesi es posa la condici\u00f3 que es avalua a true o false . Si no es posen claus, en comptes d'obrir un bloc, s'executar\u00e0 nom\u00e9s la seg\u00fcent instrucci\u00f3. Sempre claus \u00c9s recomanable posar claus sempre encara que en el moment de codificar nom\u00e9s hi haja una \u00fanica instrucci\u00f3. D'aquesta manera, es queda preparat per a afegir m\u00e9s contingut en el futur sense provocar bugs . <?php $hora = 8 ; // La hora en formato de 24 horas if ( $hora === 8 ) { echo \"Suena el despertador.\" ; } echo \"<br>\" ; if ( $hora === 8 ) echo \"Suena el despertador.\" ; ?> Les condicions compostes mitjan\u00e7ant if-else : <?php $hora = 17 ; // La hora en formato de 24 horas if ( $hora <= 12 ) { echo \"Son las \" . $hora . \" de la ma\u00f1ana\" ; } else { echo \"Son las \" . ( $hora - 12 ) . \" de la tarde\" ; } ?> Les condicions niades mitjan\u00e7ant if-else if-else : <?php $hora = 14 ; // La hora en formato de 24 horas if ( $hora === 8 ) { echo \"Es la hora de desayunar.\" ; } else if ( $hora === 14 ) { echo \"Es la hora de la comida.\" ; } else if ( $hora === 21 ) { echo \"Es la hora de la cena.\" ; } else { echo \"Ahora no toca comer.\" ; } ?> La sent\u00e8ncia switch tamb\u00e9 permet treballar amb condicions m\u00faltiples: <?php $hora = 14 ; // La hora en formato de 24 horas switch ( $hora ) { case 9 : echo \"Es la hora de desayunar.\" ; break ; case 14 : echo \"Es la hora de la comida.\" ; break ; case 21 : echo \"Es la hora de la cena.\" ; break ; default : echo \"Ahora no toca comer\" ; } ?> No oblides el break Un error molt com\u00fa \u00e9s oblidar la instrucci\u00f3 break despr\u00e9s de cada cas. Si no ho posem, executar\u00e0 el seg\u00fcent cas autom\u00e0ticament. Finalment, tamb\u00e9 tenim l'operador ternari condici\u00f3 ? valorTrue : valorFalse <?php $hora = 14 ; $formato = ( $hora > 12 ) ? 24 : 12 ; echo \"El formato es de $formato horas\" ?> Si volem comprovar si una variable t\u00e9 valor i si no donar-li un valor determinat, usarem l'operador ?: (es coneix com l'operador Elvis - https://en.wikipedia.org/wiki/Elvis_operator ) amb la sintaxi expressi\u00f3 ?: valorSiVacio : <?php $nombre = $_GET [ 'nombre' ] ?: \"desconocido\" ?>","title":"Condicions"},{"location":"02php.html#bucles","text":"Mitjan\u00e7ant la instrucci\u00f3 while : <?php $i = 1 ; while ( $i <= 10 ) { echo \"L\u00ednea \" . $i ; echo \"<br>\" ; $i ++ ; } ?> Mitjan\u00e7ant la instrucci\u00f3 do-while : <?php do { $dado = rand ( 1 , 6 ); // rand() devuelve un valor aleatorio echo \"Tirando el dado... \" ; echo \"ha salido un \" . $dado . \".\" ; echo \"<br>\" ; } while ( $dado != 5 ); echo \"\u00a1Bien! Saco una ficha de casa.\" ; ?> Mitjan\u00e7ant la instrucci\u00f3 for : <?php // Bucle ascendente for ( $i = 1 ; $i <= 10 ; $i ++ ) { echo \"L\u00ednea \" . $i ; echo \"<br>\" ; } // Bucle descendente for ( $i = 10 ; $i >= 0 ; $i -- ) { echo \"L\u00ednea \" . $i ; echo \"<br>\" ; } ?> M\u00e9s endavant estudiarem el bucle foreach per a rec\u00f3rrer arrays. PHP, de la mateixa manera que Java i C, permet trencar els bucles mitjan\u00e7ant la instrucci\u00f3 break . Al seu torn, continue permet saltar a la seg\u00fcent iteraci\u00f3. Si pots, evita break i continue Personalment, no m'agrada el seu \u00fas. Preferisc l'\u00fas de variables flag per a controlar l'eixida dels bucles. Per exemple: <?php $salir = false ; for ( $i = 1 ; $i <= 10 && ! $salir ; $i ++ ) { if ( $i === 5 ) { echo \"Salgo cuando i=5\" ; $salir = true ; } } ?>","title":"Bucles"},{"location":"02php.html#arrays","text":"Per a emmagatzemar dades compostes, podem utilitzar tant arrays senzills com arrays associatius (similars a un mapa). En realitat tots els arrays s\u00f3n mapes ordenats compostos de parells clau-valor. Compte amb mesclar tipus Com el tipat \u00e9s din\u00e0mic, nostres arrays poden contenir dades de diferents tipus. No es recomana mesclar els tipus. De la mateixa manera que Java, es defineixen mitjan\u00e7ant claud\u00e0tors, s\u00f3n 0-index, i es pot assignar un valor a un posici\u00f3 determinada: <?php $frutas = array ( \"naranja\" , \"pera\" , \"manzana\" ); $frutas2 = [ \"naranja\" , \"pera\" , \"manzana\" ]; $frutas3 = []; $frutas3 [ 0 ] = \"naranja\" ; $frutas3 [ 1 ] = \"pera\" ; $frutas3 [] = \"manzana\" ; // lo a\u00f1ade al final Podem obtindre la grand\u00e0ria del array mitjan\u00e7ant la funci\u00f3 count(array) . Per a rec\u00f3rrer el array farem \u00fas d'un bucle for : <?php $tam = count ( $frutas ); // tama\u00f1o del array for ( $i = 0 ; $i < count ( $frutas ); $i ++ ) { echo \"Elemento $i : $frutas[$i] <br />\" ; } Una altra manera de rec\u00f3rrer els arrays, fins i tot m\u00e9s elegant, \u00e9s fer \u00fas de foreach . La seua sintaxi \u00e9s foreach (array as element) : <?php // Mitjan\u00e7ant foreach no necessitem saber la grand\u00e0ria del array foreach ( $frutas as $fruta ) { echo \" $fruta <br />\" ; }","title":"Arrays"},{"location":"02php.html#arrays-associatius","text":"Cada element \u00e9s un parell clau-valor. En comptes d'accedir per la posici\u00f3, el fem mitjan\u00e7ant una clau. Aix\u00ed doncs, per a cada clau s'emmagatzema un valor. A l'hora de rec\u00f3rrer aquest tipus de arrays, mitjan\u00e7ant foreach separem cada element en una parella clau => valor : <?php $capitales = [ \"Italia\" => \"Roma\" , \"Francia\" => \"Paris\" , \"Portugal\" => \"Lisboa\" ]; $capitalFrancia = $capitales [ \"Francia\" ]; // se accede al elemento por la clave, no la posici\u00f3n $capitales [ \"Alemania\" ] = \"Berl\u00edn\" ; // a\u00f1adimos un elemento echo \"La capital de Francia es $capitalFrancia <br />\" ; echo \"La capital de Francia es { $capitales [ \"Francia\" ] } <br />\" ; $capitales [] = \"Madrid\" ; // se a\u00f1ade con la clave 0 !!! \u00a1\u00a1\u00a1No asignar valores sin clave!!! foreach ( $capitales as $valor ) { // si recorremos un array asociativo, mostraremos los valores echo \" $valor <br />\" ; } foreach ( $capitales as $pais => $ciudad ) { // separamos cada elemento en clave => valor echo \" $pais : $ciudad <br />\" ; }","title":"Arrays associatius"},{"location":"02php.html#operacions","text":"print_r($array) : mostra el contingut de tot el $array . Si volem mostrar el contingut amb un format determinat, hem de rec\u00f3rrer el array amb foreach . var_dump($mixed) : mostra el contingut de l'element rebut. Mostra m\u00e9s informaci\u00f3 que print_r . $elem = array_pop($array) : elimina l'\u00faltim $element array_push($array, $elem) : afig un $element al final $boole\u00e0 = in_array($elem, $array) : esbrina si $elem est\u00e0 en el $array PHP Consola <?php $frutas = [ \"naranja\" , \"pera\" , \"manzana\" ]; array_push ( $frutas , \"pi\u00f1a\" ); print_r ( $frutas ); $ultFruta = array_pop ( $frutas ); if ( in_array ( \"pi\u00f1a\" , $frutas )) { echo \"<p>Queda pi\u00f1a</p>\" ; } else { echo \"<p>No queda pi\u00f1a</p>\" ; } print_r ( $frutas ); Array ( [0] => naranja [1] => pera [2] => manzana [3] => pi\u00f1a ) <p>No queda pi\u00f1a</p> Array ( [0] => naranja [1] => pera [2] => manzana ) $claus = array_keys($array) : retorna les claus del $array associatiu $tam = count($array) : retorna la grand\u00e0ria de $array sort($array) : ordena els elements del $array isset($array[element]) : indica si existeix/t\u00e9 valor element dins del array unset($array[element]) : elimina l'element del array (deixa un buit) PHP Consola <?php $capitales = array ( \"Italia\" => \"Roma\" , \"Francia\" => \"Paris\" , \"Portugal\" => \"Lisboa\" ); $paises = array_keys ( $capitales ); print_r ( $paises ); sort ( $paises ); print_r ( $paises ); unset ( $capitales [ \"Francia\" ]); print_r ( $capitales ); Array ( [0] => Italia [1] => Francia [2] => Portugal ) Array ( [0] => Francia [1] => Italia [2] => Portugal ) Array ( [Italia] => Roma [Portugal] => Lisboa ) En assignar un array a un altre es realitza una c\u00f2pia. Compte amb aquesta operaci\u00f3 que pot consumir molts recursos. PHP Consola <?php $nombres = [ \"Juan\" , \"Ana\" , \"Pedro\" , \"Laura\" ]; $copia = $nombres ; sort ( $nombres ); print_r ( $nombres ); print_r ( $copia ); Array ( [0] => Ana [1] => Juan [2] => Laura [3] => Pedro ) Array ( [0] => Juan [1] => Ana [2] => Pedro [3] => Laura ) Existeixen molt\u00edssimes m\u00e9s funcions per a treballar amb arrays. Pots consultar roda la informaci\u00f3 en la documentaci\u00f3 oficial . Articles per a aprofundir en les operacions amb arrays Un article molt complet (en angl\u00e9s) de Com treballar amb arrays en PHP de la manera correcta . Un altre article recomanable (en angl\u00e9s) \u00e9s Com ordenar arrays en PHP .","title":"Operacions"},{"location":"02php.html#arrays-bidimensionales","text":"Consisteix en un array de arrays, ja siguen arrays seq\u00fcencials o associatius. Pot haver-hi N dimensiones. <?php $persona [ \"nombre\" ] = \"Bruce Wayne\" ; $persona [ \"telefonos\" ] = [ \"966 123 456\" , \"636 636 636\" ]; // array de arrays ordinarios $persona [ \"profesion\" ] = [ \"dia\" => \"fil\u00e1ntropo\" , \"noche\" => \"caballero oscuro\" ]; // array de arrays asociativos echo $persona [ 'nombre' ] . \" por la noche trabaja de \" . $persona [ 'profesion' ][ 'noche' ]; Combinant els arrays associatius en diverses dimensions podem emmagatzemar la informaci\u00f3 com si fora una taula: <?php $menu1 = [ \"Plato1\" => \"Macarrones con queso\" , \"Plato2\" => \"Pescado asado\" , \"Bebida\" => \"Coca-Cola\" , \"Postre\" => \"Helado de vainilla\" ]; $menu2 = [ \"Plato1\" => \"Sopa\" , \"Plato2\" => \"Lomo con patatas\" , \"Bebida\" => \"Agua\" , \"Postre\" => \"Arroz con leche\" ]; $menus = [ $menu1 , $menu2 ]; // creamos un array a partir de arrays asociativos foreach ( $menus as $menudeldia ) { echo \"Men\u00fa del d\u00eda<br/>\" ; foreach ( $menudeldia as $platos => $comida ) { echo \" $platos : $comida <br/>\" ; } } // Per a accedir a un element concret es nien els claud\u00e0tors $postre0 = $menus [ 0 ][ \"Postre\" ]; Encara que puga semblar una bona idea crear aquest tipus d'estructures, \u00e9s millor utilitzar objectes conjuntament amb arrays (possiblement arrays d'altres objectes) per a crear estructures complexes que permeten modelar millor els problemes.","title":"Arrays bidimensionales"},{"location":"02php.html#funcions","text":"Al no declarar-se els tipus de dades, els par\u00e0metres de les funcions no tenen tipus ni s'indica el tipus de dada que retornen. El pas de par\u00e0metres es realitza per valor, \u00e9s a dir, es realitza una c\u00f2pia de la variable. <?php function nombreFuncion ( $par1 , $par2 , ... ) { // c\u00f3digo return $valor ; } $resultado = nombreFuncion ( $arg1 , $arg2 , \u2026 ); ?> Per exemple: <?php function diaSemana () { $semana = [ \"lunes\" , \"martes\" , \"mi\u00e9rcoles\" , \"jueves\" , \"viernes\" , \"s\u00e1bado\" , \"domingo\" ]; $dia = $semana [ rand ( 0 , 6 )]; return $dia ; } $diaCine = diaSemana (); echo \"El pr\u00f3ximo $diaCine voy al cine.\" ; ?>","title":"Funcions"},{"location":"02php.html#parametres-per-referencia","text":"Si volem passar un par\u00e0metre per refer\u00e8ncia, en la declaraci\u00f3 de la funci\u00f3, indicarem els par\u00e0metres mitjan\u00e7ant l'operador & * per a indicar la direcci\u00f3 de mem\u00f2ria de la variable. <?php function duplicarPorValor ( $argumento ) { $argumento = $argumento * 2 ; echo \"Dentro de la funci\u00f3n: $argumento .<br>\" ; } function duplicarPorReferencia ( & $argumento ) { $argumento = $argumento * 2 ; echo \"Dentro de la funci\u00f3n: $argumento .<br>\" ; } $numero1 = 5 ; echo \"Antes de llamar: $numero1 .<br>\" ; duplicarPorValor ( $numero1 ); echo \"Despu\u00e9s de llamar: $numero1 .<br>\" ; echo \"<br>\" ; $numero2 = 7 ; echo \"Antes de llamar: $numero2 .<br>\" ; duplicarPorReferencia ( $numero2 ); echo \"Despu\u00e9s de llamar: $numero2 .<br>\" ; ?>","title":"Par\u00e0metres per refer\u00e8ncia"},{"location":"02php.html#parametres-per-defecte-opcionals","text":"Permeten assignar valors en la declaraci\u00f3, i posteriorment, deixar l'argument en blanc. <?php function obtenerCapital ( $pais = \"todos\" ) { $capitales = array ( \"Italia\" => \"Roma\" , \"Francia\" => \"Paris\" , \"Portugal\" => \"Lisboa\" ); if ( $pais == \"todos\" ) { return array_values ( $capitales ); } else { return $capitales [ $pais ]; } } print_r ( obtenerCapital ()); echo \"<br/>\" ; echo obtenerCapital ( \"Francia\" ); En el cas de conviure amb una altra mena de par\u00e0metres, els par\u00e0metres que tenen el valor assignat per defecte sempre es col\u00b7loquen al final. <?php function saluda ( $nombre , $prefijo = \"Sr\" ) { echo \"Hola \" . $prefijo . \" \" . $nombre ; } saluda ( \"Aitor\" , \"Mr\" ); saluda ( \"Aitor\" ); saluda ( \"Marina\" , \"Srta\" );","title":"Par\u00e0metres per defecte / opcionals"},{"location":"02php.html#parametres-variables","text":"Podem tindre funcions on en la declaraci\u00f3 no indiquem la quantitat de dades d'entrada. $arrayArgs = func_get_args(); \u2192 Obt\u00e9 un array amb els par\u00e0metres $quantitat = func_num_args(); \u2192 Obt\u00e9 la quantitat de par\u00e0metres rebuts $valor = func_get_arg(numArgumento); \u2192 Obt\u00e9 el par\u00e0metre que ocupa la posici\u00f3 numArgumento . Aquestes funcions no es poden passar com a par\u00e0metre a una altra funci\u00f3 (com a funcions variable, que veurem m\u00e9s endavant). Per a aix\u00f2, hem de guardar pr\u00e8viament la funci\u00f3 en una variable. <?php function sumaParametros () { if ( func_num_args () == 0 ) { return false ; } else { $suma = 0 ; for ( $i = 0 ; $i < func_num_args (); $i ++ ) { $suma += func_get_arg ( $i ); } return $suma ; } } echo sumaParametros ( 1 , 5 , 9 ); // 15 ?> Des de PHP 5.6, es pot utilitzar l'operador ... ( variadics ) el qual \"disfressa\" els par\u00e0metres com un array: <?php function sumaParametrosMejor ( ... $numeros ) { if ( count ( $numeros ) == 0 ) { return false ; } else { $suma = 0 ; foreach ( $numeros as $num ) { $suma += $num ; } return $suma ; } } echo sumaParametrosMejor ( 1 , 5 , 9 ); // 15 ?> M\u00e9s usos de ... Tamb\u00e9 es pot utilitzar per a dividir un array en variables separades per a proporcionar arguments <?php function suma ( $a , $b ) { return $a + $b ; } echo suma ( ... [ 1 , 5 ]) . \"<br />\" ; $a = [ 1 , 5 ]; echo suma ( ... $a ); ?>","title":"Par\u00e0metres variables"},{"location":"02php.html#arguments-amb-nom","text":"Des de PHP 8.0 podem passar els arguments amb el nom (a m\u00e9s de per posici\u00f3, com hem fet fins ara). Els arguments amb nom es passen posant el nom com a prefix del par\u00e0metres separat per dos punts: $resultat = funcion( arg1 : valor1, arg2 : valor2); Aquesta caracter\u00edstica complementa els parametros opcionals permitiendonos saltar el seu valor: <?php function funcionArgumentosNombre ( $a , $b = 2 , $c = 4 ) { echo \" $a $b $c \" ; } funcionArgumentosNombre ( c : 3 , a : 1 ); // \"1 2 3\" Tant els par\u00e0metres opcionals com els obligatoris poden tindre nom, per\u00f2 els arguments amb nom s'han de posar despr\u00e9s dels que no ho tenen. <?php funcionArgumentosNombre ( 1 , c : 3 ); // \"1 2 3\"","title":"Arguments amb nom"},{"location":"02php.html#funcions-amb-tipus","text":"Des de PHP7 en les funcions, tant els par\u00e0metre com la seua devoluci\u00f3, permeten la definici\u00f3 de tipus. Aix\u00f2 es coneix com strict_types (tipificaci\u00f3 estricta) i cal definir-ho en la primera l\u00ednia de cada arxiu .php perqu\u00e8 el propi interprete PHP comprove els tipus i llance errors si els tipus s\u00f3n incorrectes, mitjan\u00e7ant la sent\u00e8ncia <?php declare ( strict_types = 1 ); Aix\u00ed doncs, definirem els tipus dels par\u00e0metres i dels valors retornats mitjan\u00e7ant els tipus: int , float , string , bool , object i array . Si una funci\u00f3 no retorna res s'indica mitjan\u00e7ant el tipus void . <?php declare ( strict_types = 1 ); function suma ( int $a , int $b ) : int { return $a + $b ; } $num = 33 ; echo suma ( 10 , 30 ); echo suma ( 10 , $num ); echo suma ( \"10\" , 30 ); // error por tipificaci\u00f3n estricta, sino dar\u00eda 40 ?>","title":"Funcions amb tipus"},{"location":"02php.html#abast","text":"Les variables definides fora de les funcions tenen abast global : accessibles des de qualsevol funci\u00f3. Els par\u00e0metres d'una funci\u00f3 i les variables declarades dins d'una funci\u00f3 (es coneixen com a variables locals) nom\u00e9s s\u00f3n accessibles des de dins de la mateixa funci\u00f3 \u2192 aconseguisca de funci\u00f3**. En cas de conflicte, tenen prioritat les variables locals. Per a evitar el conflicte, dins de la funci\u00f3, podem declarar la variable com a global . Abast local Abast global <?php function miCiudad () { $ciudad = \"Elche\" ; echo \"Dentro de la funci\u00f3n: $ciudad .<br>\" ; } $ciudad = \"Alicante\" ; echo \"Antes de la funci\u00f3n: $ciudad .<br>\" ; miCiudad (); echo \"Despu\u00e9s de la funci\u00f3n: $ciudad .<br>\" ?> <?php function miCiudad () { global $ciudad ; $ciudad = \"Elche\" ; echo \"Dentro de la funci\u00f3n: $ciudad .<br>\" ; } $ciudad = \"Alicante\" ; echo \"Antes de llamar: $ciudad .<br>\" ; miCiudad (); echo \"Despu\u00e9s de llamar: $ciudad .<br>\" ?> No globals Per favor, cal evitar l'\u00fas de variables globals dins de les funcions. En el cas de necessitar-les, \u00e9s millor passar-les com a par\u00e0metre a les funcions.","title":"Abast"},{"location":"02php.html#funcions-variable","text":"Permet assignar una funci\u00f3 a una variable. Nom de la funci\u00f3 entre cometes. Si una variable va seguida de par\u00e8ntesi, PHP buscar\u00e0 una funci\u00f3 amb el seu valor. <?php $miFuncionSuma = \"suma\" ; echo $miFuncionSuma ( 3 , 4 ); // invoca a la funci\u00f3n suma ?> Funcions an\u00f2nimes PHP permet la definici\u00f3 i \u00fas de funcions an\u00f2nimes, \u00e9s a dir, funcions que no tenen nom, i s'utilitzen principalment per a gestionar els callbacks . Aquest tipus de funcions s'utilitza molt en JavaScript per a gestionar els esdeveniments i promeses. <?php $anonima = function () { echo \"Hola\" ; }; $anonima (); $anonimaConParametro = function ( $nombre ) { echo \"Hola \" . $nombre ; }; $anonimaConParametro ( \"Aitor\" ); // Uso de variables externas a la funci\u00f3n an\u00f3nima --> `use` $mensaje = \"Hola\" ; $miClosure = function () use ( $mensaje ) { echo $mensaje ; }; $miClosure (); // Uso de par\u00e1metros $holaPHP = function ( $arg ) use ( $mensaje ) { echo $mensaje . \" \" . $arg ; }; $holaPHP ( \"PHP\" ); ?> Des de PHP 7.4 s'han introdu\u00eft les funciones fletxa (arrow functions) per a simplificar la seua definici\u00f3 i \u00fas. Teniu m\u00e9s informaci\u00f3 sobre funcions an\u00f2nimes i fletxa en el seg\u00fcent article (en angl\u00e9s): Funcions an\u00f2nimes i fletxa en PHP","title":"Funcions variable"},{"location":"02php.html#biblioteca-de-funcions","text":"Podem agrupar un conjunt de funcions en un arxiu, per a permetre la seua reutilitzaci\u00f3. Posteriorment, s'inclou amb: include(arxiu); / include_once(arxiu); require(arxiu); / require_once(arxiu); Si no troba l'arxiu, require llan\u00e7a un error fatal, include l'ignora Les funcions _once nom\u00e9s es carreguen una vegada, si ja ha sigut inclosa pr\u00e8viament, no el torna a fer, evitant bucles. Per exemple, col\u00b7loquem les funcions en l'arxiu biblioteca.php : <?php function suma ( int $a , int $b ) : int { return $a + $b ; } function resta ( int $a , int $b ) : int { return $a - $b ; } ?> I posteriorment en un altre arxiu: <?php include_once ( \"biblioteca.php\" ); echo suma ( 10 , 20 ); echo resta ( 40 , 20 ); ?>","title":"Biblioteca de funcions"},{"location":"02php.html#plantilles-mitjancant-include","text":"Mitjan\u00e7ant l'\u00fas de la instrucci\u00f3 include tamb\u00e9 podem separar fragments de codi PHP/HTML que vulguem reutilitzar en els nostres llocs web i crear un sistema molt senzill de plantilles. Per exemple, separarem una p\u00e0gina en tres parts, primer la part superior en encap\u00e7alat.php : <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > <? = $titulo ?> </ title > </ head > < body > La part de baix, per exemple, nom\u00e9s contindr\u00e0 HTML i la col\u00b7loquem en peu.html : < footer > Aitor Medrano </ footer > </ body > </ html > I despr\u00e9s ens centrem \u00fanicament en el contingut que canvia en pagina.php : <?php $titulo = \"P\u00e1gina con includes\" ; include ( \"encap\u00e7alat.php\" ); ?> < h1 > <? = $titulo ?> </ h1 > <?php include ( \"peu.html\" ); ?>","title":"Plantilles mitjan\u00e7ant include"},{"location":"02php.html#funcions-predefinides","text":"El llenguatge ofereix un ventall de funcions ja definides, agrupades per la seua funcionalitat: https://www.php.net/manual/es/funcref.php","title":"Funcions predefinides"},{"location":"02php.html#cadenes","text":"Ja hem vist que es poden crear amb cometes simples ( '' , sense interpretaci\u00f3) o cometes dobles ( \"\" , interpreten el contingut i les seq\u00fc\u00e8ncies de fuita \\n , \\t , \\$ , { , \u2026 - *magic quotes) <?php \"Me llamo $nombre \" \"Son 30 { $moneda } s\" ?> S'accedeixen als car\u00e0cters com si fora un array. <?php $cadena = \u201cYo soy Batman\u201d ; $ygriega = $cadena [ 0 ]; ?> A m\u00e9s de echo , podem mostrar les cadenes mitjan\u00e7ant la funci\u00f3 printf . Aquesta funci\u00f3 ve heretada del llenguatge C, i en la cadena s'indica el tipus de dada a formatar i genera una eixida formatada. Si vull guardar el resultat en una variable, podem utilitzar sprintf . <?php $num = 33 ; $nombre = \"Larry Bird\" ; printf ( \"%s llevaba el n\u00famero %d\" , $nombre , $num ); // %d -> n\u00famero decimal, %s -> string $frase = sprintf ( \"%s llevaba el n\u00famero %d\" , $nombre , $num ); echo $frase ?> Teniu molts m\u00e9s exemples en https://www.w3schools.com/php/func_string_printf.asp","title":"Cadenes"},{"location":"02php.html#matematiques","text":"Disposem tant de constants com funcions ja definides per a treballar amb operacions matem\u00e0tiques: https://www.php.net/manual/es/ref.math.php Constants ja definides M_PI , M_E , M_EULER , M_LN2 , M_LOG2E PHP_INT_MAX , PHP_FLOAT_MAX Funciones de c\u00e0lcul pow , sqrt , log , decbin , bindec , decoct , dechex , base_convert , max , min Funcions trigonom\u00e8triques sense , cos , tan , deg2rad , rad2deg Funcions per a treballar amb n\u00fameros aleatoris rand , mt_rand (m\u00e9s r\u00e0pida) Encara que la majoria d'elles s\u00f3n molt espec\u00edfiques de problemes matem\u00e0tics / estad\u00edstics, \u00e9s molt com\u00fa que h\u00e0gem d'arredonir i/o formatar els c\u00e0lculs abans de mostrar-los a l'usuari. Mitjan\u00e7ant la funci\u00f3 number_format(numere, cantidadDecimales, separadorDecimales, separadorMiles) podermos passar n\u00fameros a cadena amb decimals i/o separadors de decimals i/o de milers. <?php $nf = 1234.5678 ; echo number_format ( $nf , 2 ); // 1,234.57 echo number_format ( $nf , 2 , \"M\" , \"#\" ); // 1#234M57 ?> Per a arredonir, tenim abs per al valor absolut i round per a arredonir, ceil per a aproximaci\u00f3 per exc\u00e9s i floor per defecte. <?php $num = 7.7 ; $siete = floor ( $num ); $ocho = ceil ( $num ); $otro = 4.49 ; $cuatro = round ( $otro ); $cuatrocinco = round ( $otro , 1 ); $cinco = round ( $cuatrocinco ); ?>","title":"Matem\u00e1tiques"},{"location":"02php.html#tipus-de-dades","text":"Finalment, per a realitzar conversions de dades o si volem treballar amb tipus de dades, tenim les seg\u00fcents funcions: floatval , intval , strval : retorna una variable de la mena de la funci\u00f3 indicada settype : for\u00e7a la conversi\u00f3 gettype : obt\u00e9 el tipus is_int , is_float , is_string , is_array , is_object : retorna un boole\u00e0 a partir del tipus rebut <?php $uno = 1 ; var_dump ( is_int ( $uno )); // true $unofloat = floatval ( $uno ); settype ( $uno , \"string\" ); var_dump ( is_int ( $uno )); // false var_dump ( is_string ( $uno )); // true settype ( $uno , \"float\" ); var_dump ( is_int ( $uno )); // false var_dump ( is_float ( $uno )); // true var_dump ( is_int ( intval ( $uno ))); // true ?>","title":"Tipus de dades"},{"location":"02php.html#referencies","text":"Manual de PHP PHP en 2020 , por Jes\u00fas Amieiro Apunts de PHP de Bartolom\u00e9 Sintes, profesor del IES Abastos de Valencia Gu\u00eda de Estilo - PSR PHP - La manera correcta","title":"Refer\u00e8ncies"},{"location":"02php.html#activitats","text":"","title":"Activitats"},{"location":"02php.html#php-basic","text":"Visualitza el v\u00eddeo de Jes\u00fas Amieiro sobre PHP en 2020 a partir del minut 3.32 (s\u00f3n 40 minuts aproximadament). Quina relaci\u00f3 existeix entre PHP i Facebook? Respecte al rendiment, quina versi\u00f3 m\u00ednima haur\u00edem d'utilitzar? Per qu\u00e8 PHP t\u00e9 mala fama? 201.php : tresfrases - Mostra 3 frases, cadascuna en un par\u00e0graf utilitzant les tres possibilitats que existeixen de mostrar contingut. Despr\u00e9s d'aix\u00f2, introdueix dos comentaris, un de bloc i un altre d'una l\u00ednia. 202.php : calculs -Escriu un programa que utilitze les variables $x i $i . Assigna'ls els valors 166 i 999 respectivament. A continuaci\u00f3, mostra per pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3 i la multiplicaci\u00f3. 203.php : dadessPersonals -Escriu un programa que emmagatzeme en variables el teu nom, primer cognom, segon cognom, email, any de naixement i tel\u00e8fon. Despr\u00e9s mostra'ls per pantalla dins d'una taula. 204.html i 204.php : dadesPersonals - \u00c9s el mateix exercici que l'anterior, per\u00f2 separant la l\u00f2gica. En el primer arxiu crearem el formulari per a introduir les dades, i despr\u00e9s recollim les dades i generem la taula en el segon arxiu. Construir formulari Boostrap online 205.html i 205.php : madlib -A partir d'un nom, un verb, un adjectiu i un adverbi, crea una hist\u00f2ria que continga aquests elements. Per exemple: Entrada: gos / caminar / blau / r\u00e0pidament Eixida: T'agrada caminar amb el teu gos blau r\u00e0pidament ? 206.php : anys - Despr\u00e9s de llegir l'edat d'una persona, mostrar l'edat que tindr\u00e0 dins de 10 anys i fa 10 anys. A m\u00e9s, mostra quin any ser\u00e0 en cadascun dels casos. Finalment, mostra l'any de jubilaci\u00f3 suposant que treballar\u00e0s fins als 67 anys. En aquest cas, no fa falta que pr\u00e8viament crees un formulari, pots provar l'exercici via URL: 206anyos.php?edat=33 . $anyoActual = date(\"Y\"); 207.php : dines -A partir d'una quantitat de diners, mostrar la seua descomposici\u00f3 en bitllets (500, 200, 100, 50, 20, 10, 5) i monedes (2, 1), perqu\u00e8 el nombre d'elements siga m\u00ednim. No s'ha d'utilitzar cap instrucci\u00f3 condicional. Per exemple, en introduir 139 ha de mostrar: 1 bitllet de 100 0 bitllet de 50 1 bitllet de 20 1 bitllet de 10 1 bitllet de 5 2 moneda de 2 Pots for\u00e7ar a realitzar la divisi\u00f3 sencera mitjan\u00e7ant la funci\u00f3 intdiv($dividend, $divisor) o passar un n\u00famero flotant a enter pots usar la funci\u00f3 intval() 208. 208.php : posnegzero - A partir d'un numero , mostra per pantalla si el n\u00famero \u00e9s positiu , negatiu o zero . 209. 209.php : major3 -Sense fer \u00fas de condicions amb operadors l\u00f2gics, mostra el major de tres n\u00fameros ( a , b i c ). 210.php : nomEdat - A partir d'una edat mostra per pantalla: beb\u00e9 si t\u00e9 menys de 3 anys xiquet si t\u00e9 entre 3 i 12 anys adolescent entre 13 i 17 anys adult entre 18 i 66 jubilat a partir de 67 211.php : rellotge - Escriu un programa que funcione similar a un rellotge, de manera que a partir dels valors de hora , minut i segon mostre l'hora dins d'un segon. Despr\u00e9s de les 23.59:59 seran les 0:0:0 . 212.php : ecuacio2g - Crea un programa que resolga una equaci\u00f3 de 2n grau del tipus ax\u00b2 + bx + c = 0 . Tingues en compte que pot tindre 2, 1 o no tindre soluci\u00f3 depenent del valor del discriminant b\u00b2-4ac . Per a calcular l'arrel quadrada haur\u00e0s d'utilitzar la funci\u00f3 sqrt() index.php : index - Completa el fitxer index.php per enlla\u00e7ar tots els exercicis Exercicis d'investigaci\u00f3: Investiga perqu\u00e8 serveix l'operador nau espacial, disponible des de PHP7 ( https://www.php.net/manual/es/migration70.new-features.php ). Explica amb un parell de l\u00ednies el seu prop\u00f2sit i mitjan\u00e7ant codi demostra el seu \u00fas. Investiga per a qu\u00e8 serveix la instrucci\u00f3 match() , disponible des de PHP8 ( https://www.php.net/manual/es/control-structures.match.php ). Explica amb un parell de l\u00ednies el seu prop\u00f2sit i mitjan\u00e7ant codi demostra el seu \u00fas.","title":"PHP b\u00e0sic"},{"location":"02php.html#bucles_1","text":"Escriu un programa que mostre els nombres parells del 0 al 50 (dins d'una llista desordenada). Escriu un programa que sume els n\u00fameros de l'1 al 10. A partir d'una base i exponent , mitjan\u00e7ant l'acumulaci\u00f3 de productes, calcula la pot\u00e8ncia utilitzant la instrucci\u00f3 for . Mostra dins d'una taula HTML la taula de multiplicar del nombre que reba com a par\u00e0metre. Utilitza <thead> amb els seus respectius <th> i <tbody > per a dibuixar la taula. Per exemple: a * b = a*b 7 * 1 = 7 7 * 2 = 14 ... 7 * 10 = 70 224.html : Crea un formulari que permeta llegir una quantitat . 224.php : a partir de la quantitat, prepara un formulari amb tantes caixes de dades com el seu valor. Finalment a partir de les dades de totes les caixes de la p\u00e0gina anterior, suma'ls i mostra el total. Tip Per a guardar una dada oculta pots utilitzar un camp de formulari de tipus ocult: <input type=\"hidden\" name=\"cantidad\" value=\"33\" /> 225.html i 225.php : Apartir d'un nombre de files i columnes , crear una taula amb aqueixa grand\u00e0ria. Les cel\u00b7les han d'estar emplenades amb els valors de les coordenades de cada cel\u00b7la. 226.html i 226.php : Basant-te en l'exercici anterior, emplena la taula de manera que nom\u00e9s les vores tinguen contingut, quedant-se la resta de cel\u00b7les en blanc. 227.html i 227.php :Basant-te en l'exercici anterior, ara nom\u00e9s ha d'apar\u00e9ixer el contingut dels dues diagonals. 228.php : Crea un programa que mostre per pantalla un quadrat exactament igual (fixa't b\u00e9 en els encap\u00e7alats, tant de les files com de les columnes) al de la imatge amb les taules de multiplicar.","title":"Bucles"},{"location":"02php.html#arrays_1","text":"230.php : Emplena un array amb 50 n\u00fameros aleatoris compresos entre el 0 i el 99, i despr\u00e9s mostra-ho en una llista desordenada. Per a crear un n\u00famero aleatori, utilitza la funci\u00f3 rand(inici, fi) . Per exemple: $num = rand(0, 99) 231.html : Prepara un formulari amb un caixa de text que realitze a una pregunta a l'usuari. 231.php : A partir de l'anterior, crea un programa que mostre la pregunta rebuda i genere una resposta de manera aleat\u00f2ria entre un conjunt de respostes predefinides, emmagatzemades en un array: Si, no, potser, clar que s\u00ed, per descomptat que no, no ho tinc clar, segur, jo diria que s\u00ed, ni de co\u00f1a, etc..*. 232.php : A partir de l'exercici 230, genera un array aleatori de 33 elements amb n\u00fameros compresos entre el 0 i 100 i calcula: El major El menor La mitjana 233.php : Emplena un array de 100 elements de manera aleat\u00f2ria amb valors M o F (per exemple [\"M\", \"M\", \"F\", \"M\", ...] ). Una vegada completat, torna a rec\u00f3rrer-ho i calcula quants elements hi ha de cadascun dels valors emmagatzemant el resultat en un array associatiu ['M' => 44, 'F' => 66] (no utilitzes variables per a comptar les M o les F ). Finalment, mostra el resultat per pantalla 234.php : Torna a realitzar l'exercici 207, el de les monedes (500, 200, 100, 50, 20, 10, 5, 2, 1), per\u00f2 fent \u00fas de arrays i un bucle. Emmagatzema el resultat en un array associatiu. Mostra el resultat en una llista desordenada \u00fanicament amb les quantitats que tenen algun valor. 235.php : Mitjan\u00e7ant un array associatiu, emmagatzema el nom i l'al\u00e7ada de 5 persones ( nom => al\u00e7ada ). Posteriorment, recorre el array i mostra-ho en una taula HTML. Finalment afig una \u00faltima fila a la taula amb l'altura mitjana. 236.php : Mitjan\u00e7ant un array bidimensional, emmagatzema el nom, altura i email de 5 persones. Per a aix\u00f2, crea un array de persones, sent cada persona un array associatiu: [ ['nom'=>'Aitor', 'altura'=>182, 'email'=>'aitor@correo.com'],[\u2026],\u2026 ] Posteriorment, recorre el array i mostra-ho en una taula HTML. 237.html i 237.php : a partir d'un formulari amb un camp de quantitat de persones, generar un nou formulari per a llegir el nom, altura i email de quantitat persones. 237.php : A partir de les persones introdu\u00efdes, mostrar les seues dades en una taula, i posteriorment, destacar les dades del m\u00e9s alt i el del m\u00e9s baix. 238.php : Emplena un array bidimensional de 6 files per 9 columnes amb n\u00fameros aleatoris compresos entre 100 i 999 (tots dos inclosos). Tots els n\u00fameros han de ser diferents, \u00e9s a dir, no es pot repetir cap. Mostra a continuaci\u00f3 per pantalla el contingut del array de tal forma que: La columna del m\u00e0xim ha d'apar\u00e9ixer en blau. La fila del m\u00ednim ha d'apar\u00e9ixer en verd La resta de n\u00fameros han d'apar\u00e9ixer en negre.","title":"Arrays"},{"location":"02php.html#funcions_1","text":"functions.php : Crea les seg\u00fcents funcions: Una funci\u00f3 que esbrine si un n\u00famero \u00e9s parell: esParell(int $num): bool Una funci\u00f3 que retorne un array de grand\u00e0ria $tam amb n\u00fameros aleatoris compr\u00e9s entre $min i $max : arrayAleatori(int $tam, int $min, int $max) : array Una funci\u00f3 que reba un $array per refer\u00e8ncia i retorne la quantitat de nombres parells que hi ha emmagatzemats: countParells(array &$array): int functions.php : Crea les seg\u00fcents funcions: Una funci\u00f3 que retorne el major de tots els n\u00fameros rebuts com a par\u00e0metres: function major(): int . No pots usar la funci\u00f3 max() . Una funci\u00f3 que concatene tots els par\u00e0metres rebuts separant-los amb un espai: function concatenar(...$paraules) : string . Utilitza l'operador ... . functions.php : Afig les seg\u00fcents funcions: digits(int $num): int \u2192 retorna la quantitat de d\u00edgits d'un n\u00famero. digitN(int $num, int $post): int \u2192 retorna el d\u00edgit que ocupa, comen\u00e7ant per l'esquerra, la posici\u00f3 $post . llevaDarrere(int $num, int $cant): int \u2192 li lleva per darrere (dreta) $cant d\u00edgits. llevaDavant(int $num, int $cant): int \u2192 li lleva per davant (esquerra) $cant d\u00edgits. Per a provar les funcions, fes \u00fas tant de pas d'arguments posicionals com arguments amb nom. functions.php : Crea una biblioteca amb dues funcions: peseta2euros: passa de pessetes a euros euro2pesetes: passa d'euros a pessetes Cada funci\u00f3 ha de rebre dos par\u00e0metres: La quantitat a transformar La cotitzaci\u00f3, amb un par\u00e0metre per defecte amb el factor de transformaci\u00f3. 243.php : utilitza per construir un formulari que fa\u00e7a la transformaci\u00f3 en ambdos sentits. 244.php : A partir d'una quantitat de productes, llegir el nom i cost de la quantitat de productes indicats (similar a l'exercici 237, per\u00f2 aquesta vegada no fa falta crear el formulari amb la quantitat, es rep mitjan\u00e7ant un par\u00e0metre GET via URL). 244.php : Despr\u00e9s de llegir les dades del tiquet de compra, enumera en una taula els productes, amb el seu preu en euros i pessetes, i finalment, en una \u00faltima fila, totalitzar en totes dues monedes. Simularem un formulari d'acc\u00e9s: 245.php : el formulari d'entrada, que sol\u00b7licita l'usuari i contrasenya. 245.php : rep les dades i comprova si s\u00f3n correctes (els usuaris es guarden en un array associatiu en el fitxer 247password.php ).Utilitza include . 245.php : L'usuari introdu\u00eft \u00e9s correcte 245.php : L'usuari \u00e9s incorrecte. Informar si tots dos estan mal o nom\u00e9s la contrasenya. Tornar a mostrar el formulari d'acc\u00e9s.","title":"Funcions"},{"location":"02php.html#funcions-predefinides_1","text":"Tots els exercicis s'han de realitzar creant noves funcions per a encapsular el codi. A m\u00e9s de la pr\u00f2pia funci\u00f3, l'exercici ha de contindre codi per a poder provar-lo. 250fraseImpares.php : Lee una frase i retorna una nova amb solo els car\u00e0cters de les posicions imparelles. 251vocales.php : A partir d'una frase, retorna la quantitat de cadascuna de les vocals, i el total d'elles. 252analizador.php : A partir d'una frase amb paraules nom\u00e9s separades per espais, retornar Lletres totals i quantitat de paraules Una l\u00ednia per cada paraula indicant la seua grand\u00e0ria no es pot usar str_word_count 252analizadorWC.php : Investiga que fa la funci\u00f3 str_word_count , i torna a fer l'exercici. 253cani.php : EsCrIu UnA fUnCi\u00d3 qUe TrAnSfOrMe UnA cAdEnA eN cAnI. 254palindromo.php : Escriu una funci\u00f3 que retorne un boole\u00e0 indicant si una paraula \u00e9s pal\u00edndroma (es llig igual d'esquerra a dreta que de dreta a esquerra, per exemple, \u201clligar \u00e9s ser agil\u201d). 255codificar.php : Utilitzant les funcions per a treballar amb car\u00e0cters, a partir d'una cadena i un despla\u00e7ament: Si el despla\u00e7ament \u00e9s 1, substitueix l'A per B, la B per C, etc. El despla\u00e7ament no pot ser negatiu Si s'ix de l'abecedari, ha de tornar a comen\u00e7ar Cal respectar els espais, punts i comes. 256filtrado.html : Crea un programa que permeta a l'usuari llegir un conjunt de n\u00fameros separats per espais. 256filtrado.php : El programa filtrar\u00e0 els n\u00fameros llegits per a tornar a mostrar \u00fanicament els nombres parells i indicar\u00e0 la quantitat existent. Dona'm n\u00fameros: 1 4 7 9 23 10 8 Els 3 nombres parells s\u00f3n: 4 10 8 257investiga.php : Investiga les seg\u00fcents funcions de cadena (explica per a qu\u00e8 serveixen mitjan\u00e7ant comentaris, i programa un xicotet exemple de cadascuna d'elles): ucwords , strrev , str_repeat i md5 . Els seg\u00fcents exercicis es basen en la generaci\u00f3 de n\u00fameros aleatoris. 260generador.php : Crea una funci\u00f3 que permet generar una lletra aleat\u00f2ria, maj\u00fascula o min\u00fascula. 261generaContrasenya.php : Crea una funci\u00f3 que a partir d'una grand\u00e0ria, genere una contrasenya aleat\u00f2ria composta de lletres i d\u00edgits de manera aleat\u00f2ria. 262quinielas.php : Crea les seg\u00fcents funcions: quinigol() : array \u2192 Genera un array multidimensional amb 6 resultats aleatoris amb combinacions [012M, 012M] travessa() : array \u2192 Genera un array amb una combinaci\u00f3 de travessa generada de manera aleat\u00f2ria: 14 resultats amb 1X2 i el ple al quinze amb [012M, 012M] taula(array $travessa) : string \u2192 transforma un array d'una quniela en una taula HTML","title":"Funcions predefinides"},{"location":"03phpoo.html","text":"PHP Orientant a Objectes \u00b6 Duraci\u00f3 i criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 18 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 5. Desenvolupa aplicacions Web identificant i aplicant mecanismes per a separar el codi de presentaci\u00f3 de la l\u00f2gica de negoci. a) S'han identificat els avantatges de separar la l\u00f2gica de negoci dels aspectes de presentaci\u00f3 de l'aplicaci\u00f3. b) S'han analitzat tecnologies i mecanismes que permeten realitzar aquesta separaci\u00f3 i les seues caracter\u00edstiques principals. c) S'han utilitzat objectes i controls en el servidor per a generar l'aspecte visual de l'aplicaci\u00f3 Web en el client. d) S\u2019han utilitzat formularis generats de forma din\u00e0mica per a respondre als esdeveniments de l'aplicaci\u00f3 Web. e) S'han identificat i aplicat els par\u00e0metres relatius a la configuraci\u00f3 de l'aplicaci\u00f3 Web. f) S'han escrit aplicacions Web amb manteniment d'estat i separaci\u00f3 de la l\u00f2gica de negoci. g) S'han aplicat els principis de la programaci\u00f3 orientada a objectes. g) S'ha provat i documentat el codi. Classes i Objectes \u00b6 PHP segueix un paradigma de programaci\u00f3 orientada a objectes (POO) basada en classes. Un classe \u00e9s un plantilla que defineix les propietats i m\u00e8todes per a poder crear objectes. D'aquest manera, un objecte \u00e9s una inst\u00e0ncia d'una classe. Tant les propietats com els m\u00e8todes es defineixen amb una visibilitat (qui pot accedir) Privat - private : Nom\u00e9s pot accedir la pr\u00f2pia classe. Protegit - protected : Nom\u00e9s pot accedir la pr\u00f2pia classe o els seus descendents. P\u00fablico - public : Pot accedir qualsevol altra classe. Per a declarar una classe, s'utilitza la paraula clau class seguit del nom de la classe. Per a instanciar un objecte a partir de la classe, s'utilitza new : <?php class NomClase { // propiedades // y m\u00e9todos } $ob = new NomClase (); Classes amb maj\u00fascula Totes les classes comencen per lletra maj\u00fascula. Quan un projecte creix, \u00e9s normal modelar les classes mitjan\u00e7ant UML (recordeu Entorns de Desenvolupament?). La classes es representen mitjan\u00e7ant un quadrat, separant el nom, de les propietats i els m\u00e8todes: Una vegada que hem creat un objecte, s'utilitza l'operador -> per a accedir a una propietat o un m\u00e8tode: $objeto->propiedad; $objeto->m\u00e9todo(par\u00e1metros); Si des de dins de la classe, volem accedir a una propietat o m\u00e8tode de la mateixa classe, utilitzarem la refer\u00e8ncia $this ; $this->propiedad; $this->m\u00e9todo(par\u00e1metros); Aix\u00ed doncs, com a exemple, codificar\u00edem una persona en el fitxer Persona.php com: <?php class Persona { private string $nombre ; public function setNombre ( string $nom ) { $this -> nombre = $nom ; } public function imprimir (){ echo $this -> nombre ; echo '<br>' ; } } $bruno = new Persona (); // creamos un objeto $bruno -> setNombre ( \"Bruno D\u00edaz\" ); $bruno -> imprimir (); Encara que es poden declarar diverses classes en el mateix arxiu, \u00e9s una mala pr\u00e0ctica. Aix\u00ed doncs, cada fitxer contedr\u00e1 una sola classe, i es nomenar\u00e0 amb el nom de la classe. Encapsulaci\u00f3 \u00b6 Les propietats es defineixen privades o protegides (si volem que les classes heretades puguen accedir). Per a cada propietat, s'afigen m\u00e8todes p\u00fablics ( getter/setter ): public setPropiedad(tipo $param) public getPropiedad() : tipo Les constants es defineixen p\u00fabliques perqu\u00e8 siguen accessibles per tots els recursos. <?php class MayorMenor { private int $mayor ; private int $menor ; public function setMayor ( int $may ) { $this -> mayor = $may ; } public function setMenor ( int $men ) { $this -> menor = $men ; } public function getMayor () : int { return $this -> mayor ; } public function getMenor () : int { return $this -> menor ; } } Rebent i enviant objectes \u00b6 \u00c9s recomanable indicar-ho en la mena de par\u00e0metres. Si l'objecte pot retornar nuls es posa ? davant del nom de la classe. Objectes per refer\u00e8ncia Els objectes que s'envien i reben com a par\u00e0metres sempre es passen per refer\u00e8ncia. <?php function maymen ( array $numeros ) : ? MayorMenor { $a = max ( $numeros ); $b = min ( $numeros ); $result = new MayorMenor (); $result -> setMayor ( $a ); $result -> setMenor ( $b ); return $result ; } $resultado = maymen ([ 1 , 76 , 9 , 388 , 41 , 39 , 25 , 97 , 22 ]); echo \"<br>Mayor: \" . $resultado -> getMayor (); echo \"<br>Menor: \" . $resultado -> getMenor (); Constructor \u00b6 El constructor dels objectes es defineix mitjan\u00e7ant el m\u00e8tode m\u00e0gic __construct . Pot o no tindre par\u00e0metres, per\u00f2 nom\u00e9s pot haver-hi un \u00fanic constructor. <?php class Persona { private string $nombre ; public function __construct ( string $nom ) { $this -> nombre = $nom ; } public function imprimir (){ echo $this -> nombre ; echo '<br>' ; } } $bruno = new Persona ( \"Bruno D\u00edaz\" ); $bruno -> imprimir (); Constructors en PHP 8 \u00b6 Una de les grans novetats que ofereix PHP 8 \u00e9s la simplificaci\u00f3 dels constructors amb par\u00e0metres, la qual cosa es coneix com a promoci\u00f3 de les propietats del constructor*. Per a aix\u00f2, en comptes d'haver de declarar les propietats com a privades o protegides, i despr\u00e9s dins del constructor haver d'assignar els par\u00e0metres a est\u00e0s propietats, el propi constructor promociona les propietats. Vegem-ho millor amb un exemple. Imaginem una classe Punt on vulguem emmagatzemar les seues coordenades: <?php class Punto { protected float $x ; protected float $y ; protected float $z ; public function __construct ( float $x = 0.0 , float $y = 0.0 , float $z = 0.0 ) { $this -> x = $x ; $this -> y = $y ; $this -> z = $z ; } } En PHP 8, quedaria de la seg\u00fcent manera (molt m\u00e9s curt, la qual cosa facilita la seua llegibilitat): <?php class Punto { public function __construct ( protected float $x = 0.0 , protected float $y = 0.0 , protected float $z = 0.0 , ) {} } L'ordre importa A l'hora de codificar l'ordre dels elements ha de ser: <?php declare ( strict_types = 1 ); class NombreClase { // propiedades // constructor // getters - setters // resto de m\u00e9todos } ?> Classes est\u00e0tiques \u00b6 S\u00f3n aquelles que tenen propietats i/o m\u00e8todes est\u00e0tics (tamb\u00e9 es coneixen com de classe , perqu\u00e8 el seu valor es comparteix entre totes les inst\u00e0ncies de la mateixa classe). Es declaren amb static i es referencien amb :: . Si volem accedir a un m\u00e8tode est\u00e0tic, s'anteposa el nom de la classe: Producte::nuevoProducto() . Si des d'un m\u00e8tode volem accedir a una propietat est\u00e0tica de la mateixa classe, s'utilitza la refer\u00e8ncia self : self::$numProductos <?php class Producto { const IVA = 0.23 ; private static $numProductos = 0 ; public static function nuevoProducto () { self :: $numProductos ++ ; } } Producto :: nuevoProducto (); $impuesto = Producto :: IVA ; Classes est\u00e0tiques \u00b6 Tamb\u00e9 podem tindre classes normals que tinguen alguna propietat est\u00e0tica: <?php class Producto { const IVA = 0.23 ; private static $numProductos = 0 ; private $codigo ; public function __construct ( string $cod ) { self :: $numProductos ++ ; $this -> codigo = $cod ; } public function mostrarResumen () : string { return \"El producto \" . $this -> codigo . \" es el n\u00famero \" . self :: $numProductos ; } } $prod1 = new Producto ( \"PS5\" ); $prod2 = new Producto ( \"XBOX Series X\" ); $prod3 = new Producto ( \"Nintendo Switch\" ); echo $prod3 -> mostrarResumen (); Introspecci\u00f3 \u00b6 En treballar amb classes i objectes, existeixen un conjunt de funcions ja definides pel llenguatge que permeten obtindre informaci\u00f3 sobre els objectes: instanceof : permet comprovar si un objecte \u00e9s d'una determinada classe get_class : retorna el nom de la classe get_declared_class : retorna un array amb els noms de les classes definides class_\u00e0lies : crea un \u00e0lies class_exists / method_exists / property_exists : true si la classe / m\u00e8tode / propietat est\u00e0 definida get_class_methods / get_class_vars / get_object_vars : Retorna un array amb els noms dels m\u00e8todes / propietats d'una classe / propietats d'un objecte que s\u00f3n accessibles des d'on es fa la crida. Un exemple d'aquestes funcions pot ser el seg\u00fcent: <?php $p = new Producto ( \"PS5\" ); if ( $p instanceof Producto ) { echo \"Es un producto\" ; echo \"La clase es \" . get_class ( $p ); class_alias ( \"Producto\" , \"Articulo\" ); $c = new Articulo ( \"Nintendo Switch\" ); echo \"Un articulo es un \" . get_class ( $c ); print_r ( get_class_methods ( \"Producto\" )); print_r ( get_class_vars ( \"Producto\" )); print_r ( get_object_vars ( $p )); if ( method_exists ( $p , \"mostrarResumen\" )) { $p -> mostrarResumen (); } } Clonat En assignar dos objectes no es copien, es crea una nova refer\u00e8ncia. Si volem una c\u00f2pia, cal clonar-ho mitjan\u00e7ant el m\u00e8tode clone(object) : object Si volem modificar el clonat per defecte, cal definir el m\u00e8tode m\u00e0gic __clone() que es dir\u00e0 despr\u00e9s de copiar totes les propietats. M\u00e9s informaci\u00f3 en https://www.php.net/manual/es/language.oop5.cloning.php Her\u00e8ncia \u00b6 PHP suporta her\u00e8ncia simple, de manera que una classe nom\u00e9s pot heretar d'una altra, no de dues classes alhora. Per a aix\u00f2 s'utilitza la paraula clau extends . Si volem que la classe A hereta de la classe B farem: class A extends B El fill hereta els atributs i m\u00e8todes p\u00fablics i protegits. Cada classe en un arxiu Com ja hem comentat, haur\u00edem de col\u00b7locar cada classe en un arxiu diferent per a posteriorment utilitzar-lo mitjan\u00e7ant include . En els seg\u00fcent exemple els hem col\u00b7locats junt per a facilitar la seua llegibilitat. Per exemple, tenim una classe Producte i una Tv que hereta de Producte : <?php class Producto { public $codigo ; public $nombre ; public $nombreCorto ; public $PVP ; public function mostrarResumen () { echo \"<p>Prod:\" . $this -> codigo . \"</p>\" ; } } class Tv extends Producto { public $pulgadas ; public $tecnologia ; } Podemos utilizar las siguientes funciones para averiguar si hay relaci\u00f3n entre dos clases: get_parent_class(object): string is_subclass_of(object, string): bool <?php $t = new Tv (); $t -> codigo = 33 ; if ( $t instanceof Producto ) { echo $t -> mostrarResumen (); } $padre = get_parent_class ( $t ); echo \"<br>La clase padre es: \" . $padre ; $objetoPadre = new $padre ; echo $objetoPadre -> mostrarResumen (); if ( is_subclass_of ( $t , 'Producto' )) { echo \"<br>Soy un hijo de Producto\" ; } Sobreescriure m\u00e8todes \u00b6 Podem crear m\u00e8todes en els fills amb el mateix nom que el pare, canviant el seu comportament. Per a invocar als m\u00e8todes del pare -> parent::nombreMetodo() <?php class Tv extends Producto { public $pulgadas ; public $tecnologia ; public function mostrarResumen () { parent :: mostrarResumen (); echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } } Constructor en fills \u00b6 En els fills no es crea cap constructor de manera autom\u00e0tica. Pel que si no n'hi ha, s'invoca autom\u00e0ticament al del pare. En canvi, si el definim en el fill, hem d'invocar al del pare de manera expl\u00edcita. PHP7 PHP8 <?php class Producto { public string $codigo ; public function __construct ( string $codigo ) { $this -> codigo = $codigo ; } public function mostrarResumen () { echo \"<p>Prod:\" . $this -> codigo . \"</p>\" ; } } class Tv extends Producto { public $pulgadas ; public $tecnologia ; public function __construct ( string $codigo , int $pulgadas , string $tecnologia ) { parent :: __construct ( $codigo ); $this -> pulgadas = $pulgadas ; $this -> tecnologia = $tecnologia ; } public function mostrarResumen () { parent :: mostrarResumen (); echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } } <?php class Producto { public function __construct ( private string $codigo ) { } public function mostrarResumen () { echo \"<p>Prod:\" . $this -> codigo . \"</p>\" ; } } class Tv extends Producto { public function __construct ( string $codigo , private int $pulgadas , private string $tecnologia ) { parent :: __construct ( $codigo ); } public function mostrarResumen () { parent :: mostrarResumen (); echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } } Classes abstractes \u00b6 Les classes abstractes obliguen a heretar d'una classe, ja que no es permet la seua instanciaci\u00f3n. Es defineix mitjan\u00e7ant abstract class NombreClase { . Una classe abstracta pot contindre propietats i m\u00e8todes no-abstractes, i/o m\u00e8todes abstractes. <?php // Clase abstracta abstract class Producto { private $codigo ; public function getCodigo () : string { return $this -> codigo ; } // M\u00e9todo abstracto abstract public function mostrarResumen (); } Quan una classe hereta d'una classe abstracta, obligat\u00f2riament ha d'implementar els m\u00e8todes que t\u00e9 el pare marcats com a abstractes. <?php class Tv extends Producto { public $pulgadas ; public $tecnologia ; public function mostrarResumen () { //obligado a implementarlo echo \"<p>C\u00f3digo \" . $this -> getCodigo () . \"</p>\" ; echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } } $t = new Tv (); echo $t -> getCodigo (); Classes finals \u00b6 S\u00f3n classes oposades a abstractes, ja que eviten que es puga heretar una classe o m\u00e8tode per a sobreescriure-ho. <?php class Producto { private $codigo ; public function getCodigo () : string { return $this -> codigo ; } final public function mostrarResumen () : string { return \"Producto \" . $this -> codigo ; } } // No podremos heredar de Microondas final class Microondas extends Producto { private $potencia ; public function getPotencia () : int { return $this -> potencia ; } // No podemos implementar mostrarResumen() } Interf\u00edcies \u00b6 Permet definir un contracte amb les signatures dels m\u00e8todes a complir. Aix\u00ed doncs, nom\u00e9s cont\u00e9 declaracions de funcions i totes han de ser p\u00fabliques. Es declaren amb la paraula clau interface i despr\u00e9s les classes que complisquen el contracte el realitzen mitjan\u00e7ant la paraula clau implements . <?php interface Nombreable { // declaraci\u00f3n de funciones } class NombreClase implements NombreInterfaz { // c\u00f3digo de la clase Se permite la herencia de interfaces. Adem\u00e1s, una clase puede implementar varios interfaces (en este caso, s\u00ed soporta la herecia m\u00faltiple, pero s\u00f3lo de interfaces). <?php interface Mostrable { public function mostrarResumen () : string ; } interface MostrableTodo extends Mostrable { public function mostrarTodo () : string ; } interface Facturable { public function generarFactura () : string ; } class Producto implements MostrableTodo , Facturable { // Implementaciones de los m\u00e9todos // Obligatoriamente deber\u00e1 implementar public function mostrarResumen, mostrarTodo y generarFactura } M\u00e8todes encadenats \u00b6 Segueix el plantejament de la programaci\u00f3 funcional, i tamb\u00e9 es coneix com method chaining . Planteja que sobre un objecte es realitzen diverses crides. <?php $p1 = new Libro (); $p1 -> setNombre ( \"Harry Potter\" ); $p1 -> setAutor ( \"JK Rowling\" ); echo $p1 ; // Method chaining $p2 = new Libro (); $p2 -> setNombre ( \"Patria\" ) -> setAutor ( \"Aramburu\" ); echo $p2 ; Per a facilitar-ho, modificarem tots els seus m\u00e8todes mutadores (que modifiquen dades, setters*, ...) perqu\u00e8 retornen una refer\u00e8ncia a $this : <?php class Libro { private string $nombre ; private string $autor ; public function getNombre () : string { return $this -> nombre ; } public function setNombre ( string $nombre ) : Libro { $this -> nombre = $nombre ; return $this ; } public function getAutor () : string { return $this -> autor ; } public function setAutor ( string $autor ) : Libro { $this -> autor = $autor ; return $this ; } public function __toString () : string { return $this -> nombre . \" de \" . $this -> autor ; } } M\u00e8todes m\u00e0gics \u00b6 Totes les classes PHP ofereixen un conjunt de m\u00e8todes, tamb\u00e9 coneguts com magic methods que es poden sobreescriure per a substituir el seu comportament. Alguns d'ells ja els hem utilitzats. Davant qualsevol dubte, \u00e9s convenient consultar la documentaci\u00f3 oficial . Els m\u00e9s destacables s\u00f3n: __construct() __destruct() \u2192 s'invoca en perdre la refer\u00e8ncia. S'utilitza per a tancar una connexi\u00f3 a la BD, tancar un fitxer, ... __toString() \u2192 representaci\u00f3 de l'objecte com a cadena. \u00c9s a dir, quan fem tire $objecte s'executa autom\u00e0ticament aquest m\u00e8tode. __get(propietat) , __set(propietat, valor) \u2192 Permetria accedir a les propietat privades, encara que sempre \u00e9s m\u00e9s llegible/mantenible codificar els getter/setter . __isset(propietat) , __unset(propietat) \u2192 Permet esbrinar o llevar el valor a una propietat. __sleep() , __wakeup() \u2192 S'executen en recuperar ( unserialize^) o emmagatzemar un objecte que se serialitza ( serialize), i s'utilitzen per a permet definir quines propietats se serialitzen. __call() , __callStatic() \u2192 S'executen en cridar a un m\u00e8tode que no \u00e9s p\u00fablic. Permeten sobrecarreguen m\u00e8todes. Espai de noms \u00b6 Des de PHP 5.3 i tamb\u00e9 coneguts com Namespaces , permeten organitzar les classes/interf\u00edcies, funcions i/o constants de manera similar als paquets a Java . Recomanaci\u00f3 Un nom\u00e9s namespace per arxiu i crear una estructura de carpetes respectant els anivelles/subnivells (igual que es fa a Java) Es declaren en la primera l\u00ednia mitjan\u00e7ant la paraula clau namespace seguida del nom de l'espai de noms assignat (cada subnivell se separa amb la barra invertida \\ ): Per exemple, per a col\u00b7locar la classe Producte dins del namespace Dwes\\Exemples ho far\u00edem aix\u00ed: <?php namespace Dwes\\Exemples ; const IVA = 0.21 ; class Producte { public $nombre ; public function muestra () : void { echo \"<p>Prod:\" . $this -> nombre . \"</p>\" ; } } Acc\u00e9s \u00b6 Per a referenciar a un recurs que cont\u00e9 un namespace, primer hem de tindre'l disponible fent \u00fas de include o require . Si el recurs est\u00e0 en el mateix namespace , es realitza un acc\u00e9s directe (es coneix com a acc\u00e9s sense qualificar). Realment hi ha tres tipus d'acc\u00e9s: sense qualificar: recurs qualificat: rutaRelativa\\recurs \u2192 no fa falta posar el namespace complet totalment qualificat: \\rutaAbsoluta\\recurs <?php namespace Dwes\\Ejemplos ; include_once ( \"Producto.php\" ); echo IVA ; // sin cualificar echo Utilidades\\IVA ; // acceso cualificado. Dar\u00eda error, no existe \\Dwes\\Ejemplos\\Utilidades\\IVA echo \\Dwes\\Ejemplos\\IVA ; // totalmente cualificado $p1 = new Producto (); // lo busca en el mismo namespace y encuentra \\Dwes\\Ejemplos\\Producto $p2 = new Model\\Producto (); // dar\u00eda error, no existe el namespace Model. Est\u00e1 buscando \\Dwes\\Ejemplos\\Model\\Producto $p3 = new \\Dwes\\Ejemplos\\Producto (); // \\Dwes\\Ejemplos\\Producto Acc\u00e9s \u00b6 Per a evitar la refer\u00e8ncia qualificada podem declarar l'\u00fas mitjan\u00e7ant use (similar a fer import a Java). Es fa en la cap\u00e7alera, despr\u00e9s del namespace : Els tipus Posibles s\u00f3n: use const nombreCualificadoConstante use function nombreCualificadoFuncion use nombreCualificadoClase use nombreCualificadoClase as NuevoNombre // per a canviar de nom elements Per exemple, si volem utilitzar la classe \\Dwes\\Exemples\\Producte des d'un recurs que es troba en l'arrel, per exemple en inici.php , far\u00edem: <?php include_once ( \"Dwes\\Exemples\\Producte.php\" ); use const Dwes\\Exemples\\IVA ; use \\Dwes\\Exemples\\Producte ; echo IVA ; $p1 = new Producte (); To use or not to use En resum, use permet accedir sense qualificar a recursos que estan en un altre namespace . Si estem en el mateix espai de nom, no necessitem use . Organitzaci\u00f3 \u00b6 Tot projecte, conforme creix, necessita organitzar el seu codi font. Es planteja una organitzaci\u00f3 en la qual els arxius que interactuan amb el navegador es col\u00b7loquen en l'arrel, i les classes que definim van dins d'un namespace (i dins de la seua pr\u00f2pia carpeta src o app ). Organitzaci\u00f3 del codi font Organitzaci\u00f3, includes i usos Col\u00b7locarem cada recurs en un fitxer a part. En la primera l\u00ednia indicarem la seua namespace (si no est\u00e0 en l'arrel). Si utilitzem altres recursos, farem un include_once d'aqueixos recursos (classes, interf\u00edcies, etc...). Cada recurs ha d'incloure tots els altres recursos que referencie: la classe de la qual hereta, interf\u00edcies que implementa, classes utilitzades/rebudes com a par\u00e0metres, etc... Si els recursos estan en un espai de noms diferent al que estem, emprarem use amb la ruta completa per a despr\u00e9s utilitzar refer\u00e8ncies sense qualificar. Autoload \u00b6 No \u00e9s tedi\u00f3s haver de fer el include de les classes? El autolloeu* ve al rescat. Aix\u00ed doncs, permet carregar les classes (no les constants ni les funcions) que s'utilitzaran i evitar haver de fer el include_onze de cadascuna d'elles. Per a aix\u00f2, s'utilitza la funci\u00f3 spl_autolloeu_register <?php spl_autoload_register ( function ( $nombreClase ) { include_once $nombreClase . '.php' ; } ); ?> Per qu\u00e8 es diuen autoload? Perqu\u00e8 abans es realitzava mitjan\u00e7ant el m\u00e8tode m\u00e0gic __autoload() , el qual est\u00e0 deprecated des de PHP 7.2 I com organitzem ara el nostre codi aprofitant el autoload? Organitzaci\u00f3 amb autoload Per a facilitar la cerca dels recursos a incloure, \u00e9s recomanable col\u00b7locar totes les classes dins d'una mateixa carpeta. Nosaltres la col\u00b7locarem dins de app (m\u00e9s endavant, quan estudiem Laravel veurem el motiu d'aquesta decisi\u00f3). Altres carpetes que podem crear s\u00f3n test per a col\u00b7locar les proves PhpUnit que despr\u00e9s realitzarem, o la carpeta vendor on s'emmagatzemaran les llibreries del projecte (aquesta carpeta \u00e9s un est\u00e1ndard dins de PHP, ja que Composer la crea autom\u00e0ticament). Com hem col\u00b7locat tots els nostres recursos dins de app , ara nostre autoload.php (el qual col\u00b7loquem en la carpeta arrel) nom\u00e9s buscar\u00e0 dins d'aqueixa carpeta: <?php spl_autoload_register ( function ( $nombreClase ) { include_once \"app/\" . $nombreClase . '.php' ; } ); ?> autolloeu i rutes err\u00f2nies En Ubuntu en fer el include de la classe que rep com a par\u00e0metre, les barres dels namespace ( \\ ) s\u00f3n diferents a les de les rutes ( / ). Per aix\u00f2, \u00e9s millor que utilitzem el fitxer autoload: <?php spl_autoload_register ( function ( $nombreClase ) { $ruta = \"app \\\\ \" . $nombreClase . '.php' ; $ruta = str_replace ( \" \\\\ \" , \"/\" , $ruta ); // Sustituimos las barras include_once $ruta ' ; } ); ?> Gesti\u00f3 d'Errors \u00b6 PHP classifica els errors que ocorren en diferents nivells. Cada nivell s'identifica amb una constant. Per exemple: E_ERROR : errors fatals, no recuperables. S'interromp el script. E_WARNING : advertiments en temps d'execuci\u00f3. El script no s'interromp. E_NOTICE : avisos en temps d'execuci\u00f3. Podeu comprovar el llistat complet de constants de https://www.php.net/manual/es/errorfunc.constants.php Per a la configuraci\u00f3 dels errors podem fer-ho de dues formes: A nivell de php.ini : error_reporting : indica els nivells d'errors a notificar error_reporting = E_ALL & ~E_NOTICE -> Tots els errors menys els avisos en temps d'execuci\u00f3. display_errors : indica si mostrar o no els errors per pantalla. En entorns de producci\u00f3 \u00e9s comuna posar-ho a off mitjan\u00e7ant codi amb les seg\u00fcents funcions: error_reporting(codigo) -> Controla quins errors notificar set_error_handler(nombreManejador) -> Indica que funci\u00f3 s'invocar\u00e0 cada vegada que es trobe un error. El manejador rep com a par\u00e0metres el nivell de l'error i el missatge A continuaci\u00f3 tenim un exemple mitjan\u00e7ant codi: Funcions per a la gesti\u00f3 d'errors Consola <?php error_reporting ( E_ALL & ~ E_NOTICE & ~ E_WARNING ); $resultado = $dividendo / $divisor ; error_reporting ( E_ALL & ~ E_NOTICE ); set_error_handler ( \"miManejadorErrores\" ); $resultado = $dividendo / $divisor ; restore_error_handler (); // vuelve al anterior function miManejadorErrores ( $nivel , $mensaje ) { switch ( $nivel ) { case E_WARNING : echo \"<strong>Warning</strong>: $mensaje .<br/>\" ; break ; default : echo \"Error de tipo no especificado: $mensaje .<br/>\" ; } } Error de tipo no especificado: Undefined variable: dividendo. Error de tipo no especificado: Undefined variable: divisor. Error de tipo Warning: Division by zero. Excepcions \u00b6 La gesti\u00f3 d'excepcions forma part des de PHP 5. El seu funcionament \u00e9s similar a Java*, fent \u00fas d'un bloc try / catch / finally . Si detectem una situaci\u00f3 an\u00f2mala i volem llan\u00e7ar una excepci\u00f3, haurem de realitzar throw new Exception (adjuntant el missatge que l'ha provocat). <?php try { if ( $divisor == 0 ) { throw new Exception ( \"Divisi\u00f3n por cero.\" ); } $resultado = $dividendo / $divisor ; } catch ( Exception $e ) { echo \"Se ha producido el siguiente error: \" . $e -> getMessage (); } La classe Exception \u00e9s la classe pare de totes les excepcions. El seu constructor rep missatge[,codigoError][,excepcionPrevia] . A partir d'un objecte Exception , podem accedir als m\u00e8todes getMessage() i getCode() per a obtindre el missatge i el codi d'error de l'excepci\u00f3 capturada. El propi llenguatge ofereix un conjunt d'excepcions ja definides, les quals podem capturar (i llan\u00e7ar des de PHP 7). Es recomana la seua consulta en la documentaci\u00f3 oficial . Creant excepcions \u00b6 Per a crear una excepci\u00f3, la forma m\u00e9s curta \u00e9s crear una classe que \u00fanicament herete de Exception . <?php class HolaExcepcion extends Exception {} Si volem, i \u00e9s recomanable depenent dels requisits, podem sobrecarregar els m\u00e8todes m\u00e0gics, per exemple, sobrecarregant el constructor i cridant al constructor del pare, o reescriure el m\u00e8tode __toString per a canviar el seu missatge: <?php class MiExcepcion extends Exception { public function __construct ( $msj , $codigo = 0 , Exception $previa = null ) { // c\u00f3digo propio parent :: __construct ( $msj , $codigo , $previa ); } public function __toString () { return __CLASS__ . \": [ { $this -> code } ]: { $this -> message } \\n \" ; } public function miFuncion () { echo \"Una funci\u00f3n personalizada para este tipo de excepci\u00f3n \\n \" ; } } Si definim una excepci\u00f3 d'aplicaci\u00f3 dins d'un namespace , quan referenciem a Exception , haurem de referenciar-la mitjan\u00e7ant el seu nom totalment qualificat ( \\Exception ), o utilitzant use : Mitjan\u00e7ant nom totalment qualificat Mitjan\u00e7ant use <?php namespace \\Dwes\\Ejemplos ; class AppExcepcion extends \\Exception {} <?php namespace \\Dwes\\Ejemplos ; use Exception ; class AppExcepcion extends Exception {} Excepcions m\u00faltiples \u00b6 Es poden usar excepcions m\u00faltiples per a comprovar diferents condicions. A l'hora de capturar-les, es fa de m\u00e9s espec\u00edfica a m\u00e9s general. <?php $email = \"ejemplo@ejemplo.com\" ; try { // Comprueba si el email es v\u00e1lido if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) === FALSE ) { throw new MiExcepcion ( $email ); } // Comprueba la palabra ejemplo en la direcci\u00f3n email if ( strpos ( $email , \"ejemplo\" ) !== FALSE ) { throw new Exception ( \" $email es un email de ejemplo no v\u00e1lido\" ); } } catch ( MiExcepcion $e ) { echo $e -> miFuncion (); } catch ( Exception $e ) { echo $e -> getMessage (); } Autoevaluaci\u00f3n \u00bfQu\u00e9 pasar\u00eda al ejectuar el siguiente c\u00f3digo? <?php class MainException extends Exception {} class SubException extends MainException {} try { throw new SubException ( \"Lanzada SubException\" ); } catch ( MainException $e ) { echo \"Capturada MainException \" . $e -> getMessage (); } catch ( SubException $e ) { echo \"Capturada SubException \" . $e -> getMessage (); } catch ( Exception $e ) { echo \"Capturada Exception \" . $e -> getMessage (); } Si en el mateix catch volem capturar diverses excepcions, hem d'utilitzar l'operador | : <?php class MainException extends Exception {} class SubException extends MainException {} try { throw new SubException ( \"Lanzada SubException\" ); } catch ( MainException | SubException $e ) { echo \"Capturada Exception \" . $e -> getMessage (); } Des de PHP 7, existeix el tipus Throwable , el qual \u00e9s una interf\u00edcie que implementen tant els errors com les excepcions, i ens permet capturar els dos tipus alhora: <?php try { // tu codigo } catch ( Throwable $e ) { echo 'Forma de capturar errores y excepciones a la vez' ; } Si nom\u00e9s volem capturar els errors fatals, podem fer \u00fas de la classe Error : <?php try { // Genera una notificaci\u00f3n que no se captura echo $variableNoAsignada ; // Error fatal que se captura funcionQueNoExiste (); } catch ( Error $e ) { echo \"Error capturado: \" . $e -> getMessage (); } Rellan\u00e7ar excepcions \u00b6 En les aplicacions reals, \u00e9s molt comuna capturar una excepci\u00f3 de sistema i llan\u00e7ar una d'aplicaci\u00f3 que hem definit nostros. Tamb\u00e9 podem llan\u00e7ar les excepcions sense necessitat d'estar dins d'un try/catch . <?php class AppException extends Exception {} try { // C\u00f3digo de negocio que falla } catch ( Exception $e ) { throw new AppException ( \"AppException: \" . $e -> getMessage (), $e -> getCode (), $e ); } SPL \u00b6 Standard PHP Library \u00e9s el conjunt de funcions i utilitats que ofereix PHP, com: Estructures de dades Pila, cua, cua de prioritat, llista doblement enlla\u00e7ada, etc... Conjunt de iteradores dissenyats per a rec\u00f3rrer estructures agregades arrays, resultats de bases de dades, arbres XML, llistats de directoris, etc. Podeu consultar la documentaci\u00f3 en https://www.php.net/manual/es/book.spl.php o veure alguns exemples en https://diego.com.es/tutorial-de-la-libreria-spl-de-php Tamb\u00e9 defineix un conjunt d'excepcions que podem utilitzar perqu\u00e8 les llancen les nostres aplicacions: LogicException ( extends Exception ) BadFunctionCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException RuntimeException ( extends Exception ) OutOfBoundsException OverflowException RangeException UnderflowException UnexpectedValueException Tamb\u00e9 podeu consultar la documentaci\u00f3 d'aquestes excepcions en https://www.php.net/manual/es/spl.exceptions.php . Refer\u00e8ncies \u00b6 Manual de PHP Manual de OO en PHP - www.desarrolloweb.com Activitats \u00b6 Investiga la difer\u00e8ncia entre un paradigma orientat a objectes basat en classes ( PHP ) respecte a un basat en prototips (JavaScript). Objetos \u00b6 301Empleado.php : Crea una classe Emprat amb el seu nom, cognoms i sou. Encapsula les propietats mitjan\u00e7ant getters/setters i afig m\u00e8todes per a: Obtindre el seu nom complet \u2192 getNombreCompleto(): string Que retorne un boole\u00e0 indicant si deu o no pagar impostos (es paguen quan el sou \u00e9s superior a 3333\u20ac) \u2192 debePagarImpuestos(): bool 302EmpleadoTelefonos.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Afig una propietat privada que emmagatzeme un array de nombres de tel\u00e8fons. Afig els seg\u00fcents m\u00e8todes: public function anyadirTelefono(int $telefono) : void \u2192 Afig un tel\u00e8fon al array public function listarTelefonos(): string \u2192 Mostra els tel\u00e8fons separats per comes public function vaciarTelefonos(): void \u2192 Elimina tots els tel\u00e8fons 303EmpleadoConstructor.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Elimina els setters* de nom i cognoms , de manera que aquestes dades s'assignen mitjan\u00e7ant el constructor (utilitza la sintaxi de PHP7). Si el constructor rep un tercer par\u00e0metre, ser\u00e0 el sou del Empleat . Si no, se li assignar\u00e0 1000\u20ac com a sou inicial. 303EmpleadoConstructor8.php : Modifica la classe i utilitza la sintaxi de PHP 8 de promoci\u00f3 de les propietats del constructor. 304EmpleadoConstante.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Afig una constant SOU_TOPALL amb el valor del sou que ha de pagar impostos, i modifica el codi per a utilitzar la constant. 305EmpleadoSueldo.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Canvia la constant per una variable est\u00e0tica sueldoTope , de manera que mitjan\u00e7ant getter/setter pugues modificar el seu valor.306. 306EmpleadoStatic.php : Copia la clase del ejercicio anterior y modif\u00edcala. Completa el seg\u00fcent m\u00e8tode amb una cadena HTML que mostre les dades d'un empleat dins d'un par\u00e0graf i tots els tel\u00e8fons mitjan\u00e7ant una llista ordenada (per a aix\u00f2, haur\u00e0s de crear un getter per als tel\u00e8fons): public static function toHtml(Empleado $emp): string Ejercicio 307 307Persona.php : C\u00f2pia la classe de l'exercici anterior en 307Empleado.php i modifica-la. Crea una classe Persona que siga pare de Empleat , de manera que Persona continga el nom i els cognoms, i en Empleat quede el salari i els tel\u00e8fons. 308PersonaH.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Crea en Persona el m\u00e8tode est\u00e0tic toHtml(Persona $p) , i modifica en Empleat el mateix m\u00e8tode toHtml(Persona $p) , per\u00f2 canvia la signatura perqu\u00e8 reba una Persona com a par\u00e0metre. Per a accedir a les propietats de l'empleat amb la persona que rebem com a par\u00e0metre, comprovarem el seu tipus: <?php class Empleado extends Persona { /// resto del c\u00f3digo public static function toHtml ( Persona $p ) : string { if ( $p instanceof Empleado ) { // Aqui ya podemos acceder a las propiedades y m\u00e9todos de Empleado } } } 309PersonaE.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Afig en Persona un atribut edat A l'hora de saber si un empleat ha de pagar impostos, el far\u00e0 sempre que tinga m\u00e9s de 21 anys i depenga del valor del seu sou. Modifica tot el codi necessari per a mostrar i/o editar l'edat quan siga necessari. 310PersonaS.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Afig nous m\u00e8todes que facen una representaci\u00f3 de totes les propietats de les classes Persona i Empleat , de manera similar als realitzats en HTML, per\u00f2 sense que siguen est\u00e0tics, de manera que obtinga les dades mitjan\u00e7ant $this . function public __toString(): string Magic methods El m\u00e8tode __toString() \u00e9s un m\u00e8tode m\u00e0gic que s'invoca autom\u00e0ticament quan volem obtindre la representaci\u00f3 en cadena d'un objecte. 311PersonaA.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Transforma Persona a una classe abstracta on el seu m\u00e8tode est\u00e0tic toHtml(Persona $p) haja de ser redefinit en tots els seus fills. 312Trabajador.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Canvia l'estructura de classes conforme al gr\u00e0fic respectant tots els m\u00e8todes que ja estan fets. Treballador \u00e9s una classe abstracta que ara emmagatzema els telefonos i on calcularSueldo \u00e9s un m\u00e8tode abstracte de manera que: El sou d'un Empleat es calcula a partir de les hores treballades i el que cobra per hora. Per als Gerent s, el seu sou s'incrementa percentualment sobre la base de la seua edat: salari + salariedat/100 Ejercicio 312 313Empresa.php : Utilitzant les classes dels exercicis anteriors: Crea una classe Empresa que a m\u00e9s del nom i la direcci\u00f3, continga una propietat amb un array de Treballador \u00e9s, ja siguen Emprat s o Gerent s. Afig getters/setters per al nom i direcci\u00f3. Afig m\u00e8todes per a afegir i llistar els treballadors. public function anyadirTrabajador(Treballador $t) public function listarTrabajadoresHtml() : string -> utilitza Treballador::toHtml(Persona $p) Afig un m\u00e8tode per a obtindre el cost total en n\u00f2mines. public function getCosteNominas(): float -> recorre els treballadors i invoca al m\u00e8tode calcularSueldo() . 314EmpresaI.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Crea una interf\u00edcie JSerializable, de manera que oferisca els m\u00e8todes: toJSON(): string \u2192 utilitza la funci\u00f3 json_encode(mixed) . Tingues en compte que com tenim les propietats dels objectes privats, has de rec\u00f3rrer les propietats i col\u00b7locar-les en un mapa. Per exemple: php <?php public function toJSON(): string { foreach ($this as $clave => $valor) { $mapa->$clave = $valor; } return json_encode($mapa); } ?> toSerialize(): string \u2192 utilizta la funci\u00f3 serialize(mixed) Modifica totes les classes que no s\u00f3n abstractes perqu\u00e8 implementen la interf\u00edcie creada. Projecte Videoclub \u00b6 En els seg\u00fcents exercicis simularem un xicotet projecte d'un Videoclub (basat en la proposta que fa el tutorial de desarrolloweb.com), el qual realitzarem mitjan\u00e7ant un desenvolupament incremental i seguint la pr\u00e0ctica de programaci\u00f3 en parelles ( pair programming ). Abans de res, crea un repositori privat en GitHub i puja el projecte actual de Videoclub*. Una vegada creat, convida al teu company al repositori com a col\u00b7laborador. Inicialitza en local el teu repostorio de git, mitjan\u00e7ant git init Afig i puja els canvis al teu repositori, mitjan\u00e7ant git add . i despr\u00e9s git commit -m 'Inicialitzant projecte'. Connecta el teu repositori amb GitHub i puja els canvis (mira la instruccions de GitHub: comandos git remalnom i git push ). El teu company haur\u00e0 de descarregar el projecte amb les seues credencials. Projecte no real El seg\u00fcent projecte est\u00e0 pensat des d'un punt de vista formatiu. Algunes de les decisions que es prenen no s'han d'usar (com fer tire dins de les classes) o provar el codi comparant el resultat en el navegador. Cada classe ha d'anar en un arxiu php separat. Per a facilitar la seua implementaci\u00f3, es mostra l'estructura UML del model i un fragment de codi per a provar les classes: Creamos el Soporte Crea una classe per a emmagatzemar suports ( Soporte.php ). Aquesta classe ser\u00e0 la classe pare dels diferents suports amb els quals treballe el nostre videoclub (cintes de v\u00eddeo, videojocs, etc...): Crea el constructor que inicialitze les seues propietats. Fixa't que la classe no t\u00e9 m\u00e8todes setters*. Definir una constant mitjan\u00e7ant un propietat privada i est\u00e0tica denominada `IVA amb un valor del 21% Crear un arxiu ( inici.php ) per a usar les classes i c\u00f2pia el seg\u00fcent fragment: C\u00f3digo de prueba Navegador <?php include \"Soporte.php\" ; $soporte1 = new Soporte ( \"Tenet\" , 22 , 3 ); echo \"<strong>\" . $soporte1 -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $soporte1 -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $soporte1 -> getPrecioConIVA () . \" euros\" ; $soporte1 -> muestraResumen (); Tenet Precio: 3 euros Precio IVA incluido: 3.48 euros Tenet 3 \u20ac (IVA no incluido) Afegim Cinta de Video Crea la classe CintaVideo la qual hereta de Soporte . Afig l'atribut duracion i sobreescriu tant el contructor com el m\u00e8tode MuestraResumen (des de CintaVideo haur\u00e0s de cridar al m\u00e8tode MuestraResumen del pare). Afig a inici.php el codi per a provar la classe: C\u00f3digo de prueba Navegador <?php include \"CintaVideo.php\" ; $miCinta = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); echo \"<strong>\" . $miCinta -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $miCinta -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $miCinta -> getPrecioConIva () . \" euros\" ; $miCinta -> muestraResumen (); Los cazafantasmas Precio: 3.5 euros Precio IVA incluido: 4.06 euros Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos Afegim Dvd Crea la classe Dvd la qual hereta de Soporte . Afig els atributs idiomas i formatoPantalla . A continuaci\u00f3 sobreescriu tant el contructor com el m\u00e8tode MuestraResumen . Afig a inici.php el codi per a provar la classe: C\u00f3digo de prueba Navegador <?php include \"Dvd.php\" ; $miDvd = new Dvd ( \"Origen\" , 24 , 15 , \"es,en,fr\" , \"16:9\" ); echo \"<strong>\" . $miDvd -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $miDvd -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $miDvd -> getPrecioConIva () . \" euros\" ; $miDvd -> muestraResumen (); Origen Precio: 15 euros Precio IVA incluido: 17.4 euros Pel\u00edcula en DVD: Origen 15 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 Afegim Juego Crea la classe Juego la qual hereta de Soporte . Afig els atributs consola , minNumJugadores i maxNumJugadores . A continuaci\u00f3 afig el m\u00e8tode muestraJugadoresPosibles , el qual ha de mostrar Per a un jugador , Per a X Jugadores o De X a I Jugadores depenent dels valors de les atributs creats. Finalment, sobreescriu tant el contructor com el m\u00e8tode MuestraResumen . Afig a inici.php el codi per a provar la classe: C\u00f3digo de prueba Navegador <?php include \"Juego.php\" ; $miJuego = new Juego ( \"The Last of Us Part II\" , 26 , 49.99 , \"PS4\" , 1 , 1 ); echo \"<strong>\" . $miJuego -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $miJuego -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $miJuego -> getPrecioConIva () . \" euros\" ; $miJuego -> muestraResumen (); The Last of Us Part II Precio: 49.99 euros Precio IVA incluido: 57.9884 euros Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador Arribats a aquest punt, el nostre model \u00e9s similar al seg\u00fcent diagrama: Model inicial de Videoclub Afegim Cliente Crear la classe Cliente . El constructor rebr\u00e0 el nom , numere i maxLloguerConcurrent , aquest \u00faltim podent ser opcional i prenent com a valor per defecte 3. Despr\u00e9s d'aix\u00f2, afig getter/setter \u00fanicament a numere , i un getter a numSoportsalquilados (aquest camp emmagatzemar\u00e0 un comptador del total de lloguers que ha realitzat). El array de suports alquilados contedr\u00e1 classes que hereten de Soporte . Finalment, afig el m\u00e8tode MuestraResumen que mostre el nom i la quantitat de lloguers (grand\u00e0ria del array soportsalquilados ). Dins de Cliente , afig les seg\u00fcent operacions: tieneAlquilado(Soporte $s): bool \u2192 Recorre el array de suports i comprova si est\u00e0 el suport alquilar(Soporte $s): bool -\u2192 Ha de comprovar si el suport est\u00e0 alquilado i si no ha superat el contingent de lloguers. En llogar, incrementar\u00e0 el numSoportsalquilados i emmagatzemar\u00e0 el suport en el array. Per a cada cas ha de mostrar un missatge informant de l'ocorregut. Seguim amb Cliente per a afegir les operacions: retornar(int $numSoporte): bool \u2192 Ha de comprovar que el suport estava llogat i actualitzar la quantitat de suports llogats. Per a cada cas ha de mostrar un missatge informant de l'ocorregut llistarLloguers(): void \u2192 Informa de quants lloguers t\u00e9 el client i els mostra. Crea l'arxiu inicio2.php amb el seg\u00fcent codi font per a provar la classe: Codi de prova Navegador <?php include_once \"CintaVideo.php\" ; include_once \"Dvd.php\" ; include_once \"Juego.php\" ; include_once \"Cliente.php\" ; //instanciamos un par de objetos Clientee $cliente1 = new Cliente ( \"Bruce Wayne\" , 23 ); $cliente2 = new Cliente ( \"Clark Kent\" , 33 ); //mostramos el n\u00famero de cada cliente creado echo \"<br>El identificador del cliente 1 es: \" . $cliente1 -> getNumero (); echo \"<br>El identificador del cliente 2 es: \" . $cliente2 -> getNumero (); //instancio algunos soportes $soporte1 = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $soporte2 = new Juego ( \"The Last of Us Part II\" , 26 , 49.99 , \"PS4\" , 1 , 1 ); $soporte3 = new Dvd ( \"Origen\" , 24 , 15 , \"es,en,fr\" , \"16:9\" ); $soporte4 = new Dvd ( \"El Imperio Contraataca\" , 4 , 3 , \"es,en\" , \"16:9\" ); //alquilo algunos soportes $cliente1 -> alquilar ( $soporte1 ); $cliente1 -> alquilar ( $soporte2 ); $cliente1 -> alquilar ( $soporte3 ); //voy a intentar alquilar de nuevo un soporte que ya tiene alquilado $cliente1 -> alquilar ( $soporte1 ); //el cliente tiene 3 soportes en alquiler como m\u00e1ximo //este soporte no lo va a poder alquilar $cliente1 -> alquilar ( $soporte4 ); //este soporte no lo tiene alquilado $cliente1 -> tornar ( 4 ); //devuelvo un soporte que s\u00ed que tiene alquilado $cliente1 -> tornar ( 2 ); //alquilo otro soporte $cliente1 -> Alquilar ( $soporte4 ); //listo los elementos alquilados $cliente1 -> llistaLloguers (); //este cliente no tiene alquileres $cliente2 -> tornar ( 2 ); El identificador del cliente 1 es: 23 El identificador del cliente 2 es: 33 Alquilado soporte a : Bruce Wayne Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos Alquilado soporte a : Bruce Wayne Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador Alquilado soporte a : Bruce Wayne Pel\u00edcula en DVD: Origen 15 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 El cliente ya tiene alquilado el soporte Los cazafantasmas Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo No se ha podido encontrar el soporte en los alquileres de este cliente No se ha podido encontrar el soporte en los alquileres de este cliente Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo El cliente tiene 3 soportes alquilados Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador Pel\u00edcula en DVD: Origen 15 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 Este cliente no tiene alquilado ning\u00fan elemento Arribat a aquest punt, relacionarem els clients i els suports mitjan\u00e7ant la classe Videoclub . Aix\u00ed doncs crea la classe que representa el gr\u00e0fic, tenint en compte que: productes \u00e9s un array de Soporte socis \u00e9s una array de Cliente Els m\u00e8todes p\u00fablics d'incloure algun suport, crearan la classe i cridaran al m\u00e8tode privat de incluirProducto , el qual \u00e9s l'encarregat d'introduir-lo dins del array. El model complet quedar\u00e0 de la seg\u00fcent manera: Model complet de Videoclub I per a provar el projecte, dins inicio3.php col\u00b7locarem: Codi de prova Navegador <?php include_once \"Videoclub.php\" ; // No incluimos nada m\u00e1s $vc = new Videoclub ( \"Severo 8A\" ); //voy a incluir unos cuantos soportes de prueba $vc -> incluirJuego ( \"God of War\" , 19.99 , \"PS4\" , 1 , 1 ); $vc -> incluirJuego ( \"The Last of Us Part II\" , 49.99 , \"PS4\" , 1 , 1 ); $vc -> incluirDvd ( \"Torrente\" , 4.5 , \"es\" , \"16:9\" ); $vc -> incluirDvd ( \"Origen\" , 4.5 , \"es,en,fr\" , \"16:9\" ); $vc -> incluirDvd ( \"El Imperio Contraataca\" , 3 , \"es,en\" , \"16:9\" ); $vc -> incluirCintaVideo ( \"Los cazafantasmas\" , 3.5 , 107 ); $vc -> incluirCintaVideo ( \"El nombre de la Rosa\" , 1.5 , 140 ); //listo los productos $vc -> listarProductos (); //voy a crear algunos socios $vc -> incluirSocio ( \"Amancio Ortega\" ); $vc -> incluirSocio ( \"Pablo Picasso\" , 2 ); $vc -> alquilaSocioProducto ( 1 , 2 ); $vc -> alquilaSocioProducto ( 1 , 3 ); //alquilo otra vez el soporte 2 al socio 1. // no debe dejarme porque ya lo tiene alquilado $vc -> alquilaSocioProducto ( 1 , 2 ); //alquilo el soporte 6 al socio 1. //no se puede porque el socio 1 tiene 2 alquileres como m\u00e1ximo $vc -> alquilaSocioProducto ( 1 , 6 ); //listo los socios $vc -> listarSocios (); Incluido soporte 0 Incluido soporte 1 Incluido soporte 2 Incluido soporte 3 Incluido soporte 4 Incluido soporte 5 Incluido soporte 6 Listado de los 7 productos disponibles: 1.- Juego para: PS4 God of War 19.99 \u20ac (IVA no incluido) Para un jugador 2.- Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador 3.- Pel\u00edcula en DVD: Torrente 4.5 \u20ac (IVA no incluido) Idiomas:es Formato Pantalla:16:9 4.- Pel\u00edcula en DVD: Origen 4.5 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 5.- Pel\u00edcula en DVD: El Imperio Contraataca 3 \u20ac (IVA no incluido) Idiomas:es,en Formato Pantalla:16:9 6.- Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos 7.- Pel\u00edcula en VHS: El nombre de la Rosa 1.5 \u20ac (IVA no incluido) Duraci\u00f3n: 140 minutos Incluido socio 0 Incluido socio 1 Alquilado soporte a : Pablo Picasso Pel\u00edcula en DVD: Torrente 4.5 \u20ac (IVA no incluido) Idiomas:es Formato Pantalla:16:9 Alquilado soporte a : Pablo Picasso Pel\u00edcula en DVD: Origen 4.5 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 El cliente ya tiene alquilado el soporte Torrente Este cliente tiene 2 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo Listado de 2 socios del videoclub: 1.- Cliente 0 : Amancio Ortega Alquileres actuales: 0 2.- Cliente 1 : Pablo Picasso Alquileres actuales: 2 Transforma Soporte a una classe abstracta i comprova que tot continua funcionant. Qu\u00e8 aconseguim en fer-la abstracta? Crea una interf\u00edcie Resumible , de manera que les classes que l'implementen han d'oferir el m\u00e8tode muestraResumen() . Modifica la classe Soporte i feix que implemente la interf\u00edcie. Fa falta que tamb\u00e9 l'implementen els fills? Projecte Videoclub 2.0 \u00b6 Antes de comenzar con la segunda parte del videoclub, crea una etiqueta mediante git tag con el nombre v0.329 y sube los cambios a GitHub. Modifica els operacions de llogar, tant en Client com en Videoclub , per a donar suport a l'encadenament de m\u00e8todes. Posteriorment, modifica el codi de prova per a utilitzar aquesta t\u00e8cnica. Fent \u00fas de namespaces : Col\u00b7boja totes els classes/interf\u00edcies en Dwes\\ProyectoVideoclub Cada classe ha de fer include_once dels recursos que empra Col\u00b7boja el/els arxivaments de prova en l'arrel (sense espai de noms) Dones de l'arxiu de proves, utilitza use per a poder realitzar accessos sense qualificar Etiqueta els canvis com v0.331 . Reorganitza els carpeta tal com hem vist en els anotacions: app , test i vendor . Crea un fitxer autolloeu.php per a registrar la ruta on trobar els classes Modifica tot el codi necessari, incloent autolloeu.php on seguisca necessari i esborrant els includes previs. A continuaci\u00f3 crearem un conjunt d'excepcions d'aplicaci\u00f3. Aquestes excepcions s\u00f3n simples, no necessiten sobreescriure cap m\u00e8tode. Aix\u00ed doncs, crea l'excepci\u00f3 d'aplicaci\u00f3 VideoclubException en el namespace Dwes\\ProyectoVideoclub\\Util . Posteriorment crea els seg\u00fcents fills (han d'heretar de VideoclubException ), cadascun en el seu propi arxiu: * SoporteYaAlquiladoException CupoSuperadoException SoporteNoEncontradoException ClienteNoEncontradoException En Cliente , modifica els m\u00e8todes alquilar i retornar , perqu\u00e8 facen \u00fas de les noves excepcions (llan\u00e7ant-les quan siga necessari) i funcionen com a m\u00e8todes encadenats. Destacar que aquests m\u00e8todes, no es capturar est\u00e0s excepcions, nom\u00e9s es llancen. En Videoclub , modifica alquilarSocioPelicula per a capturar totes les excepcions que ara llan\u00e7a Cliente i informar l'usuari en conseq\u00fc\u00e8ncia. Modificarem el projecte perqu\u00e8 el videoclub s\u00e0pia quins productes estan o no llogats: En Soporte , crea una propietat p\u00fablica el nom de la qual siga alquilado que inicialment estar\u00e0 a false . Quan es llogue, es posar\u00e0 a true . En retornar, la tornarem a posar a false . En Videoclub , crea dues noves propietats i les seues getters: * numProductosAlquilados * numTotalAlquileres Crea un nou m\u00e8tode en Videoclub anomenat alquilarSocioProductos(int numSocio, array numerosProductos) , el qual ha de rebre un array amb els productes a llogar. Abans de llogar-los, ha de comprovar que tots els suports estiguen disponibles, de manera que si un no ho est\u00e0, no se li llogue cap. Crea dos nous m\u00e8todes en Videoclub , i mitjan\u00e7ant la definici\u00f3, dedueix qu\u00e8 han de realitzar: devolverSocioProducto(int numSocio, int numeroProducto) devolverSocioProductos(int numSocio, array numerosProductos) Han de suportar l'encadenament de m\u00e8todes. Recorda actualitzar la propietat alquilado dels diferents suports. Quan hages realitzat tots els exercicis, crea una etiqueta mitjan\u00e7ant git tag amb el nom v0.337 i puja els canvis a GitHub.","title":"3.- PHP Orientat a Objectes"},{"location":"03phpoo.html#php-orientant-a-objectes","text":"Duraci\u00f3 i criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 18 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 5. Desenvolupa aplicacions Web identificant i aplicant mecanismes per a separar el codi de presentaci\u00f3 de la l\u00f2gica de negoci. a) S'han identificat els avantatges de separar la l\u00f2gica de negoci dels aspectes de presentaci\u00f3 de l'aplicaci\u00f3. b) S'han analitzat tecnologies i mecanismes que permeten realitzar aquesta separaci\u00f3 i les seues caracter\u00edstiques principals. c) S'han utilitzat objectes i controls en el servidor per a generar l'aspecte visual de l'aplicaci\u00f3 Web en el client. d) S\u2019han utilitzat formularis generats de forma din\u00e0mica per a respondre als esdeveniments de l'aplicaci\u00f3 Web. e) S'han identificat i aplicat els par\u00e0metres relatius a la configuraci\u00f3 de l'aplicaci\u00f3 Web. f) S'han escrit aplicacions Web amb manteniment d'estat i separaci\u00f3 de la l\u00f2gica de negoci. g) S'han aplicat els principis de la programaci\u00f3 orientada a objectes. g) S'ha provat i documentat el codi.","title":"PHP Orientant a Objectes"},{"location":"03phpoo.html#classes-i-objectes","text":"PHP segueix un paradigma de programaci\u00f3 orientada a objectes (POO) basada en classes. Un classe \u00e9s un plantilla que defineix les propietats i m\u00e8todes per a poder crear objectes. D'aquest manera, un objecte \u00e9s una inst\u00e0ncia d'una classe. Tant les propietats com els m\u00e8todes es defineixen amb una visibilitat (qui pot accedir) Privat - private : Nom\u00e9s pot accedir la pr\u00f2pia classe. Protegit - protected : Nom\u00e9s pot accedir la pr\u00f2pia classe o els seus descendents. P\u00fablico - public : Pot accedir qualsevol altra classe. Per a declarar una classe, s'utilitza la paraula clau class seguit del nom de la classe. Per a instanciar un objecte a partir de la classe, s'utilitza new : <?php class NomClase { // propiedades // y m\u00e9todos } $ob = new NomClase (); Classes amb maj\u00fascula Totes les classes comencen per lletra maj\u00fascula. Quan un projecte creix, \u00e9s normal modelar les classes mitjan\u00e7ant UML (recordeu Entorns de Desenvolupament?). La classes es representen mitjan\u00e7ant un quadrat, separant el nom, de les propietats i els m\u00e8todes: Una vegada que hem creat un objecte, s'utilitza l'operador -> per a accedir a una propietat o un m\u00e8tode: $objeto->propiedad; $objeto->m\u00e9todo(par\u00e1metros); Si des de dins de la classe, volem accedir a una propietat o m\u00e8tode de la mateixa classe, utilitzarem la refer\u00e8ncia $this ; $this->propiedad; $this->m\u00e9todo(par\u00e1metros); Aix\u00ed doncs, com a exemple, codificar\u00edem una persona en el fitxer Persona.php com: <?php class Persona { private string $nombre ; public function setNombre ( string $nom ) { $this -> nombre = $nom ; } public function imprimir (){ echo $this -> nombre ; echo '<br>' ; } } $bruno = new Persona (); // creamos un objeto $bruno -> setNombre ( \"Bruno D\u00edaz\" ); $bruno -> imprimir (); Encara que es poden declarar diverses classes en el mateix arxiu, \u00e9s una mala pr\u00e0ctica. Aix\u00ed doncs, cada fitxer contedr\u00e1 una sola classe, i es nomenar\u00e0 amb el nom de la classe.","title":"Classes i Objectes"},{"location":"03phpoo.html#encapsulacio","text":"Les propietats es defineixen privades o protegides (si volem que les classes heretades puguen accedir). Per a cada propietat, s'afigen m\u00e8todes p\u00fablics ( getter/setter ): public setPropiedad(tipo $param) public getPropiedad() : tipo Les constants es defineixen p\u00fabliques perqu\u00e8 siguen accessibles per tots els recursos. <?php class MayorMenor { private int $mayor ; private int $menor ; public function setMayor ( int $may ) { $this -> mayor = $may ; } public function setMenor ( int $men ) { $this -> menor = $men ; } public function getMayor () : int { return $this -> mayor ; } public function getMenor () : int { return $this -> menor ; } }","title":"Encapsulaci\u00f3"},{"location":"03phpoo.html#rebent-i-enviant-objectes","text":"\u00c9s recomanable indicar-ho en la mena de par\u00e0metres. Si l'objecte pot retornar nuls es posa ? davant del nom de la classe. Objectes per refer\u00e8ncia Els objectes que s'envien i reben com a par\u00e0metres sempre es passen per refer\u00e8ncia. <?php function maymen ( array $numeros ) : ? MayorMenor { $a = max ( $numeros ); $b = min ( $numeros ); $result = new MayorMenor (); $result -> setMayor ( $a ); $result -> setMenor ( $b ); return $result ; } $resultado = maymen ([ 1 , 76 , 9 , 388 , 41 , 39 , 25 , 97 , 22 ]); echo \"<br>Mayor: \" . $resultado -> getMayor (); echo \"<br>Menor: \" . $resultado -> getMenor ();","title":"Rebent i enviant objectes"},{"location":"03phpoo.html#constructor","text":"El constructor dels objectes es defineix mitjan\u00e7ant el m\u00e8tode m\u00e0gic __construct . Pot o no tindre par\u00e0metres, per\u00f2 nom\u00e9s pot haver-hi un \u00fanic constructor. <?php class Persona { private string $nombre ; public function __construct ( string $nom ) { $this -> nombre = $nom ; } public function imprimir (){ echo $this -> nombre ; echo '<br>' ; } } $bruno = new Persona ( \"Bruno D\u00edaz\" ); $bruno -> imprimir ();","title":"Constructor"},{"location":"03phpoo.html#constructors-en-php-8","text":"Una de les grans novetats que ofereix PHP 8 \u00e9s la simplificaci\u00f3 dels constructors amb par\u00e0metres, la qual cosa es coneix com a promoci\u00f3 de les propietats del constructor*. Per a aix\u00f2, en comptes d'haver de declarar les propietats com a privades o protegides, i despr\u00e9s dins del constructor haver d'assignar els par\u00e0metres a est\u00e0s propietats, el propi constructor promociona les propietats. Vegem-ho millor amb un exemple. Imaginem una classe Punt on vulguem emmagatzemar les seues coordenades: <?php class Punto { protected float $x ; protected float $y ; protected float $z ; public function __construct ( float $x = 0.0 , float $y = 0.0 , float $z = 0.0 ) { $this -> x = $x ; $this -> y = $y ; $this -> z = $z ; } } En PHP 8, quedaria de la seg\u00fcent manera (molt m\u00e9s curt, la qual cosa facilita la seua llegibilitat): <?php class Punto { public function __construct ( protected float $x = 0.0 , protected float $y = 0.0 , protected float $z = 0.0 , ) {} } L'ordre importa A l'hora de codificar l'ordre dels elements ha de ser: <?php declare ( strict_types = 1 ); class NombreClase { // propiedades // constructor // getters - setters // resto de m\u00e9todos } ?>","title":"Constructors en PHP 8"},{"location":"03phpoo.html#classes-estatiques","text":"S\u00f3n aquelles que tenen propietats i/o m\u00e8todes est\u00e0tics (tamb\u00e9 es coneixen com de classe , perqu\u00e8 el seu valor es comparteix entre totes les inst\u00e0ncies de la mateixa classe). Es declaren amb static i es referencien amb :: . Si volem accedir a un m\u00e8tode est\u00e0tic, s'anteposa el nom de la classe: Producte::nuevoProducto() . Si des d'un m\u00e8tode volem accedir a una propietat est\u00e0tica de la mateixa classe, s'utilitza la refer\u00e8ncia self : self::$numProductos <?php class Producto { const IVA = 0.23 ; private static $numProductos = 0 ; public static function nuevoProducto () { self :: $numProductos ++ ; } } Producto :: nuevoProducto (); $impuesto = Producto :: IVA ;","title":"Classes est\u00e0tiques"},{"location":"03phpoo.html#classes-estatiques_1","text":"Tamb\u00e9 podem tindre classes normals que tinguen alguna propietat est\u00e0tica: <?php class Producto { const IVA = 0.23 ; private static $numProductos = 0 ; private $codigo ; public function __construct ( string $cod ) { self :: $numProductos ++ ; $this -> codigo = $cod ; } public function mostrarResumen () : string { return \"El producto \" . $this -> codigo . \" es el n\u00famero \" . self :: $numProductos ; } } $prod1 = new Producto ( \"PS5\" ); $prod2 = new Producto ( \"XBOX Series X\" ); $prod3 = new Producto ( \"Nintendo Switch\" ); echo $prod3 -> mostrarResumen ();","title":"Classes est\u00e0tiques"},{"location":"03phpoo.html#introspeccio","text":"En treballar amb classes i objectes, existeixen un conjunt de funcions ja definides pel llenguatge que permeten obtindre informaci\u00f3 sobre els objectes: instanceof : permet comprovar si un objecte \u00e9s d'una determinada classe get_class : retorna el nom de la classe get_declared_class : retorna un array amb els noms de les classes definides class_\u00e0lies : crea un \u00e0lies class_exists / method_exists / property_exists : true si la classe / m\u00e8tode / propietat est\u00e0 definida get_class_methods / get_class_vars / get_object_vars : Retorna un array amb els noms dels m\u00e8todes / propietats d'una classe / propietats d'un objecte que s\u00f3n accessibles des d'on es fa la crida. Un exemple d'aquestes funcions pot ser el seg\u00fcent: <?php $p = new Producto ( \"PS5\" ); if ( $p instanceof Producto ) { echo \"Es un producto\" ; echo \"La clase es \" . get_class ( $p ); class_alias ( \"Producto\" , \"Articulo\" ); $c = new Articulo ( \"Nintendo Switch\" ); echo \"Un articulo es un \" . get_class ( $c ); print_r ( get_class_methods ( \"Producto\" )); print_r ( get_class_vars ( \"Producto\" )); print_r ( get_object_vars ( $p )); if ( method_exists ( $p , \"mostrarResumen\" )) { $p -> mostrarResumen (); } } Clonat En assignar dos objectes no es copien, es crea una nova refer\u00e8ncia. Si volem una c\u00f2pia, cal clonar-ho mitjan\u00e7ant el m\u00e8tode clone(object) : object Si volem modificar el clonat per defecte, cal definir el m\u00e8tode m\u00e0gic __clone() que es dir\u00e0 despr\u00e9s de copiar totes les propietats. M\u00e9s informaci\u00f3 en https://www.php.net/manual/es/language.oop5.cloning.php","title":"Introspecci\u00f3"},{"location":"03phpoo.html#herencia","text":"PHP suporta her\u00e8ncia simple, de manera que una classe nom\u00e9s pot heretar d'una altra, no de dues classes alhora. Per a aix\u00f2 s'utilitza la paraula clau extends . Si volem que la classe A hereta de la classe B farem: class A extends B El fill hereta els atributs i m\u00e8todes p\u00fablics i protegits. Cada classe en un arxiu Com ja hem comentat, haur\u00edem de col\u00b7locar cada classe en un arxiu diferent per a posteriorment utilitzar-lo mitjan\u00e7ant include . En els seg\u00fcent exemple els hem col\u00b7locats junt per a facilitar la seua llegibilitat. Per exemple, tenim una classe Producte i una Tv que hereta de Producte : <?php class Producto { public $codigo ; public $nombre ; public $nombreCorto ; public $PVP ; public function mostrarResumen () { echo \"<p>Prod:\" . $this -> codigo . \"</p>\" ; } } class Tv extends Producto { public $pulgadas ; public $tecnologia ; } Podemos utilizar las siguientes funciones para averiguar si hay relaci\u00f3n entre dos clases: get_parent_class(object): string is_subclass_of(object, string): bool <?php $t = new Tv (); $t -> codigo = 33 ; if ( $t instanceof Producto ) { echo $t -> mostrarResumen (); } $padre = get_parent_class ( $t ); echo \"<br>La clase padre es: \" . $padre ; $objetoPadre = new $padre ; echo $objetoPadre -> mostrarResumen (); if ( is_subclass_of ( $t , 'Producto' )) { echo \"<br>Soy un hijo de Producto\" ; }","title":"Her\u00e8ncia"},{"location":"03phpoo.html#sobreescriure-metodes","text":"Podem crear m\u00e8todes en els fills amb el mateix nom que el pare, canviant el seu comportament. Per a invocar als m\u00e8todes del pare -> parent::nombreMetodo() <?php class Tv extends Producto { public $pulgadas ; public $tecnologia ; public function mostrarResumen () { parent :: mostrarResumen (); echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } }","title":"Sobreescriure m\u00e8todes"},{"location":"03phpoo.html#constructor-en-fills","text":"En els fills no es crea cap constructor de manera autom\u00e0tica. Pel que si no n'hi ha, s'invoca autom\u00e0ticament al del pare. En canvi, si el definim en el fill, hem d'invocar al del pare de manera expl\u00edcita. PHP7 PHP8 <?php class Producto { public string $codigo ; public function __construct ( string $codigo ) { $this -> codigo = $codigo ; } public function mostrarResumen () { echo \"<p>Prod:\" . $this -> codigo . \"</p>\" ; } } class Tv extends Producto { public $pulgadas ; public $tecnologia ; public function __construct ( string $codigo , int $pulgadas , string $tecnologia ) { parent :: __construct ( $codigo ); $this -> pulgadas = $pulgadas ; $this -> tecnologia = $tecnologia ; } public function mostrarResumen () { parent :: mostrarResumen (); echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } } <?php class Producto { public function __construct ( private string $codigo ) { } public function mostrarResumen () { echo \"<p>Prod:\" . $this -> codigo . \"</p>\" ; } } class Tv extends Producto { public function __construct ( string $codigo , private int $pulgadas , private string $tecnologia ) { parent :: __construct ( $codigo ); } public function mostrarResumen () { parent :: mostrarResumen (); echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } }","title":"Constructor en fills"},{"location":"03phpoo.html#classes-abstractes","text":"Les classes abstractes obliguen a heretar d'una classe, ja que no es permet la seua instanciaci\u00f3n. Es defineix mitjan\u00e7ant abstract class NombreClase { . Una classe abstracta pot contindre propietats i m\u00e8todes no-abstractes, i/o m\u00e8todes abstractes. <?php // Clase abstracta abstract class Producto { private $codigo ; public function getCodigo () : string { return $this -> codigo ; } // M\u00e9todo abstracto abstract public function mostrarResumen (); } Quan una classe hereta d'una classe abstracta, obligat\u00f2riament ha d'implementar els m\u00e8todes que t\u00e9 el pare marcats com a abstractes. <?php class Tv extends Producto { public $pulgadas ; public $tecnologia ; public function mostrarResumen () { //obligado a implementarlo echo \"<p>C\u00f3digo \" . $this -> getCodigo () . \"</p>\" ; echo \"<p>TV \" . $this -> tecnologia . \" de \" . $this -> pulgadas . \"</p>\" ; } } $t = new Tv (); echo $t -> getCodigo ();","title":"Classes abstractes"},{"location":"03phpoo.html#classes-finals","text":"S\u00f3n classes oposades a abstractes, ja que eviten que es puga heretar una classe o m\u00e8tode per a sobreescriure-ho. <?php class Producto { private $codigo ; public function getCodigo () : string { return $this -> codigo ; } final public function mostrarResumen () : string { return \"Producto \" . $this -> codigo ; } } // No podremos heredar de Microondas final class Microondas extends Producto { private $potencia ; public function getPotencia () : int { return $this -> potencia ; } // No podemos implementar mostrarResumen() }","title":"Classes finals"},{"location":"03phpoo.html#interficies","text":"Permet definir un contracte amb les signatures dels m\u00e8todes a complir. Aix\u00ed doncs, nom\u00e9s cont\u00e9 declaracions de funcions i totes han de ser p\u00fabliques. Es declaren amb la paraula clau interface i despr\u00e9s les classes que complisquen el contracte el realitzen mitjan\u00e7ant la paraula clau implements . <?php interface Nombreable { // declaraci\u00f3n de funciones } class NombreClase implements NombreInterfaz { // c\u00f3digo de la clase Se permite la herencia de interfaces. Adem\u00e1s, una clase puede implementar varios interfaces (en este caso, s\u00ed soporta la herecia m\u00faltiple, pero s\u00f3lo de interfaces). <?php interface Mostrable { public function mostrarResumen () : string ; } interface MostrableTodo extends Mostrable { public function mostrarTodo () : string ; } interface Facturable { public function generarFactura () : string ; } class Producto implements MostrableTodo , Facturable { // Implementaciones de los m\u00e9todos // Obligatoriamente deber\u00e1 implementar public function mostrarResumen, mostrarTodo y generarFactura }","title":"Interf\u00edcies"},{"location":"03phpoo.html#metodes-encadenats","text":"Segueix el plantejament de la programaci\u00f3 funcional, i tamb\u00e9 es coneix com method chaining . Planteja que sobre un objecte es realitzen diverses crides. <?php $p1 = new Libro (); $p1 -> setNombre ( \"Harry Potter\" ); $p1 -> setAutor ( \"JK Rowling\" ); echo $p1 ; // Method chaining $p2 = new Libro (); $p2 -> setNombre ( \"Patria\" ) -> setAutor ( \"Aramburu\" ); echo $p2 ; Per a facilitar-ho, modificarem tots els seus m\u00e8todes mutadores (que modifiquen dades, setters*, ...) perqu\u00e8 retornen una refer\u00e8ncia a $this : <?php class Libro { private string $nombre ; private string $autor ; public function getNombre () : string { return $this -> nombre ; } public function setNombre ( string $nombre ) : Libro { $this -> nombre = $nombre ; return $this ; } public function getAutor () : string { return $this -> autor ; } public function setAutor ( string $autor ) : Libro { $this -> autor = $autor ; return $this ; } public function __toString () : string { return $this -> nombre . \" de \" . $this -> autor ; } }","title":"M\u00e8todes encadenats"},{"location":"03phpoo.html#metodes-magics","text":"Totes les classes PHP ofereixen un conjunt de m\u00e8todes, tamb\u00e9 coneguts com magic methods que es poden sobreescriure per a substituir el seu comportament. Alguns d'ells ja els hem utilitzats. Davant qualsevol dubte, \u00e9s convenient consultar la documentaci\u00f3 oficial . Els m\u00e9s destacables s\u00f3n: __construct() __destruct() \u2192 s'invoca en perdre la refer\u00e8ncia. S'utilitza per a tancar una connexi\u00f3 a la BD, tancar un fitxer, ... __toString() \u2192 representaci\u00f3 de l'objecte com a cadena. \u00c9s a dir, quan fem tire $objecte s'executa autom\u00e0ticament aquest m\u00e8tode. __get(propietat) , __set(propietat, valor) \u2192 Permetria accedir a les propietat privades, encara que sempre \u00e9s m\u00e9s llegible/mantenible codificar els getter/setter . __isset(propietat) , __unset(propietat) \u2192 Permet esbrinar o llevar el valor a una propietat. __sleep() , __wakeup() \u2192 S'executen en recuperar ( unserialize^) o emmagatzemar un objecte que se serialitza ( serialize), i s'utilitzen per a permet definir quines propietats se serialitzen. __call() , __callStatic() \u2192 S'executen en cridar a un m\u00e8tode que no \u00e9s p\u00fablic. Permeten sobrecarreguen m\u00e8todes.","title":"M\u00e8todes m\u00e0gics"},{"location":"03phpoo.html#espai-de-noms","text":"Des de PHP 5.3 i tamb\u00e9 coneguts com Namespaces , permeten organitzar les classes/interf\u00edcies, funcions i/o constants de manera similar als paquets a Java . Recomanaci\u00f3 Un nom\u00e9s namespace per arxiu i crear una estructura de carpetes respectant els anivelles/subnivells (igual que es fa a Java) Es declaren en la primera l\u00ednia mitjan\u00e7ant la paraula clau namespace seguida del nom de l'espai de noms assignat (cada subnivell se separa amb la barra invertida \\ ): Per exemple, per a col\u00b7locar la classe Producte dins del namespace Dwes\\Exemples ho far\u00edem aix\u00ed: <?php namespace Dwes\\Exemples ; const IVA = 0.21 ; class Producte { public $nombre ; public function muestra () : void { echo \"<p>Prod:\" . $this -> nombre . \"</p>\" ; } }","title":"Espai de noms"},{"location":"03phpoo.html#acces","text":"Per a referenciar a un recurs que cont\u00e9 un namespace, primer hem de tindre'l disponible fent \u00fas de include o require . Si el recurs est\u00e0 en el mateix namespace , es realitza un acc\u00e9s directe (es coneix com a acc\u00e9s sense qualificar). Realment hi ha tres tipus d'acc\u00e9s: sense qualificar: recurs qualificat: rutaRelativa\\recurs \u2192 no fa falta posar el namespace complet totalment qualificat: \\rutaAbsoluta\\recurs <?php namespace Dwes\\Ejemplos ; include_once ( \"Producto.php\" ); echo IVA ; // sin cualificar echo Utilidades\\IVA ; // acceso cualificado. Dar\u00eda error, no existe \\Dwes\\Ejemplos\\Utilidades\\IVA echo \\Dwes\\Ejemplos\\IVA ; // totalmente cualificado $p1 = new Producto (); // lo busca en el mismo namespace y encuentra \\Dwes\\Ejemplos\\Producto $p2 = new Model\\Producto (); // dar\u00eda error, no existe el namespace Model. Est\u00e1 buscando \\Dwes\\Ejemplos\\Model\\Producto $p3 = new \\Dwes\\Ejemplos\\Producto (); // \\Dwes\\Ejemplos\\Producto","title":"Acc\u00e9s"},{"location":"03phpoo.html#acces_1","text":"Per a evitar la refer\u00e8ncia qualificada podem declarar l'\u00fas mitjan\u00e7ant use (similar a fer import a Java). Es fa en la cap\u00e7alera, despr\u00e9s del namespace : Els tipus Posibles s\u00f3n: use const nombreCualificadoConstante use function nombreCualificadoFuncion use nombreCualificadoClase use nombreCualificadoClase as NuevoNombre // per a canviar de nom elements Per exemple, si volem utilitzar la classe \\Dwes\\Exemples\\Producte des d'un recurs que es troba en l'arrel, per exemple en inici.php , far\u00edem: <?php include_once ( \"Dwes\\Exemples\\Producte.php\" ); use const Dwes\\Exemples\\IVA ; use \\Dwes\\Exemples\\Producte ; echo IVA ; $p1 = new Producte (); To use or not to use En resum, use permet accedir sense qualificar a recursos que estan en un altre namespace . Si estem en el mateix espai de nom, no necessitem use .","title":"Acc\u00e9s"},{"location":"03phpoo.html#organitzacio","text":"Tot projecte, conforme creix, necessita organitzar el seu codi font. Es planteja una organitzaci\u00f3 en la qual els arxius que interactuan amb el navegador es col\u00b7loquen en l'arrel, i les classes que definim van dins d'un namespace (i dins de la seua pr\u00f2pia carpeta src o app ). Organitzaci\u00f3 del codi font Organitzaci\u00f3, includes i usos Col\u00b7locarem cada recurs en un fitxer a part. En la primera l\u00ednia indicarem la seua namespace (si no est\u00e0 en l'arrel). Si utilitzem altres recursos, farem un include_once d'aqueixos recursos (classes, interf\u00edcies, etc...). Cada recurs ha d'incloure tots els altres recursos que referencie: la classe de la qual hereta, interf\u00edcies que implementa, classes utilitzades/rebudes com a par\u00e0metres, etc... Si els recursos estan en un espai de noms diferent al que estem, emprarem use amb la ruta completa per a despr\u00e9s utilitzar refer\u00e8ncies sense qualificar.","title":"Organitzaci\u00f3"},{"location":"03phpoo.html#autoload","text":"No \u00e9s tedi\u00f3s haver de fer el include de les classes? El autolloeu* ve al rescat. Aix\u00ed doncs, permet carregar les classes (no les constants ni les funcions) que s'utilitzaran i evitar haver de fer el include_onze de cadascuna d'elles. Per a aix\u00f2, s'utilitza la funci\u00f3 spl_autolloeu_register <?php spl_autoload_register ( function ( $nombreClase ) { include_once $nombreClase . '.php' ; } ); ?> Per qu\u00e8 es diuen autoload? Perqu\u00e8 abans es realitzava mitjan\u00e7ant el m\u00e8tode m\u00e0gic __autoload() , el qual est\u00e0 deprecated des de PHP 7.2 I com organitzem ara el nostre codi aprofitant el autoload? Organitzaci\u00f3 amb autoload Per a facilitar la cerca dels recursos a incloure, \u00e9s recomanable col\u00b7locar totes les classes dins d'una mateixa carpeta. Nosaltres la col\u00b7locarem dins de app (m\u00e9s endavant, quan estudiem Laravel veurem el motiu d'aquesta decisi\u00f3). Altres carpetes que podem crear s\u00f3n test per a col\u00b7locar les proves PhpUnit que despr\u00e9s realitzarem, o la carpeta vendor on s'emmagatzemaran les llibreries del projecte (aquesta carpeta \u00e9s un est\u00e1ndard dins de PHP, ja que Composer la crea autom\u00e0ticament). Com hem col\u00b7locat tots els nostres recursos dins de app , ara nostre autoload.php (el qual col\u00b7loquem en la carpeta arrel) nom\u00e9s buscar\u00e0 dins d'aqueixa carpeta: <?php spl_autoload_register ( function ( $nombreClase ) { include_once \"app/\" . $nombreClase . '.php' ; } ); ?> autolloeu i rutes err\u00f2nies En Ubuntu en fer el include de la classe que rep com a par\u00e0metre, les barres dels namespace ( \\ ) s\u00f3n diferents a les de les rutes ( / ). Per aix\u00f2, \u00e9s millor que utilitzem el fitxer autoload: <?php spl_autoload_register ( function ( $nombreClase ) { $ruta = \"app \\\\ \" . $nombreClase . '.php' ; $ruta = str_replace ( \" \\\\ \" , \"/\" , $ruta ); // Sustituimos las barras include_once $ruta ' ; } ); ?>","title":"Autoload"},{"location":"03phpoo.html#gestio-derrors","text":"PHP classifica els errors que ocorren en diferents nivells. Cada nivell s'identifica amb una constant. Per exemple: E_ERROR : errors fatals, no recuperables. S'interromp el script. E_WARNING : advertiments en temps d'execuci\u00f3. El script no s'interromp. E_NOTICE : avisos en temps d'execuci\u00f3. Podeu comprovar el llistat complet de constants de https://www.php.net/manual/es/errorfunc.constants.php Per a la configuraci\u00f3 dels errors podem fer-ho de dues formes: A nivell de php.ini : error_reporting : indica els nivells d'errors a notificar error_reporting = E_ALL & ~E_NOTICE -> Tots els errors menys els avisos en temps d'execuci\u00f3. display_errors : indica si mostrar o no els errors per pantalla. En entorns de producci\u00f3 \u00e9s comuna posar-ho a off mitjan\u00e7ant codi amb les seg\u00fcents funcions: error_reporting(codigo) -> Controla quins errors notificar set_error_handler(nombreManejador) -> Indica que funci\u00f3 s'invocar\u00e0 cada vegada que es trobe un error. El manejador rep com a par\u00e0metres el nivell de l'error i el missatge A continuaci\u00f3 tenim un exemple mitjan\u00e7ant codi: Funcions per a la gesti\u00f3 d'errors Consola <?php error_reporting ( E_ALL & ~ E_NOTICE & ~ E_WARNING ); $resultado = $dividendo / $divisor ; error_reporting ( E_ALL & ~ E_NOTICE ); set_error_handler ( \"miManejadorErrores\" ); $resultado = $dividendo / $divisor ; restore_error_handler (); // vuelve al anterior function miManejadorErrores ( $nivel , $mensaje ) { switch ( $nivel ) { case E_WARNING : echo \"<strong>Warning</strong>: $mensaje .<br/>\" ; break ; default : echo \"Error de tipo no especificado: $mensaje .<br/>\" ; } } Error de tipo no especificado: Undefined variable: dividendo. Error de tipo no especificado: Undefined variable: divisor. Error de tipo Warning: Division by zero.","title":"Gesti\u00f3 d'Errors"},{"location":"03phpoo.html#excepcions","text":"La gesti\u00f3 d'excepcions forma part des de PHP 5. El seu funcionament \u00e9s similar a Java*, fent \u00fas d'un bloc try / catch / finally . Si detectem una situaci\u00f3 an\u00f2mala i volem llan\u00e7ar una excepci\u00f3, haurem de realitzar throw new Exception (adjuntant el missatge que l'ha provocat). <?php try { if ( $divisor == 0 ) { throw new Exception ( \"Divisi\u00f3n por cero.\" ); } $resultado = $dividendo / $divisor ; } catch ( Exception $e ) { echo \"Se ha producido el siguiente error: \" . $e -> getMessage (); } La classe Exception \u00e9s la classe pare de totes les excepcions. El seu constructor rep missatge[,codigoError][,excepcionPrevia] . A partir d'un objecte Exception , podem accedir als m\u00e8todes getMessage() i getCode() per a obtindre el missatge i el codi d'error de l'excepci\u00f3 capturada. El propi llenguatge ofereix un conjunt d'excepcions ja definides, les quals podem capturar (i llan\u00e7ar des de PHP 7). Es recomana la seua consulta en la documentaci\u00f3 oficial .","title":"Excepcions"},{"location":"03phpoo.html#creant-excepcions","text":"Per a crear una excepci\u00f3, la forma m\u00e9s curta \u00e9s crear una classe que \u00fanicament herete de Exception . <?php class HolaExcepcion extends Exception {} Si volem, i \u00e9s recomanable depenent dels requisits, podem sobrecarregar els m\u00e8todes m\u00e0gics, per exemple, sobrecarregant el constructor i cridant al constructor del pare, o reescriure el m\u00e8tode __toString per a canviar el seu missatge: <?php class MiExcepcion extends Exception { public function __construct ( $msj , $codigo = 0 , Exception $previa = null ) { // c\u00f3digo propio parent :: __construct ( $msj , $codigo , $previa ); } public function __toString () { return __CLASS__ . \": [ { $this -> code } ]: { $this -> message } \\n \" ; } public function miFuncion () { echo \"Una funci\u00f3n personalizada para este tipo de excepci\u00f3n \\n \" ; } } Si definim una excepci\u00f3 d'aplicaci\u00f3 dins d'un namespace , quan referenciem a Exception , haurem de referenciar-la mitjan\u00e7ant el seu nom totalment qualificat ( \\Exception ), o utilitzant use : Mitjan\u00e7ant nom totalment qualificat Mitjan\u00e7ant use <?php namespace \\Dwes\\Ejemplos ; class AppExcepcion extends \\Exception {} <?php namespace \\Dwes\\Ejemplos ; use Exception ; class AppExcepcion extends Exception {}","title":"Creant excepcions"},{"location":"03phpoo.html#excepcions-multiples","text":"Es poden usar excepcions m\u00faltiples per a comprovar diferents condicions. A l'hora de capturar-les, es fa de m\u00e9s espec\u00edfica a m\u00e9s general. <?php $email = \"ejemplo@ejemplo.com\" ; try { // Comprueba si el email es v\u00e1lido if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) === FALSE ) { throw new MiExcepcion ( $email ); } // Comprueba la palabra ejemplo en la direcci\u00f3n email if ( strpos ( $email , \"ejemplo\" ) !== FALSE ) { throw new Exception ( \" $email es un email de ejemplo no v\u00e1lido\" ); } } catch ( MiExcepcion $e ) { echo $e -> miFuncion (); } catch ( Exception $e ) { echo $e -> getMessage (); } Autoevaluaci\u00f3n \u00bfQu\u00e9 pasar\u00eda al ejectuar el siguiente c\u00f3digo? <?php class MainException extends Exception {} class SubException extends MainException {} try { throw new SubException ( \"Lanzada SubException\" ); } catch ( MainException $e ) { echo \"Capturada MainException \" . $e -> getMessage (); } catch ( SubException $e ) { echo \"Capturada SubException \" . $e -> getMessage (); } catch ( Exception $e ) { echo \"Capturada Exception \" . $e -> getMessage (); } Si en el mateix catch volem capturar diverses excepcions, hem d'utilitzar l'operador | : <?php class MainException extends Exception {} class SubException extends MainException {} try { throw new SubException ( \"Lanzada SubException\" ); } catch ( MainException | SubException $e ) { echo \"Capturada Exception \" . $e -> getMessage (); } Des de PHP 7, existeix el tipus Throwable , el qual \u00e9s una interf\u00edcie que implementen tant els errors com les excepcions, i ens permet capturar els dos tipus alhora: <?php try { // tu codigo } catch ( Throwable $e ) { echo 'Forma de capturar errores y excepciones a la vez' ; } Si nom\u00e9s volem capturar els errors fatals, podem fer \u00fas de la classe Error : <?php try { // Genera una notificaci\u00f3n que no se captura echo $variableNoAsignada ; // Error fatal que se captura funcionQueNoExiste (); } catch ( Error $e ) { echo \"Error capturado: \" . $e -> getMessage (); }","title":"Excepcions m\u00faltiples"},{"location":"03phpoo.html#rellancar-excepcions","text":"En les aplicacions reals, \u00e9s molt comuna capturar una excepci\u00f3 de sistema i llan\u00e7ar una d'aplicaci\u00f3 que hem definit nostros. Tamb\u00e9 podem llan\u00e7ar les excepcions sense necessitat d'estar dins d'un try/catch . <?php class AppException extends Exception {} try { // C\u00f3digo de negocio que falla } catch ( Exception $e ) { throw new AppException ( \"AppException: \" . $e -> getMessage (), $e -> getCode (), $e ); }","title":"Rellan\u00e7ar excepcions"},{"location":"03phpoo.html#spl","text":"Standard PHP Library \u00e9s el conjunt de funcions i utilitats que ofereix PHP, com: Estructures de dades Pila, cua, cua de prioritat, llista doblement enlla\u00e7ada, etc... Conjunt de iteradores dissenyats per a rec\u00f3rrer estructures agregades arrays, resultats de bases de dades, arbres XML, llistats de directoris, etc. Podeu consultar la documentaci\u00f3 en https://www.php.net/manual/es/book.spl.php o veure alguns exemples en https://diego.com.es/tutorial-de-la-libreria-spl-de-php Tamb\u00e9 defineix un conjunt d'excepcions que podem utilitzar perqu\u00e8 les llancen les nostres aplicacions: LogicException ( extends Exception ) BadFunctionCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException RuntimeException ( extends Exception ) OutOfBoundsException OverflowException RangeException UnderflowException UnexpectedValueException Tamb\u00e9 podeu consultar la documentaci\u00f3 d'aquestes excepcions en https://www.php.net/manual/es/spl.exceptions.php .","title":"SPL"},{"location":"03phpoo.html#referencies","text":"Manual de PHP Manual de OO en PHP - www.desarrolloweb.com","title":"Refer\u00e8ncies"},{"location":"03phpoo.html#activitats","text":"Investiga la difer\u00e8ncia entre un paradigma orientat a objectes basat en classes ( PHP ) respecte a un basat en prototips (JavaScript).","title":"Activitats"},{"location":"03phpoo.html#objetos","text":"301Empleado.php : Crea una classe Emprat amb el seu nom, cognoms i sou. Encapsula les propietats mitjan\u00e7ant getters/setters i afig m\u00e8todes per a: Obtindre el seu nom complet \u2192 getNombreCompleto(): string Que retorne un boole\u00e0 indicant si deu o no pagar impostos (es paguen quan el sou \u00e9s superior a 3333\u20ac) \u2192 debePagarImpuestos(): bool 302EmpleadoTelefonos.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Afig una propietat privada que emmagatzeme un array de nombres de tel\u00e8fons. Afig els seg\u00fcents m\u00e8todes: public function anyadirTelefono(int $telefono) : void \u2192 Afig un tel\u00e8fon al array public function listarTelefonos(): string \u2192 Mostra els tel\u00e8fons separats per comes public function vaciarTelefonos(): void \u2192 Elimina tots els tel\u00e8fons 303EmpleadoConstructor.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Elimina els setters* de nom i cognoms , de manera que aquestes dades s'assignen mitjan\u00e7ant el constructor (utilitza la sintaxi de PHP7). Si el constructor rep un tercer par\u00e0metre, ser\u00e0 el sou del Empleat . Si no, se li assignar\u00e0 1000\u20ac com a sou inicial. 303EmpleadoConstructor8.php : Modifica la classe i utilitza la sintaxi de PHP 8 de promoci\u00f3 de les propietats del constructor. 304EmpleadoConstante.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Afig una constant SOU_TOPALL amb el valor del sou que ha de pagar impostos, i modifica el codi per a utilitzar la constant. 305EmpleadoSueldo.php : C\u00f2pia la classe de l'exercici anterior i modifica-la. Canvia la constant per una variable est\u00e0tica sueldoTope , de manera que mitjan\u00e7ant getter/setter pugues modificar el seu valor.306. 306EmpleadoStatic.php : Copia la clase del ejercicio anterior y modif\u00edcala. Completa el seg\u00fcent m\u00e8tode amb una cadena HTML que mostre les dades d'un empleat dins d'un par\u00e0graf i tots els tel\u00e8fons mitjan\u00e7ant una llista ordenada (per a aix\u00f2, haur\u00e0s de crear un getter per als tel\u00e8fons): public static function toHtml(Empleado $emp): string Ejercicio 307 307Persona.php : C\u00f2pia la classe de l'exercici anterior en 307Empleado.php i modifica-la. Crea una classe Persona que siga pare de Empleat , de manera que Persona continga el nom i els cognoms, i en Empleat quede el salari i els tel\u00e8fons. 308PersonaH.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Crea en Persona el m\u00e8tode est\u00e0tic toHtml(Persona $p) , i modifica en Empleat el mateix m\u00e8tode toHtml(Persona $p) , per\u00f2 canvia la signatura perqu\u00e8 reba una Persona com a par\u00e0metre. Per a accedir a les propietats de l'empleat amb la persona que rebem com a par\u00e0metre, comprovarem el seu tipus: <?php class Empleado extends Persona { /// resto del c\u00f3digo public static function toHtml ( Persona $p ) : string { if ( $p instanceof Empleado ) { // Aqui ya podemos acceder a las propiedades y m\u00e9todos de Empleado } } } 309PersonaE.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Afig en Persona un atribut edat A l'hora de saber si un empleat ha de pagar impostos, el far\u00e0 sempre que tinga m\u00e9s de 21 anys i depenga del valor del seu sou. Modifica tot el codi necessari per a mostrar i/o editar l'edat quan siga necessari. 310PersonaS.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Afig nous m\u00e8todes que facen una representaci\u00f3 de totes les propietats de les classes Persona i Empleat , de manera similar als realitzats en HTML, per\u00f2 sense que siguen est\u00e0tics, de manera que obtinga les dades mitjan\u00e7ant $this . function public __toString(): string Magic methods El m\u00e8tode __toString() \u00e9s un m\u00e8tode m\u00e0gic que s'invoca autom\u00e0ticament quan volem obtindre la representaci\u00f3 en cadena d'un objecte. 311PersonaA.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Transforma Persona a una classe abstracta on el seu m\u00e8tode est\u00e0tic toHtml(Persona $p) haja de ser redefinit en tots els seus fills. 312Trabajador.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Canvia l'estructura de classes conforme al gr\u00e0fic respectant tots els m\u00e8todes que ja estan fets. Treballador \u00e9s una classe abstracta que ara emmagatzema els telefonos i on calcularSueldo \u00e9s un m\u00e8tode abstracte de manera que: El sou d'un Empleat es calcula a partir de les hores treballades i el que cobra per hora. Per als Gerent s, el seu sou s'incrementa percentualment sobre la base de la seua edat: salari + salariedat/100 Ejercicio 312 313Empresa.php : Utilitzant les classes dels exercicis anteriors: Crea una classe Empresa que a m\u00e9s del nom i la direcci\u00f3, continga una propietat amb un array de Treballador \u00e9s, ja siguen Emprat s o Gerent s. Afig getters/setters per al nom i direcci\u00f3. Afig m\u00e8todes per a afegir i llistar els treballadors. public function anyadirTrabajador(Treballador $t) public function listarTrabajadoresHtml() : string -> utilitza Treballador::toHtml(Persona $p) Afig un m\u00e8tode per a obtindre el cost total en n\u00f2mines. public function getCosteNominas(): float -> recorre els treballadors i invoca al m\u00e8tode calcularSueldo() . 314EmpresaI.php : C\u00f2pia les classes de l'exercici anterior i modifica-les. Crea una interf\u00edcie JSerializable, de manera que oferisca els m\u00e8todes: toJSON(): string \u2192 utilitza la funci\u00f3 json_encode(mixed) . Tingues en compte que com tenim les propietats dels objectes privats, has de rec\u00f3rrer les propietats i col\u00b7locar-les en un mapa. Per exemple: php <?php public function toJSON(): string { foreach ($this as $clave => $valor) { $mapa->$clave = $valor; } return json_encode($mapa); } ?> toSerialize(): string \u2192 utilizta la funci\u00f3 serialize(mixed) Modifica totes les classes que no s\u00f3n abstractes perqu\u00e8 implementen la interf\u00edcie creada.","title":"Objetos"},{"location":"03phpoo.html#projecte-videoclub","text":"En els seg\u00fcents exercicis simularem un xicotet projecte d'un Videoclub (basat en la proposta que fa el tutorial de desarrolloweb.com), el qual realitzarem mitjan\u00e7ant un desenvolupament incremental i seguint la pr\u00e0ctica de programaci\u00f3 en parelles ( pair programming ). Abans de res, crea un repositori privat en GitHub i puja el projecte actual de Videoclub*. Una vegada creat, convida al teu company al repositori com a col\u00b7laborador. Inicialitza en local el teu repostorio de git, mitjan\u00e7ant git init Afig i puja els canvis al teu repositori, mitjan\u00e7ant git add . i despr\u00e9s git commit -m 'Inicialitzant projecte'. Connecta el teu repositori amb GitHub i puja els canvis (mira la instruccions de GitHub: comandos git remalnom i git push ). El teu company haur\u00e0 de descarregar el projecte amb les seues credencials. Projecte no real El seg\u00fcent projecte est\u00e0 pensat des d'un punt de vista formatiu. Algunes de les decisions que es prenen no s'han d'usar (com fer tire dins de les classes) o provar el codi comparant el resultat en el navegador. Cada classe ha d'anar en un arxiu php separat. Per a facilitar la seua implementaci\u00f3, es mostra l'estructura UML del model i un fragment de codi per a provar les classes: Creamos el Soporte Crea una classe per a emmagatzemar suports ( Soporte.php ). Aquesta classe ser\u00e0 la classe pare dels diferents suports amb els quals treballe el nostre videoclub (cintes de v\u00eddeo, videojocs, etc...): Crea el constructor que inicialitze les seues propietats. Fixa't que la classe no t\u00e9 m\u00e8todes setters*. Definir una constant mitjan\u00e7ant un propietat privada i est\u00e0tica denominada `IVA amb un valor del 21% Crear un arxiu ( inici.php ) per a usar les classes i c\u00f2pia el seg\u00fcent fragment: C\u00f3digo de prueba Navegador <?php include \"Soporte.php\" ; $soporte1 = new Soporte ( \"Tenet\" , 22 , 3 ); echo \"<strong>\" . $soporte1 -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $soporte1 -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $soporte1 -> getPrecioConIVA () . \" euros\" ; $soporte1 -> muestraResumen (); Tenet Precio: 3 euros Precio IVA incluido: 3.48 euros Tenet 3 \u20ac (IVA no incluido) Afegim Cinta de Video Crea la classe CintaVideo la qual hereta de Soporte . Afig l'atribut duracion i sobreescriu tant el contructor com el m\u00e8tode MuestraResumen (des de CintaVideo haur\u00e0s de cridar al m\u00e8tode MuestraResumen del pare). Afig a inici.php el codi per a provar la classe: C\u00f3digo de prueba Navegador <?php include \"CintaVideo.php\" ; $miCinta = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); echo \"<strong>\" . $miCinta -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $miCinta -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $miCinta -> getPrecioConIva () . \" euros\" ; $miCinta -> muestraResumen (); Los cazafantasmas Precio: 3.5 euros Precio IVA incluido: 4.06 euros Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos Afegim Dvd Crea la classe Dvd la qual hereta de Soporte . Afig els atributs idiomas i formatoPantalla . A continuaci\u00f3 sobreescriu tant el contructor com el m\u00e8tode MuestraResumen . Afig a inici.php el codi per a provar la classe: C\u00f3digo de prueba Navegador <?php include \"Dvd.php\" ; $miDvd = new Dvd ( \"Origen\" , 24 , 15 , \"es,en,fr\" , \"16:9\" ); echo \"<strong>\" . $miDvd -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $miDvd -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $miDvd -> getPrecioConIva () . \" euros\" ; $miDvd -> muestraResumen (); Origen Precio: 15 euros Precio IVA incluido: 17.4 euros Pel\u00edcula en DVD: Origen 15 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 Afegim Juego Crea la classe Juego la qual hereta de Soporte . Afig els atributs consola , minNumJugadores i maxNumJugadores . A continuaci\u00f3 afig el m\u00e8tode muestraJugadoresPosibles , el qual ha de mostrar Per a un jugador , Per a X Jugadores o De X a I Jugadores depenent dels valors de les atributs creats. Finalment, sobreescriu tant el contructor com el m\u00e8tode MuestraResumen . Afig a inici.php el codi per a provar la classe: C\u00f3digo de prueba Navegador <?php include \"Juego.php\" ; $miJuego = new Juego ( \"The Last of Us Part II\" , 26 , 49.99 , \"PS4\" , 1 , 1 ); echo \"<strong>\" . $miJuego -> titulo . \"</strong>\" ; echo \"<br>Precio: \" . $miJuego -> getPrecio () . \" euros\" ; echo \"<br>Precio IVA incluido: \" . $miJuego -> getPrecioConIva () . \" euros\" ; $miJuego -> muestraResumen (); The Last of Us Part II Precio: 49.99 euros Precio IVA incluido: 57.9884 euros Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador Arribats a aquest punt, el nostre model \u00e9s similar al seg\u00fcent diagrama: Model inicial de Videoclub Afegim Cliente Crear la classe Cliente . El constructor rebr\u00e0 el nom , numere i maxLloguerConcurrent , aquest \u00faltim podent ser opcional i prenent com a valor per defecte 3. Despr\u00e9s d'aix\u00f2, afig getter/setter \u00fanicament a numere , i un getter a numSoportsalquilados (aquest camp emmagatzemar\u00e0 un comptador del total de lloguers que ha realitzat). El array de suports alquilados contedr\u00e1 classes que hereten de Soporte . Finalment, afig el m\u00e8tode MuestraResumen que mostre el nom i la quantitat de lloguers (grand\u00e0ria del array soportsalquilados ). Dins de Cliente , afig les seg\u00fcent operacions: tieneAlquilado(Soporte $s): bool \u2192 Recorre el array de suports i comprova si est\u00e0 el suport alquilar(Soporte $s): bool -\u2192 Ha de comprovar si el suport est\u00e0 alquilado i si no ha superat el contingent de lloguers. En llogar, incrementar\u00e0 el numSoportsalquilados i emmagatzemar\u00e0 el suport en el array. Per a cada cas ha de mostrar un missatge informant de l'ocorregut. Seguim amb Cliente per a afegir les operacions: retornar(int $numSoporte): bool \u2192 Ha de comprovar que el suport estava llogat i actualitzar la quantitat de suports llogats. Per a cada cas ha de mostrar un missatge informant de l'ocorregut llistarLloguers(): void \u2192 Informa de quants lloguers t\u00e9 el client i els mostra. Crea l'arxiu inicio2.php amb el seg\u00fcent codi font per a provar la classe: Codi de prova Navegador <?php include_once \"CintaVideo.php\" ; include_once \"Dvd.php\" ; include_once \"Juego.php\" ; include_once \"Cliente.php\" ; //instanciamos un par de objetos Clientee $cliente1 = new Cliente ( \"Bruce Wayne\" , 23 ); $cliente2 = new Cliente ( \"Clark Kent\" , 33 ); //mostramos el n\u00famero de cada cliente creado echo \"<br>El identificador del cliente 1 es: \" . $cliente1 -> getNumero (); echo \"<br>El identificador del cliente 2 es: \" . $cliente2 -> getNumero (); //instancio algunos soportes $soporte1 = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $soporte2 = new Juego ( \"The Last of Us Part II\" , 26 , 49.99 , \"PS4\" , 1 , 1 ); $soporte3 = new Dvd ( \"Origen\" , 24 , 15 , \"es,en,fr\" , \"16:9\" ); $soporte4 = new Dvd ( \"El Imperio Contraataca\" , 4 , 3 , \"es,en\" , \"16:9\" ); //alquilo algunos soportes $cliente1 -> alquilar ( $soporte1 ); $cliente1 -> alquilar ( $soporte2 ); $cliente1 -> alquilar ( $soporte3 ); //voy a intentar alquilar de nuevo un soporte que ya tiene alquilado $cliente1 -> alquilar ( $soporte1 ); //el cliente tiene 3 soportes en alquiler como m\u00e1ximo //este soporte no lo va a poder alquilar $cliente1 -> alquilar ( $soporte4 ); //este soporte no lo tiene alquilado $cliente1 -> tornar ( 4 ); //devuelvo un soporte que s\u00ed que tiene alquilado $cliente1 -> tornar ( 2 ); //alquilo otro soporte $cliente1 -> Alquilar ( $soporte4 ); //listo los elementos alquilados $cliente1 -> llistaLloguers (); //este cliente no tiene alquileres $cliente2 -> tornar ( 2 ); El identificador del cliente 1 es: 23 El identificador del cliente 2 es: 33 Alquilado soporte a : Bruce Wayne Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos Alquilado soporte a : Bruce Wayne Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador Alquilado soporte a : Bruce Wayne Pel\u00edcula en DVD: Origen 15 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 El cliente ya tiene alquilado el soporte Los cazafantasmas Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo No se ha podido encontrar el soporte en los alquileres de este cliente No se ha podido encontrar el soporte en los alquileres de este cliente Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo El cliente tiene 3 soportes alquilados Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador Pel\u00edcula en DVD: Origen 15 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 Este cliente no tiene alquilado ning\u00fan elemento Arribat a aquest punt, relacionarem els clients i els suports mitjan\u00e7ant la classe Videoclub . Aix\u00ed doncs crea la classe que representa el gr\u00e0fic, tenint en compte que: productes \u00e9s un array de Soporte socis \u00e9s una array de Cliente Els m\u00e8todes p\u00fablics d'incloure algun suport, crearan la classe i cridaran al m\u00e8tode privat de incluirProducto , el qual \u00e9s l'encarregat d'introduir-lo dins del array. El model complet quedar\u00e0 de la seg\u00fcent manera: Model complet de Videoclub I per a provar el projecte, dins inicio3.php col\u00b7locarem: Codi de prova Navegador <?php include_once \"Videoclub.php\" ; // No incluimos nada m\u00e1s $vc = new Videoclub ( \"Severo 8A\" ); //voy a incluir unos cuantos soportes de prueba $vc -> incluirJuego ( \"God of War\" , 19.99 , \"PS4\" , 1 , 1 ); $vc -> incluirJuego ( \"The Last of Us Part II\" , 49.99 , \"PS4\" , 1 , 1 ); $vc -> incluirDvd ( \"Torrente\" , 4.5 , \"es\" , \"16:9\" ); $vc -> incluirDvd ( \"Origen\" , 4.5 , \"es,en,fr\" , \"16:9\" ); $vc -> incluirDvd ( \"El Imperio Contraataca\" , 3 , \"es,en\" , \"16:9\" ); $vc -> incluirCintaVideo ( \"Los cazafantasmas\" , 3.5 , 107 ); $vc -> incluirCintaVideo ( \"El nombre de la Rosa\" , 1.5 , 140 ); //listo los productos $vc -> listarProductos (); //voy a crear algunos socios $vc -> incluirSocio ( \"Amancio Ortega\" ); $vc -> incluirSocio ( \"Pablo Picasso\" , 2 ); $vc -> alquilaSocioProducto ( 1 , 2 ); $vc -> alquilaSocioProducto ( 1 , 3 ); //alquilo otra vez el soporte 2 al socio 1. // no debe dejarme porque ya lo tiene alquilado $vc -> alquilaSocioProducto ( 1 , 2 ); //alquilo el soporte 6 al socio 1. //no se puede porque el socio 1 tiene 2 alquileres como m\u00e1ximo $vc -> alquilaSocioProducto ( 1 , 6 ); //listo los socios $vc -> listarSocios (); Incluido soporte 0 Incluido soporte 1 Incluido soporte 2 Incluido soporte 3 Incluido soporte 4 Incluido soporte 5 Incluido soporte 6 Listado de los 7 productos disponibles: 1.- Juego para: PS4 God of War 19.99 \u20ac (IVA no incluido) Para un jugador 2.- Juego para: PS4 The Last of Us Part II 49.99 \u20ac (IVA no incluido) Para un jugador 3.- Pel\u00edcula en DVD: Torrente 4.5 \u20ac (IVA no incluido) Idiomas:es Formato Pantalla:16:9 4.- Pel\u00edcula en DVD: Origen 4.5 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 5.- Pel\u00edcula en DVD: El Imperio Contraataca 3 \u20ac (IVA no incluido) Idiomas:es,en Formato Pantalla:16:9 6.- Pel\u00edcula en VHS: Los cazafantasmas 3.5 \u20ac (IVA no incluido) Duraci\u00f3n: 107 minutos 7.- Pel\u00edcula en VHS: El nombre de la Rosa 1.5 \u20ac (IVA no incluido) Duraci\u00f3n: 140 minutos Incluido socio 0 Incluido socio 1 Alquilado soporte a : Pablo Picasso Pel\u00edcula en DVD: Torrente 4.5 \u20ac (IVA no incluido) Idiomas:es Formato Pantalla:16:9 Alquilado soporte a : Pablo Picasso Pel\u00edcula en DVD: Origen 4.5 \u20ac (IVA no incluido) Idiomas:es,en,fr Formato Pantalla:16:9 El cliente ya tiene alquilado el soporte Torrente Este cliente tiene 2 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo Listado de 2 socios del videoclub: 1.- Cliente 0 : Amancio Ortega Alquileres actuales: 0 2.- Cliente 1 : Pablo Picasso Alquileres actuales: 2 Transforma Soporte a una classe abstracta i comprova que tot continua funcionant. Qu\u00e8 aconseguim en fer-la abstracta? Crea una interf\u00edcie Resumible , de manera que les classes que l'implementen han d'oferir el m\u00e8tode muestraResumen() . Modifica la classe Soporte i feix que implemente la interf\u00edcie. Fa falta que tamb\u00e9 l'implementen els fills?","title":"Projecte Videoclub"},{"location":"03phpoo.html#projecte-videoclub-20","text":"Antes de comenzar con la segunda parte del videoclub, crea una etiqueta mediante git tag con el nombre v0.329 y sube los cambios a GitHub. Modifica els operacions de llogar, tant en Client com en Videoclub , per a donar suport a l'encadenament de m\u00e8todes. Posteriorment, modifica el codi de prova per a utilitzar aquesta t\u00e8cnica. Fent \u00fas de namespaces : Col\u00b7boja totes els classes/interf\u00edcies en Dwes\\ProyectoVideoclub Cada classe ha de fer include_once dels recursos que empra Col\u00b7boja el/els arxivaments de prova en l'arrel (sense espai de noms) Dones de l'arxiu de proves, utilitza use per a poder realitzar accessos sense qualificar Etiqueta els canvis com v0.331 . Reorganitza els carpeta tal com hem vist en els anotacions: app , test i vendor . Crea un fitxer autolloeu.php per a registrar la ruta on trobar els classes Modifica tot el codi necessari, incloent autolloeu.php on seguisca necessari i esborrant els includes previs. A continuaci\u00f3 crearem un conjunt d'excepcions d'aplicaci\u00f3. Aquestes excepcions s\u00f3n simples, no necessiten sobreescriure cap m\u00e8tode. Aix\u00ed doncs, crea l'excepci\u00f3 d'aplicaci\u00f3 VideoclubException en el namespace Dwes\\ProyectoVideoclub\\Util . Posteriorment crea els seg\u00fcents fills (han d'heretar de VideoclubException ), cadascun en el seu propi arxiu: * SoporteYaAlquiladoException CupoSuperadoException SoporteNoEncontradoException ClienteNoEncontradoException En Cliente , modifica els m\u00e8todes alquilar i retornar , perqu\u00e8 facen \u00fas de les noves excepcions (llan\u00e7ant-les quan siga necessari) i funcionen com a m\u00e8todes encadenats. Destacar que aquests m\u00e8todes, no es capturar est\u00e0s excepcions, nom\u00e9s es llancen. En Videoclub , modifica alquilarSocioPelicula per a capturar totes les excepcions que ara llan\u00e7a Cliente i informar l'usuari en conseq\u00fc\u00e8ncia. Modificarem el projecte perqu\u00e8 el videoclub s\u00e0pia quins productes estan o no llogats: En Soporte , crea una propietat p\u00fablica el nom de la qual siga alquilado que inicialment estar\u00e0 a false . Quan es llogue, es posar\u00e0 a true . En retornar, la tornarem a posar a false . En Videoclub , crea dues noves propietats i les seues getters: * numProductosAlquilados * numTotalAlquileres Crea un nou m\u00e8tode en Videoclub anomenat alquilarSocioProductos(int numSocio, array numerosProductos) , el qual ha de rebre un array amb els productes a llogar. Abans de llogar-los, ha de comprovar que tots els suports estiguen disponibles, de manera que si un no ho est\u00e0, no se li llogue cap. Crea dos nous m\u00e8todes en Videoclub , i mitjan\u00e7ant la definici\u00f3, dedueix qu\u00e8 han de realitzar: devolverSocioProducto(int numSocio, int numeroProducto) devolverSocioProductos(int numSocio, array numerosProductos) Han de suportar l'encadenament de m\u00e8todes. Recorda actualitzar la propietat alquilado dels diferents suports. Quan hages realitzat tots els exercicis, crea una etiqueta mitjan\u00e7ant git tag amb el nom v0.337 i puja els canvis a GitHub.","title":"Projecte Videoclub 2.0"},{"location":"04web.html","text":"Programaci\u00f3 Web \u00b6 Duraci\u00f3 i criteris d'evaluaci\u00f3 Duraci\u00f3 estimada: 12 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 4. Desenvolupa aplicacions Web embegudes en llenguatges de marques analitzant i incorporant funcionalitats segons especificacions a) S'han identificat els mecanismes disponibles per al manteniment de la informaci\u00f3 que concerneix a un client Web concret i s'han assenyalat els seus avantatges. b) S'han utilitzat sessions per a mantenir l'estat de les aplicacions Web. c) S'han utilitzat cookies per a emmagatzemar informaci\u00f3 en el client Web i per a recuperar el seu contingut. d) S'han identificat i caracteritzat els mecanismes disponibles per a l'autenticaci\u00f3 d'usuaris. e) S'han escrit aplicacions que integren mecanismes d'autenticaci\u00f3 d'usuaris. f) S'han realitzat adaptacions a aplicacions Web existents com a gestors de continguts o unes altres. g) S'han utilitzat eines i entorns per a facilitar la programaci\u00f3, prova i depuraci\u00f3 del codi. Variables de servidor \u00b6 PHP emmagatzema la informaci\u00f3 del servidor i de les peticions HTTP en sis arrays globals: $_ENV : informaci\u00f3 sobre les variables d'entorn $_GET : par\u00e0metres enviats en la petici\u00f3 GET $_POST : par\u00e0metres enviats en el envio POST $_COOKIE : cont\u00e9 les cookies de la petici\u00f3, les claus del array s\u00f3n els noms de les cookies $_SERVER : informaci\u00f3 sobre el servidor $_FILES : informaci\u00f3 sobre els fitxers carregats via upload Si ens centrem en el array $_SERVER podem consultar les seg\u00fcents propietats: PHP_SELF : nom del script executat, relatiu al document root (p.ej: /tendisca/carret.php ) SERVER_PROGRAMARI : (p.ej: Apatxe) SERVER_NAME : domini, \u00e0lies DNS (p.ej: www.elche.es ) REQUEST_METHOD : GET REQUEST_URI : URI, sense el domini QUERY_STRING : tot el que va despr\u00e9s de ? en la URL (p.ej: heroe=Batman&nomene=Bruce ) M\u00e9s informaci\u00f3 en https://www.php.net/manual/es/reserved.variables.server.php <?php echo $_SERVER [ \"PHP_SELF\" ] . \"<br>\" ; // /u4/401server.php echo $_SERVER [ \"SERVER_SOFTWARE\" ] . \"<br>\" ; // Apache/2.4.46 (Win64) OpenSSL/1.1.1g PHP/7.4.9 echo $_SERVER [ \"SERVER_NAME\" ] . \"<br>\" ; // localhost echo $_SERVER [ \"REQUEST_METHOD\" ] . \"<br>\" ; // GET echo $_SERVER [ \"REQUEST_URI\" ] . \"<br>\" ; // /u4/401server.php?heroe=Batman echo $_SERVER [ \"QUERY_STRING\" ] . \"<br>\" ; // heroe=Batman Altres propietats relacionades: PATH_INFO : ruta extra despr\u00e9s de la petici\u00f3. Si la URL \u00e9s http://www.php.com/php/pathinfo.php/algo/cosa?foo=bar , llavors $_SERVER['PATH_INFO'] ser\u00e0 /alguna cosa/cosa . REMALNOM_HOST : hostname que va fer la petici\u00f3 REMALNOM_ADDR : IP del client AUTH_TYPE : tipus d'autenticaci\u00f3 (p.ej: Basic) REMALNOM_USER : nom de l'usuari autenticat Apatxe crea una clau per a cada cap\u00e7alera HTTP, en maj\u00fascules i substituint els guions per subratllats: HTTP_USER_AGENT : agent (navegador) HTTP_REFERER : p\u00e0gina des de la qual es va fer la petici\u00f3 <?php echo $_SERVER [ \"HTTP_USER_AGENT\" ] . \"<br>\" ; // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Formularis \u00b6 A l'hora d'enviar un formulari, hem de tindre clar quan usar GET o POST GET: els par\u00e0metres es passen en la URL <2048 car\u00e0cters, nom\u00e9s ASCII Permet emmagatzemar la direcci\u00f3 completa (marcador / historial) Idempotent: dues crides amb les mateixes dades sempre ha de donar el mateix resultat El navegador pot cachejar les cridades POST: par\u00e0metres ocults (no encriptats) Sense l\u00edmit de dades, permet dades bin\u00e0ries. No es poden escorcollar No idempotent \u2192 actualitzar la BBDD Aix\u00ed doncs, per a recollir les dades accedirem al array depenent del m\u00e8tode del formulari que ens ha invocat: <?php $par = $_GET [ \"parametro\" ] $par = $_POST [ \"parametro\" ] A l'hora d'enviar un formulari, hem de tindre clar quan usar GET o POST. Per als seg\u00fcents apartats ens basarem en el seg\u00fcent exemple: < form action = \"formulario.php\" method = \"GET\" > < p >< label for = \"nombre\" > Nombre del alumno: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" value = \"\" /> </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWES\" value = \"DWES\" /> < label for = \"modulosDWES\" > Desarrollo web en entorno servidor </ label > </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWEC\" value = \"DWEC\" /> < label for = \"modulosDWEC\" > Desarrollo web en entorno cliente </ label > </ p > < input type = \"submit\" value = \"Enviar\" name = \"enviar\" /> </ form > Validaci\u00f3 \u00b6 Respecte a la validaci\u00f3, \u00e9s convenient sempre fer validaci\u00f3 doble : En el client mitjan\u00e7ant JS En servidor, abans de cridar a negoci, \u00e9s convenient tornar a validar les dades. <?php if ( isset ( $_GET [ \"parametro\" ])) { $par = $_GET [ \"parametro\" ]; // comprobar si $par tiene el formato adecuado, su valor, etc... } Llibreries de validaci\u00f3 Existeixen diverses llibreries que faciliten la validaci\u00f3 dels formularis, com s\u00f3n respect/validation o particle/validator . Quan estudiem Laravel aprofundirem en la validaci\u00f3 de manera declarativa. Par\u00e1metre multivalor \u00b6 Existeixen elements HTML que envien diversos valors: select multiple checkbox Per a recollir les dades, el nom de l'element ha de ser un array. < select name = \"lenguajes[]\" multiple = \"true\" > < option value = \"c\" > C </ option > < option value = \"java\" > Java </ option > < option value = \"php\" > PHP </ option > < option value = \"python\" > Python </ option > </ select > < input type = \"checkbox\" name = \"lenguajes[]\" value = \"c\" /> C < br /> < input type = \"checkbox\" name = \"lenguajes[]\" value = \"java\" /> Java < br /> < input type = \"checkbox\" name = \"lenguajes[]\" value = \"php\" /> Php < br /> < input type = \"checkbox\" name = \"lenguajes[]\" value = \"python\" /> Python < br /> De manera que despr\u00e9s en recollir les dades: <?php $lenguajes = $_GET [ \"lenguajes\" ]; foreach ( $lenguajes as $lenguaje ) { echo \" $lenguaje <br />\" ; } Tornant a emplenar un formulari \u00b6 Un sticky form \u00e9s un formulari que recorda els seus valors. Per a aix\u00f2, hem d'emplenar els atributs value dels elements HTML amb la informaci\u00f3 que contenien: <?php if ( ! empty ( $_POST [ 'modulos' ]) && ! empty ( $_POST [ 'nombre' ])) { // Aqu\u00ed se incluye el c\u00f3digo a ejecutar cuando los datos son correctos } else { // Generamos el formulario $nombre = $_POST [ 'nombre' ] ?? \"\" ; $modulos = $_POST [ 'modulos' ] ?? []; ?> < form action = \" <?php echo $_SERVER [ 'PHP_SELF' ]; ?> \" method = \"POST\" > < p >< label for = \"nombre\" > Nombre del alumno: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" value = \" <? = $nombre ?> \" /> </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWES\" value = \"DWES\" <?php if ( in_array ( \"DWES\" , $modulos )) echo 'checked=\"checked\"' ; ?> /> < label for = \"modulosDWES\" > Desarrollo web en entorno servidor </ label > </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWEC\" value = \"DWEC\" <?php if ( in_array ( \"DWEC\" , $modulos )) echo 'checked=\"checked\"' ; ?> /> < label for = \"modulosDWEC\" > Desarrollo web en entorno cliente </ label > </ p > < input type = \"submit\" value = \"Enviar\" name = \"enviar\" /> </ form > <?php } ?> Pujant arxius \u00b6 S'emmagatzemen en el servidor en el array $_FILES amb el nom del camp del tipus file del formulari. < form enctype = \"multipart/form-data\" action = \"<?php echo $_SERVER['PHP_SELF']; ?>\" method = \"POST\" > Archivo: < input name = \"archivoEnviado\" type = \"file\" /> < br /> < input type = \"submit\" name = \"btnSubir\" value = \"Subir\" /> </ form > Configuraci\u00f3 en php.ini file_uploads : on / off upload_max_filesize : 2M upload_tmp_dir : directori temporal. No \u00e9s necessari configurar-ho, agafar\u00e0 el predeterminat del sistema post_max_size : grand\u00e0ria m\u00e0xima de les dades POST. Ha de ser major a upload_max_filesize. max_file_uploads : nombre m\u00e0xim d'arxius que es poden carregar alhora. max_input_estafe : temps m\u00e0xim emprat en la c\u00e0rrega (GET/POST i upload \u2192 normalment es configura en 60) memory_limit : 128M max_execution_estafe : temps d'execuci\u00f3 d'un script (no t\u00e9 en compte el upload) Per a carregar els arxius, accedim al array $_FILES : <?php if ( isset ( $_POST [ 'btnSubir' ]) && $_POST [ 'btnSubir' ] == 'Subir' ) { if ( is_uploaded_file ( $_FILES [ 'archivoEnviado' ][ 'tmp_name' ])) { // subido con \u00e9xito $nombre = $_FILES [ 'archivoEnviado' ][ 'name' ]; move_uploaded_file ( $_FILES [ 'archivoEnviado' ][ 'tmp_name' ], \"./uploads/ { $nombre } \" ); echo \"<p>Archivo $nombre subido con \u00e9xito</p>\" ; } } Cada arxiu carregat en $_FILES t\u00e9: name : nom tmp_name : ruta temporal size : grand\u00e0ria en bytes type : tipus ACARONE error : si hi ha error, cont\u00e9 un missatge. Si ok \u2192 0. Cap\u00e7aleres de resposta \u00b6 Ha de ser el primer a retornar. Es retornen mitjan\u00e7ant la funci\u00f3 header(cadena) . Mitjan\u00e7ant les cap\u00e7aleres podem configurar el tipus de contingut, temps d'expiraci\u00f3, redirigir el navegador, especificar errors HTTP, etc. <?php header ( \"Content-Type: text/plain\" ); ?> <?php header ( \"Location: http://www.ejemplo.com/inicio.html\" ); exit (); Es pot comprovar en les eines del desenvolupador dels navegadors web mitjan\u00e7ant Developer Tools \u2192 Network \u2192 Headers . \u00c9s molt com\u00fa configurar les cap\u00e7aleres per a evitar consultes a la caixet o provocar la seua renovaci\u00f3: <?php header ( \"Expires: Sun, 31 Jan 2021 23:59:59 GMT\" ); // tres horas $now = time (); $horas3 = gmstrftime ( \"%a, %d %b %Y %H:%M:%S GMT\" , $now + 60 * 60 * 3 ); header ( \"Expires: { $horas3 } \" ); // un a\u00f1o $now = time (); $anyo1 = gmstrftime ( \"%a, %d %b %Y %H:%M:%S GMT\" , $now + 365 * 86440 ); header ( \"Expires: { $anyo1 } \" ); // se marca como expirado (fecha en el pasado) $pasado = gmstrftime ( \"%a, %d %b %Y %H:%M:%S GMT\" ); header ( \"Expires: { $pasado } \" ); // evitamos cache de navegador y/o proxy header ( \"Expires: Mon, 26 Jul 1997 05:00:00 GMT\" ); header ( \"Last-Modified: \" . gmdate ( \"D, d M Y H:i:s\" ) . \" GMT\" ); header ( \"Cache-Control: no-store, no-cache, must-revalidate\" ); header ( \"Cache-Control: post-check=0, pre-check=0\" , false ); header ( \"Pragma: no-cache\" ); Gesti\u00f3 de l'estat \u00b6 HTTP \u00e9s un protocol stateless , sense estat. Per aix\u00f2, se simula l'estat mitjan\u00e7ant l'\u00fas de cookies, tokens o la sessi\u00f3. L'estat \u00e9s necessari per a processos com ara el carret de la compra, operacions associades a un usuari, etc... El mecanisme de PHP per a gestionar la sessi\u00f3 empra cookies de manera interna. Les cookies s'emmagatzemen en el navegador, i la sessi\u00f3 en el servidor web. Cookies \u00b6 Les cookies s'emmagatzemen en el array global $_COOKIE . El que col\u00b7loquem dins del array, es guardar\u00e0 en el client. Cal tindre present que el client pot no voler emmagatzemar-les. Existeix una limitaci\u00f3 de 20 cookies per domini i 300 en total en el navegador. En PHP, per a crear una cookie s'utilitza la funci\u00f3 setcookie : <?php setcookie ( nombre [, valor [, expira [, ruta [, dominio [, seguro [, httponly ]]]]]]); setcookie ( nombre [, valor = \"\" [, opciones = [] ]] ) ?> Destacar que el nom no pot contindre espais ni el car\u00e0cter ; . Respecte al contingut de la cookie, no pot superar els 4 KB. Per exemple, mitjan\u00e7ant cookies podem comprovar la quantitat de visites diferents que realitza un usuari: <?php $accesosPagina = 0 ; if ( isset ( $_COOKIE [ 'accesos' ])) { $accesosPagina = $_COOKIE [ 'accesos' ]; // recuperamos una cookie setcookie ( 'accesos' , ++ $accesosPagina ); // le asignamos un valor } ?> Inspeccionant les cookies Si volem veure que contenen les cookies que tenim emmagatzemades en el navegador, es pot comprovar el seu valor en *Dev Tools \u2192 Application \u2192 Storage El temps de vida de les cookies pot ser tan llarg com el lloc web en el qual resideixen. Elles seguiran ac\u00ed, fins i tot si el navegador est\u00e0 tancat o obert. Per a esborrar una cookie es pot posar que expiren en el passat: <?php setcookie ( nombre , \"\" , 1 ) // pasado O que caduquen dins d'un per\u00edode de temps deteminado: <?php setcookie ( nombre , valor , time () + 3600 ) // Caducan dentro de una hora Comunicaci\u00f3 amb cookies S'utilitzen per a: Recordar els inicis de sessi\u00f3 Emmagatzemar valors temporals d'usuari Si un usuari est\u00e0 navegant per una llista paginada d'articles, ordenats d'una certa manera, podem emmagatzemar l'ajust de la classificaci\u00f3. L'alternativa en el client per a emmagatzemar informaci\u00f3 en el navegador \u00e9s l'objecte LocalStorage . Sessi\u00f3 \u00b6 La sessi\u00f3 afig la gesti\u00f3 de l'estat a HTTP, emmagatzemant en aquest cas la informaci\u00f3 en el servidor. Cada visitant t\u00e9 un ANEU de sessi\u00f3 \u00fanic, el qual per defecte s'emmagatzema en una cookie denominada PHPSESSID . Si el client no t\u00e9 les cookies actives, l'ANEU es propaga en cada URL dins del mateix domini. Cada sessi\u00f3 t\u00e9 associat un magatzem de dades mitjan\u00e7ant el array global $_SESSION , en el qual podem emmagatzemar i recuperar informaci\u00f3. La sessi\u00f3 comen\u00e7a en executar un script PHP. Es genera un nou ANEU i es carreguen les dades del magatzem: Comunicaci\u00f3 amb sessions Les operacions que podem realitzar amb la sessi\u00f3 s\u00f3n: <?php session_start (); // carga la sesi\u00f3n session_id () // devuelve el id $_SESSION [ clave ] = valor ; // inserci\u00f3n session_destroy (); // destruye la sesi\u00f3n unset ( $_SESSION [ clave ]; // borrado Veurem mitjan\u00e7ant un exemple com podem inserir en un p\u00e0gina dades en la sessi\u00f3 per a posteriorment en una altra p\u00e0gina accedir a aqueixes dades. Per exemple, en sesion1.php tindr\u00edem <?php session_start (); // inicializamos $_SESSION [ \"ies\" ] = \"IES Severo Ochoa\" ; // asignaci\u00f3n $instituto = $_SESSION [ \"ies\" ]; // recuperaci\u00f3n echo \"Estamos en el $instituto \" ; ?> <br /> <a href=\"sesion2.php\">Y luego</a> I posteriorment podem accedir a la sessi\u00f3 en sesion2.php : <?php session_start (); $instituto = $_SESSION [ \"ies\" ]; // recuperaci\u00f3n echo \"Otra vez, en el $instituto \" ; ?> Configurant la sessi\u00f3 en php.ini Les seg\u00fcent propietats de php.ini permeten configurar alguns aspectes de la sessi\u00f3: session.save_handler : controlador que gestiona com s'emmagatzema ( files ) session.save_path : ruta on s'emmagatzemen els arxius amb les dades (si tenim un cl\u00faster, podr\u00edem usar /mnt/sessions en tots els servidor de manera que apunten a una carpeta compartida) session.name : nom de la sessi\u00f3 ( PHSESSID ) session.acte_start : Es pot fer que s'autocarregue amb cada script. Per defecte est\u00e0 deshabilitat session.cookie_lifetime : temps de vida per defecte M\u00e9s informaci\u00f3 en la documentaci\u00f3 oficial . Autenticaci\u00f3 d'usuaris \u00b6 Una sessi\u00f3 estableix una relaci\u00f3 an\u00f2nima amb un usuari particular, de manera que podem saber si \u00e9s el mateix usuari entre dues peticions diferents. Si preparem un sistema de login, podrem saber qui utilitza la nostra aplicaci\u00f3. Per a aix\u00f2, preparem un senzill sistema d'autenticaci\u00f3: Mostrar el formulari login/password Comprovar les dades enviades Afegir el login a la sessi\u00f3 Comprovar el login en la sessi\u00f3 per a fer tasques espec\u00edfiques de l'usuari Eliminar el login de la sessi\u00f3 quan l'usuari la tanca. Veurem en codi cada pas del proc\u00e9s. Comencem amb l'arxiu index.php : < form action = 'login.php' method = 'post' > < fieldset > < legend > Login </ legend > < div >< span class = 'error' > <?php echo $error; ?> </ span ></ div > < div class = 'fila' > < label for = 'usuario' > Usuario: </ label >< br /> < input type = 'text' name = 'inputUsuario' id = 'usuario' maxlength = \"50\" />< br /> </ div > < div class = 'fila' > < label for = 'password' > Contrase\u00f1a: </ label >< br /> < input type = 'password' name = 'inputPassword' id = 'password' maxlength = \"50\" />< br /> </ div > < div class = 'fila' > < input type = 'submit' name = 'enviar' value = 'Enviar' /> </ div > </ fieldset > </ form > En fer submit ens porta a login.php , el qual fa de controlador: <?php // Comprobamos si ya se ha enviado el formulario if ( isset ( $_POST [ 'enviar' ])) { $usuario = $_POST [ 'inputUsuario' ]; $password = $_POST [ 'inputPassword' ]; // validamos que recibimos ambos par\u00e1metros if ( empty ( $usuario ) || empty ( $password )) { $error = \"Debes introducir un usuario y contrase\u00f1a\" ; include \"index.php\" ; } else { if ( $usuario == \"admin\" && $password == \"admin\" ) { // almacenamos el usuario en la sesi\u00f3n session_start (); $_SESSION [ 'usuario' ] = $usuario ; // cargamos la p\u00e1gina principal include \"main.php\" ; } else { // Si las credenciales no son v\u00e1lidas, se vuelven a pedir $error = \"Usuario o contrase\u00f1a no v\u00e1lidos!\" ; include \"index.php\" ; } } } Depenent de l'usuari que s'hi haja logueado, anirem a una vista o a una altra. Per exemple, en main.php tindr\u00edem: <?php // Recuperamos la informaci\u00f3n de la sesi\u00f3n if ( ! isset ( $_SESSION )) { session_start (); } // Y comprobamos que el usuario se haya autentificado if ( ! isset ( $_SESSION [ 'usuario' ])) { die ( \"Error - debe <a href='index.php'>identificarse</a>.<br />\" ); } ?> <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Listado de productos </ title > </ head > < body > < h1 > Bienvenido <? = $_SESSION [ 'usuario' ] ?> </ h1 > < p > Pulse < a href = \"logout.php\" > aqu\u00ed </ a > para salir </ p > < p > Volver al < a href = \"main.php\" > inicio </ a ></ p > < h2 > Listado de productos </ h2 > < ul > < li > Producto 1 </ li > < li > Producto 2 </ li > < li > Producto 3 </ li > </ ul > </ body > </ html > Finalment, necessitem l'opci\u00f3 de tancar la sessi\u00f3 que col\u00b7loquem en logout.php : <?php // Recuperamos la informaci\u00f3n de la sesi\u00f3n session_start (); // Y la destruimos session_destroy (); header ( \"Location: index.php\" ); ?> Autenticaci\u00f3 en producci\u00f3 En l'actualitat l'autenticaci\u00f3 d'usuari no es realitza gestionant la sessi\u00f3 direcamente, sin\u00f3 que es realitza mitjan\u00e7ant algun framekwork que abstrau tot el proc\u00e9s o la integraci\u00f3 de mecanismes d'autenticaci\u00f3 tipus OAuth , com estudiarem en l'\u00faltima unitat mitjan\u00e7ant Laravel . Refer\u00e8ncies \u00b6 Cookies en PHP Manejo de sesiones en PHP Activitats \u00b6 401server.php : igual que l'exemple vist en les anotacions, mostra els valors de $_SERVER en executar un script en el teu ordinador. Prova a passar-li par\u00e0metres per GET (i a no passar-li cap). Prepara un formulari ( 401post.html ) que fa\u00e7a un enviament per POST i comprova'l de nou. Crea una p\u00e0gina ( 401enlace.html ) que tinga un enlla\u00e7 a 401server.php i comprova el valor de HTTP_REFERER . Formularis \u00b6 402formulario.html i 402formulario.php : Crea un formulari que sol\u00b7licite: Nom i cognoms. Email. URL p\u00e0gina personal. Sexe (r\u00e0dio). Nombre de convivents en el domicili. Aficions (caselles de selecci\u00f3) \u2013 posar m\u00ednim 4 valors. Men\u00fa favorit (llesta selecci\u00f3 m\u00faltiple) \u2013 posar m\u00ednim 4 valors. Mostra els valors carregats en una taula-resumeixen. 403validacion.php : A partir del formulari anterior, introdueix validacions en HTML mitjan\u00e7ant l'atribut required dels camps (\u00fas els tipus adequats per a cada camp), i en comprova els tipus de les dades i que compleixen els valors esperats (per exemple, en les caselles de selecci\u00f3 que els valors recollits formen part de tots els possibles). Pots provar de passar-li dades erroneos via URL i comprovar el seu comportament. Tip: Investiga l'\u00fas de la funci\u00f3 filter_var . 404subida.html i 404subida.php : Crea un formulari que permeta pujar un arxiu al servidor. A m\u00e9s del fitxer, ha de demanar en el mateix formulari dos camps num\u00e8rics que sol\u00b7liciten l'ampl\u00e0ria i l'altura. Comprova que tant el fitxer com les dades arriben correctament. 405subidaImagen.php : Modifica l'exercici anterior perqu\u00e8 \u00fanicament permeta pujar imatges (comprova la propietat type de l'arxiu pujat). Si l'usuari selecciona un altre tipus d'arxius, se l'ha d'informar de l'error i permetre que puge un nou arxiu. En el cas de pujar el tipus correcte, visualitzar la imatge amb la grand\u00e0ria d'ampl\u00e0ria i altura rebut com a par\u00e0metre. Cookies i Sessi\u00f3 \u00b6 406contadorVisitas.php : Mitjan\u00e7ant l'\u00fas de cookies, informa l'usuari de si \u00e9s la seua primera visita, o si no ho \u00e9s, mostre el seu valor (valor d'un comptador). A m\u00e9s, has de permetre que l'usuari reinicialitze el seu comptador de visites. 407fondo.php : Mitjan\u00e7ant l'\u00fas de cookies, crea una p\u00e0gina amb un desplegable amb diversos colors, de manera que l'usuari puga canviar el color de fons de la p\u00e0gina (atribut bgcolor ). En tancar la p\u00e0gina, aquesta ha de recordar, almenys durant 24h, el color triat i la pr\u00f2xima vegada que es carregue la p\u00e0gina, ho fa\u00e7a amb l'\u00faltim color seleccionat. 408fondoSesion1.php : Modifica l'exercici anterior per a emmagatzemar el color de fons en la sessi\u00f3 i no emprar cookies. A m\u00e9s, ha de contindre un enlla\u00e7 al seg\u00fcent arxiu. 408fondoSesion2.php : Ha de mostrar el color i donar la possibilitat de: * tornar a la p\u00e0gina anterior mitjan\u00e7ant un enlla\u00e7 i mitjan\u00e7ant un altre enlla\u00e7, buidar la sessi\u00f3 i tornar a la p\u00e0gina anterior. Fent \u00fas de la sessi\u00f3, dividirem el formulari de l'exercici 402formulario.php en 2 subformularios: 409formulario1.php envia les dades (nom i cognoms, email, url i sexe) a 409formulario2.php . 409formulario2.php llig les dades i els fica en la sessi\u00f3. A continuaci\u00f3, mostra la resta de camps del formulari a emplenar (convivents, aficions i men\u00fa). Envia aquestes dades a 409formulario3.php . 409formulario3.php recull les dades enviades en el pas anterior i al costat dels quals ja estaven en la sessi\u00f3, es mostren totes les dades en una taula/llista desordenada. Autenticaci\u00f3 \u00b6 En els seg\u00fcents exercicis muntarem una estructura d'inici de sessi\u00f3 similar a la vista en les anotacions. 410index.php : formulari d'inici de sessi\u00f3 411login.php : fa de controlador, per la qual cosa ha de comprovar les dades rebudes (nom\u00e9s permet l'entrada de usuari/usuari i si tot \u00e9s correcte, cedir el control a la vista del seg\u00fcent exercici. No cont\u00e9 codi HTML. 412peliculas.php : vista que mostra com a t\u00edtol \"Llistat de Pel\u00b7l\u00edcules\", i una llista desordenada amb tres pel\u00b7l\u00edcules. 413logout.php : buida la sessi\u00f3 i ens porta de nou al formulari d'inici de sessi\u00f3. No cont\u00e9 codi HTML 414series.php : Afig un nova vista similar a 412peliculas.php que mostra un \"Llistat de S\u00e8ries\" amb una llista desordenada amb tres s\u00e8ries. Tant 412pelicuas.php com la vista recien creades, han de tindre un xicotet men\u00fa (senzill, mitjan\u00e7ant enlla\u00e7os) que permeta passar d'un llistat a un altre. Comprova que si s'accedeix directament a qualsevol de les vistes sense tindre un usuari loguejao via URL del navegador, no es mostra el llistat. Modifica tant el controlador com les vistes perqu\u00e8: les dades els obtinga el controlador (emmagatzema en la sessi\u00f3 un array de pel\u00b7l\u00edcules i un altre de s\u00e8ries) col\u00b7loque les dades en la sessi\u00f3 En les vistes, les dades es recuperen de la sessi\u00f3 i es pinten* en la llista desordenada recorrent el array corresponent. Projecte Videoclub 3.0 \u00b6 Per al Videoclub, crearem una p\u00e0gina index.php amb un formulari que continga un formulari de login/password. Es comprovaran les dades en login.php . Els possibles usuaris s\u00f3n admin/admin o usuari/usuari * Si l'usuari \u00e9s correcte, en main.php mostrar un missatge de benvinguda amb el nom de l'usuari, al costat d'un enlla\u00e7 per a tancar la sessi\u00f3, que el portaria de nou al login. * Si l'usuari \u00e9s incorrecte, ha de tornar a carregar el formulari donant informaci\u00f3 a l'usuari d'acc\u00e9s incorrecte. Si l'usuari \u00e9s administrador, es carregaran en la sessi\u00f3 les dades de suports i clients del videoclub que ten\u00edem en les nostres proves. En la seg\u00fcent unitat els obtindrem de la base de dades. En mainAdmin.php , a m\u00e9s de la benvinguda, ha de mostrar: Llistat de clients Llistat de suports Esquema navegaci\u00f3 exercici 423 Modificarem la classe Client per a emmagatzemar el user i la password de cada client. Despr\u00e9s de codificar els canvis, modificar el llistat de clients de mainAdmin.php per a afegir al llistat l'usuari. Si l'usuari que accedeix no \u00e9s administrador i coincideix amb algun dels clients que tenim carregats despr\u00e9s del login, ha de carregar mainCliente.php on es mostrar\u00e0 un llistat dels lloguers del client. Per a aix\u00f2, modificarem la classe Client per a oferir el m\u00e8tode getAlquileres() : array , el qual anomenarem i despr\u00e9s recorrerem per a mostrar el llistat sol\u00b7licitat. Ara tornem a la part d'administraci\u00f3 A m\u00e9s de mostrar el llistat de clients, oferirem l'opci\u00f3 de donar d'alta a un nou client en formCreateCliente.php . Les dades s'enviaran mitjan\u00e7ant POST a createCliente.php que els introduir\u00e0 en la sessi\u00f3. Una vegada creat el client, ha de tornar a carregar mainAdmin.php on es podr\u00e0 veure el client inserit. Si hi ha alguna dada incorrecta, ha de tornar a carregar el formulari d'alta. Crea en formUpdateCliente.php un formulari que permeta editar les dades d'un client. Has de recollir les dades en updateCliente.php Les dades de client s'han de poder modificar des de la pr\u00f2pia p\u00e0gina d'un client, aix\u00ed com des del llistat de l'administrador. Des del llistat de clients de l'administrador has d'oferir la possibilitat d'esborrar un client. En el navegador, abans de redirigir al servidor, l'usuari ha de confirmar mitjan\u00e7ant JS que realment desitja eliminar al client. Finalment, en removeCliente.php elimina al client de la sessi\u00f3. Una vegada eliminat, ha de tornar al llistat de clients. Esquema navegaci\u00f3n Videoclub 3.0","title":"4.- Programaci\u00f3 Web"},{"location":"04web.html#programacio-web","text":"Duraci\u00f3 i criteris d'evaluaci\u00f3 Duraci\u00f3 estimada: 12 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 4. Desenvolupa aplicacions Web embegudes en llenguatges de marques analitzant i incorporant funcionalitats segons especificacions a) S'han identificat els mecanismes disponibles per al manteniment de la informaci\u00f3 que concerneix a un client Web concret i s'han assenyalat els seus avantatges. b) S'han utilitzat sessions per a mantenir l'estat de les aplicacions Web. c) S'han utilitzat cookies per a emmagatzemar informaci\u00f3 en el client Web i per a recuperar el seu contingut. d) S'han identificat i caracteritzat els mecanismes disponibles per a l'autenticaci\u00f3 d'usuaris. e) S'han escrit aplicacions que integren mecanismes d'autenticaci\u00f3 d'usuaris. f) S'han realitzat adaptacions a aplicacions Web existents com a gestors de continguts o unes altres. g) S'han utilitzat eines i entorns per a facilitar la programaci\u00f3, prova i depuraci\u00f3 del codi.","title":"Programaci\u00f3 Web"},{"location":"04web.html#variables-de-servidor","text":"PHP emmagatzema la informaci\u00f3 del servidor i de les peticions HTTP en sis arrays globals: $_ENV : informaci\u00f3 sobre les variables d'entorn $_GET : par\u00e0metres enviats en la petici\u00f3 GET $_POST : par\u00e0metres enviats en el envio POST $_COOKIE : cont\u00e9 les cookies de la petici\u00f3, les claus del array s\u00f3n els noms de les cookies $_SERVER : informaci\u00f3 sobre el servidor $_FILES : informaci\u00f3 sobre els fitxers carregats via upload Si ens centrem en el array $_SERVER podem consultar les seg\u00fcents propietats: PHP_SELF : nom del script executat, relatiu al document root (p.ej: /tendisca/carret.php ) SERVER_PROGRAMARI : (p.ej: Apatxe) SERVER_NAME : domini, \u00e0lies DNS (p.ej: www.elche.es ) REQUEST_METHOD : GET REQUEST_URI : URI, sense el domini QUERY_STRING : tot el que va despr\u00e9s de ? en la URL (p.ej: heroe=Batman&nomene=Bruce ) M\u00e9s informaci\u00f3 en https://www.php.net/manual/es/reserved.variables.server.php <?php echo $_SERVER [ \"PHP_SELF\" ] . \"<br>\" ; // /u4/401server.php echo $_SERVER [ \"SERVER_SOFTWARE\" ] . \"<br>\" ; // Apache/2.4.46 (Win64) OpenSSL/1.1.1g PHP/7.4.9 echo $_SERVER [ \"SERVER_NAME\" ] . \"<br>\" ; // localhost echo $_SERVER [ \"REQUEST_METHOD\" ] . \"<br>\" ; // GET echo $_SERVER [ \"REQUEST_URI\" ] . \"<br>\" ; // /u4/401server.php?heroe=Batman echo $_SERVER [ \"QUERY_STRING\" ] . \"<br>\" ; // heroe=Batman Altres propietats relacionades: PATH_INFO : ruta extra despr\u00e9s de la petici\u00f3. Si la URL \u00e9s http://www.php.com/php/pathinfo.php/algo/cosa?foo=bar , llavors $_SERVER['PATH_INFO'] ser\u00e0 /alguna cosa/cosa . REMALNOM_HOST : hostname que va fer la petici\u00f3 REMALNOM_ADDR : IP del client AUTH_TYPE : tipus d'autenticaci\u00f3 (p.ej: Basic) REMALNOM_USER : nom de l'usuari autenticat Apatxe crea una clau per a cada cap\u00e7alera HTTP, en maj\u00fascules i substituint els guions per subratllats: HTTP_USER_AGENT : agent (navegador) HTTP_REFERER : p\u00e0gina des de la qual es va fer la petici\u00f3 <?php echo $_SERVER [ \"HTTP_USER_AGENT\" ] . \"<br>\" ; // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36","title":"Variables de servidor"},{"location":"04web.html#formularis","text":"A l'hora d'enviar un formulari, hem de tindre clar quan usar GET o POST GET: els par\u00e0metres es passen en la URL <2048 car\u00e0cters, nom\u00e9s ASCII Permet emmagatzemar la direcci\u00f3 completa (marcador / historial) Idempotent: dues crides amb les mateixes dades sempre ha de donar el mateix resultat El navegador pot cachejar les cridades POST: par\u00e0metres ocults (no encriptats) Sense l\u00edmit de dades, permet dades bin\u00e0ries. No es poden escorcollar No idempotent \u2192 actualitzar la BBDD Aix\u00ed doncs, per a recollir les dades accedirem al array depenent del m\u00e8tode del formulari que ens ha invocat: <?php $par = $_GET [ \"parametro\" ] $par = $_POST [ \"parametro\" ] A l'hora d'enviar un formulari, hem de tindre clar quan usar GET o POST. Per als seg\u00fcents apartats ens basarem en el seg\u00fcent exemple: < form action = \"formulario.php\" method = \"GET\" > < p >< label for = \"nombre\" > Nombre del alumno: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" value = \"\" /> </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWES\" value = \"DWES\" /> < label for = \"modulosDWES\" > Desarrollo web en entorno servidor </ label > </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWEC\" value = \"DWEC\" /> < label for = \"modulosDWEC\" > Desarrollo web en entorno cliente </ label > </ p > < input type = \"submit\" value = \"Enviar\" name = \"enviar\" /> </ form >","title":"Formularis"},{"location":"04web.html#validacio","text":"Respecte a la validaci\u00f3, \u00e9s convenient sempre fer validaci\u00f3 doble : En el client mitjan\u00e7ant JS En servidor, abans de cridar a negoci, \u00e9s convenient tornar a validar les dades. <?php if ( isset ( $_GET [ \"parametro\" ])) { $par = $_GET [ \"parametro\" ]; // comprobar si $par tiene el formato adecuado, su valor, etc... } Llibreries de validaci\u00f3 Existeixen diverses llibreries que faciliten la validaci\u00f3 dels formularis, com s\u00f3n respect/validation o particle/validator . Quan estudiem Laravel aprofundirem en la validaci\u00f3 de manera declarativa.","title":"Validaci\u00f3"},{"location":"04web.html#parametre-multivalor","text":"Existeixen elements HTML que envien diversos valors: select multiple checkbox Per a recollir les dades, el nom de l'element ha de ser un array. < select name = \"lenguajes[]\" multiple = \"true\" > < option value = \"c\" > C </ option > < option value = \"java\" > Java </ option > < option value = \"php\" > PHP </ option > < option value = \"python\" > Python </ option > </ select > < input type = \"checkbox\" name = \"lenguajes[]\" value = \"c\" /> C < br /> < input type = \"checkbox\" name = \"lenguajes[]\" value = \"java\" /> Java < br /> < input type = \"checkbox\" name = \"lenguajes[]\" value = \"php\" /> Php < br /> < input type = \"checkbox\" name = \"lenguajes[]\" value = \"python\" /> Python < br /> De manera que despr\u00e9s en recollir les dades: <?php $lenguajes = $_GET [ \"lenguajes\" ]; foreach ( $lenguajes as $lenguaje ) { echo \" $lenguaje <br />\" ; }","title":"Par\u00e1metre multivalor"},{"location":"04web.html#tornant-a-emplenar-un-formulari","text":"Un sticky form \u00e9s un formulari que recorda els seus valors. Per a aix\u00f2, hem d'emplenar els atributs value dels elements HTML amb la informaci\u00f3 que contenien: <?php if ( ! empty ( $_POST [ 'modulos' ]) && ! empty ( $_POST [ 'nombre' ])) { // Aqu\u00ed se incluye el c\u00f3digo a ejecutar cuando los datos son correctos } else { // Generamos el formulario $nombre = $_POST [ 'nombre' ] ?? \"\" ; $modulos = $_POST [ 'modulos' ] ?? []; ?> < form action = \" <?php echo $_SERVER [ 'PHP_SELF' ]; ?> \" method = \"POST\" > < p >< label for = \"nombre\" > Nombre del alumno: </ label > < input type = \"text\" name = \"nombre\" id = \"nombre\" value = \" <? = $nombre ?> \" /> </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWES\" value = \"DWES\" <?php if ( in_array ( \"DWES\" , $modulos )) echo 'checked=\"checked\"' ; ?> /> < label for = \"modulosDWES\" > Desarrollo web en entorno servidor </ label > </ p > < p >< input type = \"checkbox\" name = \"modulos[]\" id = \"modulosDWEC\" value = \"DWEC\" <?php if ( in_array ( \"DWEC\" , $modulos )) echo 'checked=\"checked\"' ; ?> /> < label for = \"modulosDWEC\" > Desarrollo web en entorno cliente </ label > </ p > < input type = \"submit\" value = \"Enviar\" name = \"enviar\" /> </ form > <?php } ?>","title":"Tornant a emplenar un formulari"},{"location":"04web.html#pujant-arxius","text":"S'emmagatzemen en el servidor en el array $_FILES amb el nom del camp del tipus file del formulari. < form enctype = \"multipart/form-data\" action = \"<?php echo $_SERVER['PHP_SELF']; ?>\" method = \"POST\" > Archivo: < input name = \"archivoEnviado\" type = \"file\" /> < br /> < input type = \"submit\" name = \"btnSubir\" value = \"Subir\" /> </ form > Configuraci\u00f3 en php.ini file_uploads : on / off upload_max_filesize : 2M upload_tmp_dir : directori temporal. No \u00e9s necessari configurar-ho, agafar\u00e0 el predeterminat del sistema post_max_size : grand\u00e0ria m\u00e0xima de les dades POST. Ha de ser major a upload_max_filesize. max_file_uploads : nombre m\u00e0xim d'arxius que es poden carregar alhora. max_input_estafe : temps m\u00e0xim emprat en la c\u00e0rrega (GET/POST i upload \u2192 normalment es configura en 60) memory_limit : 128M max_execution_estafe : temps d'execuci\u00f3 d'un script (no t\u00e9 en compte el upload) Per a carregar els arxius, accedim al array $_FILES : <?php if ( isset ( $_POST [ 'btnSubir' ]) && $_POST [ 'btnSubir' ] == 'Subir' ) { if ( is_uploaded_file ( $_FILES [ 'archivoEnviado' ][ 'tmp_name' ])) { // subido con \u00e9xito $nombre = $_FILES [ 'archivoEnviado' ][ 'name' ]; move_uploaded_file ( $_FILES [ 'archivoEnviado' ][ 'tmp_name' ], \"./uploads/ { $nombre } \" ); echo \"<p>Archivo $nombre subido con \u00e9xito</p>\" ; } } Cada arxiu carregat en $_FILES t\u00e9: name : nom tmp_name : ruta temporal size : grand\u00e0ria en bytes type : tipus ACARONE error : si hi ha error, cont\u00e9 un missatge. Si ok \u2192 0.","title":"Pujant arxius"},{"location":"04web.html#capcaleres-de-resposta","text":"Ha de ser el primer a retornar. Es retornen mitjan\u00e7ant la funci\u00f3 header(cadena) . Mitjan\u00e7ant les cap\u00e7aleres podem configurar el tipus de contingut, temps d'expiraci\u00f3, redirigir el navegador, especificar errors HTTP, etc. <?php header ( \"Content-Type: text/plain\" ); ?> <?php header ( \"Location: http://www.ejemplo.com/inicio.html\" ); exit (); Es pot comprovar en les eines del desenvolupador dels navegadors web mitjan\u00e7ant Developer Tools \u2192 Network \u2192 Headers . \u00c9s molt com\u00fa configurar les cap\u00e7aleres per a evitar consultes a la caixet o provocar la seua renovaci\u00f3: <?php header ( \"Expires: Sun, 31 Jan 2021 23:59:59 GMT\" ); // tres horas $now = time (); $horas3 = gmstrftime ( \"%a, %d %b %Y %H:%M:%S GMT\" , $now + 60 * 60 * 3 ); header ( \"Expires: { $horas3 } \" ); // un a\u00f1o $now = time (); $anyo1 = gmstrftime ( \"%a, %d %b %Y %H:%M:%S GMT\" , $now + 365 * 86440 ); header ( \"Expires: { $anyo1 } \" ); // se marca como expirado (fecha en el pasado) $pasado = gmstrftime ( \"%a, %d %b %Y %H:%M:%S GMT\" ); header ( \"Expires: { $pasado } \" ); // evitamos cache de navegador y/o proxy header ( \"Expires: Mon, 26 Jul 1997 05:00:00 GMT\" ); header ( \"Last-Modified: \" . gmdate ( \"D, d M Y H:i:s\" ) . \" GMT\" ); header ( \"Cache-Control: no-store, no-cache, must-revalidate\" ); header ( \"Cache-Control: post-check=0, pre-check=0\" , false ); header ( \"Pragma: no-cache\" );","title":"Cap\u00e7aleres de resposta"},{"location":"04web.html#gestio-de-lestat","text":"HTTP \u00e9s un protocol stateless , sense estat. Per aix\u00f2, se simula l'estat mitjan\u00e7ant l'\u00fas de cookies, tokens o la sessi\u00f3. L'estat \u00e9s necessari per a processos com ara el carret de la compra, operacions associades a un usuari, etc... El mecanisme de PHP per a gestionar la sessi\u00f3 empra cookies de manera interna. Les cookies s'emmagatzemen en el navegador, i la sessi\u00f3 en el servidor web.","title":"Gesti\u00f3 de l'estat"},{"location":"04web.html#cookies","text":"Les cookies s'emmagatzemen en el array global $_COOKIE . El que col\u00b7loquem dins del array, es guardar\u00e0 en el client. Cal tindre present que el client pot no voler emmagatzemar-les. Existeix una limitaci\u00f3 de 20 cookies per domini i 300 en total en el navegador. En PHP, per a crear una cookie s'utilitza la funci\u00f3 setcookie : <?php setcookie ( nombre [, valor [, expira [, ruta [, dominio [, seguro [, httponly ]]]]]]); setcookie ( nombre [, valor = \"\" [, opciones = [] ]] ) ?> Destacar que el nom no pot contindre espais ni el car\u00e0cter ; . Respecte al contingut de la cookie, no pot superar els 4 KB. Per exemple, mitjan\u00e7ant cookies podem comprovar la quantitat de visites diferents que realitza un usuari: <?php $accesosPagina = 0 ; if ( isset ( $_COOKIE [ 'accesos' ])) { $accesosPagina = $_COOKIE [ 'accesos' ]; // recuperamos una cookie setcookie ( 'accesos' , ++ $accesosPagina ); // le asignamos un valor } ?> Inspeccionant les cookies Si volem veure que contenen les cookies que tenim emmagatzemades en el navegador, es pot comprovar el seu valor en *Dev Tools \u2192 Application \u2192 Storage El temps de vida de les cookies pot ser tan llarg com el lloc web en el qual resideixen. Elles seguiran ac\u00ed, fins i tot si el navegador est\u00e0 tancat o obert. Per a esborrar una cookie es pot posar que expiren en el passat: <?php setcookie ( nombre , \"\" , 1 ) // pasado O que caduquen dins d'un per\u00edode de temps deteminado: <?php setcookie ( nombre , valor , time () + 3600 ) // Caducan dentro de una hora Comunicaci\u00f3 amb cookies S'utilitzen per a: Recordar els inicis de sessi\u00f3 Emmagatzemar valors temporals d'usuari Si un usuari est\u00e0 navegant per una llista paginada d'articles, ordenats d'una certa manera, podem emmagatzemar l'ajust de la classificaci\u00f3. L'alternativa en el client per a emmagatzemar informaci\u00f3 en el navegador \u00e9s l'objecte LocalStorage .","title":"Cookies"},{"location":"04web.html#sessio","text":"La sessi\u00f3 afig la gesti\u00f3 de l'estat a HTTP, emmagatzemant en aquest cas la informaci\u00f3 en el servidor. Cada visitant t\u00e9 un ANEU de sessi\u00f3 \u00fanic, el qual per defecte s'emmagatzema en una cookie denominada PHPSESSID . Si el client no t\u00e9 les cookies actives, l'ANEU es propaga en cada URL dins del mateix domini. Cada sessi\u00f3 t\u00e9 associat un magatzem de dades mitjan\u00e7ant el array global $_SESSION , en el qual podem emmagatzemar i recuperar informaci\u00f3. La sessi\u00f3 comen\u00e7a en executar un script PHP. Es genera un nou ANEU i es carreguen les dades del magatzem: Comunicaci\u00f3 amb sessions Les operacions que podem realitzar amb la sessi\u00f3 s\u00f3n: <?php session_start (); // carga la sesi\u00f3n session_id () // devuelve el id $_SESSION [ clave ] = valor ; // inserci\u00f3n session_destroy (); // destruye la sesi\u00f3n unset ( $_SESSION [ clave ]; // borrado Veurem mitjan\u00e7ant un exemple com podem inserir en un p\u00e0gina dades en la sessi\u00f3 per a posteriorment en una altra p\u00e0gina accedir a aqueixes dades. Per exemple, en sesion1.php tindr\u00edem <?php session_start (); // inicializamos $_SESSION [ \"ies\" ] = \"IES Severo Ochoa\" ; // asignaci\u00f3n $instituto = $_SESSION [ \"ies\" ]; // recuperaci\u00f3n echo \"Estamos en el $instituto \" ; ?> <br /> <a href=\"sesion2.php\">Y luego</a> I posteriorment podem accedir a la sessi\u00f3 en sesion2.php : <?php session_start (); $instituto = $_SESSION [ \"ies\" ]; // recuperaci\u00f3n echo \"Otra vez, en el $instituto \" ; ?> Configurant la sessi\u00f3 en php.ini Les seg\u00fcent propietats de php.ini permeten configurar alguns aspectes de la sessi\u00f3: session.save_handler : controlador que gestiona com s'emmagatzema ( files ) session.save_path : ruta on s'emmagatzemen els arxius amb les dades (si tenim un cl\u00faster, podr\u00edem usar /mnt/sessions en tots els servidor de manera que apunten a una carpeta compartida) session.name : nom de la sessi\u00f3 ( PHSESSID ) session.acte_start : Es pot fer que s'autocarregue amb cada script. Per defecte est\u00e0 deshabilitat session.cookie_lifetime : temps de vida per defecte M\u00e9s informaci\u00f3 en la documentaci\u00f3 oficial .","title":"Sessi\u00f3"},{"location":"04web.html#autenticacio-dusuaris","text":"Una sessi\u00f3 estableix una relaci\u00f3 an\u00f2nima amb un usuari particular, de manera que podem saber si \u00e9s el mateix usuari entre dues peticions diferents. Si preparem un sistema de login, podrem saber qui utilitza la nostra aplicaci\u00f3. Per a aix\u00f2, preparem un senzill sistema d'autenticaci\u00f3: Mostrar el formulari login/password Comprovar les dades enviades Afegir el login a la sessi\u00f3 Comprovar el login en la sessi\u00f3 per a fer tasques espec\u00edfiques de l'usuari Eliminar el login de la sessi\u00f3 quan l'usuari la tanca. Veurem en codi cada pas del proc\u00e9s. Comencem amb l'arxiu index.php : < form action = 'login.php' method = 'post' > < fieldset > < legend > Login </ legend > < div >< span class = 'error' > <?php echo $error; ?> </ span ></ div > < div class = 'fila' > < label for = 'usuario' > Usuario: </ label >< br /> < input type = 'text' name = 'inputUsuario' id = 'usuario' maxlength = \"50\" />< br /> </ div > < div class = 'fila' > < label for = 'password' > Contrase\u00f1a: </ label >< br /> < input type = 'password' name = 'inputPassword' id = 'password' maxlength = \"50\" />< br /> </ div > < div class = 'fila' > < input type = 'submit' name = 'enviar' value = 'Enviar' /> </ div > </ fieldset > </ form > En fer submit ens porta a login.php , el qual fa de controlador: <?php // Comprobamos si ya se ha enviado el formulario if ( isset ( $_POST [ 'enviar' ])) { $usuario = $_POST [ 'inputUsuario' ]; $password = $_POST [ 'inputPassword' ]; // validamos que recibimos ambos par\u00e1metros if ( empty ( $usuario ) || empty ( $password )) { $error = \"Debes introducir un usuario y contrase\u00f1a\" ; include \"index.php\" ; } else { if ( $usuario == \"admin\" && $password == \"admin\" ) { // almacenamos el usuario en la sesi\u00f3n session_start (); $_SESSION [ 'usuario' ] = $usuario ; // cargamos la p\u00e1gina principal include \"main.php\" ; } else { // Si las credenciales no son v\u00e1lidas, se vuelven a pedir $error = \"Usuario o contrase\u00f1a no v\u00e1lidos!\" ; include \"index.php\" ; } } } Depenent de l'usuari que s'hi haja logueado, anirem a una vista o a una altra. Per exemple, en main.php tindr\u00edem: <?php // Recuperamos la informaci\u00f3n de la sesi\u00f3n if ( ! isset ( $_SESSION )) { session_start (); } // Y comprobamos que el usuario se haya autentificado if ( ! isset ( $_SESSION [ 'usuario' ])) { die ( \"Error - debe <a href='index.php'>identificarse</a>.<br />\" ); } ?> <!DOCTYPE html> < html lang = \"es\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Listado de productos </ title > </ head > < body > < h1 > Bienvenido <? = $_SESSION [ 'usuario' ] ?> </ h1 > < p > Pulse < a href = \"logout.php\" > aqu\u00ed </ a > para salir </ p > < p > Volver al < a href = \"main.php\" > inicio </ a ></ p > < h2 > Listado de productos </ h2 > < ul > < li > Producto 1 </ li > < li > Producto 2 </ li > < li > Producto 3 </ li > </ ul > </ body > </ html > Finalment, necessitem l'opci\u00f3 de tancar la sessi\u00f3 que col\u00b7loquem en logout.php : <?php // Recuperamos la informaci\u00f3n de la sesi\u00f3n session_start (); // Y la destruimos session_destroy (); header ( \"Location: index.php\" ); ?> Autenticaci\u00f3 en producci\u00f3 En l'actualitat l'autenticaci\u00f3 d'usuari no es realitza gestionant la sessi\u00f3 direcamente, sin\u00f3 que es realitza mitjan\u00e7ant algun framekwork que abstrau tot el proc\u00e9s o la integraci\u00f3 de mecanismes d'autenticaci\u00f3 tipus OAuth , com estudiarem en l'\u00faltima unitat mitjan\u00e7ant Laravel .","title":"Autenticaci\u00f3 d'usuaris"},{"location":"04web.html#referencies","text":"Cookies en PHP Manejo de sesiones en PHP","title":"Refer\u00e8ncies"},{"location":"04web.html#activitats","text":"401server.php : igual que l'exemple vist en les anotacions, mostra els valors de $_SERVER en executar un script en el teu ordinador. Prova a passar-li par\u00e0metres per GET (i a no passar-li cap). Prepara un formulari ( 401post.html ) que fa\u00e7a un enviament per POST i comprova'l de nou. Crea una p\u00e0gina ( 401enlace.html ) que tinga un enlla\u00e7 a 401server.php i comprova el valor de HTTP_REFERER .","title":"Activitats"},{"location":"04web.html#formularis_1","text":"402formulario.html i 402formulario.php : Crea un formulari que sol\u00b7licite: Nom i cognoms. Email. URL p\u00e0gina personal. Sexe (r\u00e0dio). Nombre de convivents en el domicili. Aficions (caselles de selecci\u00f3) \u2013 posar m\u00ednim 4 valors. Men\u00fa favorit (llesta selecci\u00f3 m\u00faltiple) \u2013 posar m\u00ednim 4 valors. Mostra els valors carregats en una taula-resumeixen. 403validacion.php : A partir del formulari anterior, introdueix validacions en HTML mitjan\u00e7ant l'atribut required dels camps (\u00fas els tipus adequats per a cada camp), i en comprova els tipus de les dades i que compleixen els valors esperats (per exemple, en les caselles de selecci\u00f3 que els valors recollits formen part de tots els possibles). Pots provar de passar-li dades erroneos via URL i comprovar el seu comportament. Tip: Investiga l'\u00fas de la funci\u00f3 filter_var . 404subida.html i 404subida.php : Crea un formulari que permeta pujar un arxiu al servidor. A m\u00e9s del fitxer, ha de demanar en el mateix formulari dos camps num\u00e8rics que sol\u00b7liciten l'ampl\u00e0ria i l'altura. Comprova que tant el fitxer com les dades arriben correctament. 405subidaImagen.php : Modifica l'exercici anterior perqu\u00e8 \u00fanicament permeta pujar imatges (comprova la propietat type de l'arxiu pujat). Si l'usuari selecciona un altre tipus d'arxius, se l'ha d'informar de l'error i permetre que puge un nou arxiu. En el cas de pujar el tipus correcte, visualitzar la imatge amb la grand\u00e0ria d'ampl\u00e0ria i altura rebut com a par\u00e0metre.","title":"Formularis"},{"location":"04web.html#cookies-i-sessio","text":"406contadorVisitas.php : Mitjan\u00e7ant l'\u00fas de cookies, informa l'usuari de si \u00e9s la seua primera visita, o si no ho \u00e9s, mostre el seu valor (valor d'un comptador). A m\u00e9s, has de permetre que l'usuari reinicialitze el seu comptador de visites. 407fondo.php : Mitjan\u00e7ant l'\u00fas de cookies, crea una p\u00e0gina amb un desplegable amb diversos colors, de manera que l'usuari puga canviar el color de fons de la p\u00e0gina (atribut bgcolor ). En tancar la p\u00e0gina, aquesta ha de recordar, almenys durant 24h, el color triat i la pr\u00f2xima vegada que es carregue la p\u00e0gina, ho fa\u00e7a amb l'\u00faltim color seleccionat. 408fondoSesion1.php : Modifica l'exercici anterior per a emmagatzemar el color de fons en la sessi\u00f3 i no emprar cookies. A m\u00e9s, ha de contindre un enlla\u00e7 al seg\u00fcent arxiu. 408fondoSesion2.php : Ha de mostrar el color i donar la possibilitat de: * tornar a la p\u00e0gina anterior mitjan\u00e7ant un enlla\u00e7 i mitjan\u00e7ant un altre enlla\u00e7, buidar la sessi\u00f3 i tornar a la p\u00e0gina anterior. Fent \u00fas de la sessi\u00f3, dividirem el formulari de l'exercici 402formulario.php en 2 subformularios: 409formulario1.php envia les dades (nom i cognoms, email, url i sexe) a 409formulario2.php . 409formulario2.php llig les dades i els fica en la sessi\u00f3. A continuaci\u00f3, mostra la resta de camps del formulari a emplenar (convivents, aficions i men\u00fa). Envia aquestes dades a 409formulario3.php . 409formulario3.php recull les dades enviades en el pas anterior i al costat dels quals ja estaven en la sessi\u00f3, es mostren totes les dades en una taula/llista desordenada.","title":"Cookies i Sessi\u00f3"},{"location":"04web.html#autenticacio","text":"En els seg\u00fcents exercicis muntarem una estructura d'inici de sessi\u00f3 similar a la vista en les anotacions. 410index.php : formulari d'inici de sessi\u00f3 411login.php : fa de controlador, per la qual cosa ha de comprovar les dades rebudes (nom\u00e9s permet l'entrada de usuari/usuari i si tot \u00e9s correcte, cedir el control a la vista del seg\u00fcent exercici. No cont\u00e9 codi HTML. 412peliculas.php : vista que mostra com a t\u00edtol \"Llistat de Pel\u00b7l\u00edcules\", i una llista desordenada amb tres pel\u00b7l\u00edcules. 413logout.php : buida la sessi\u00f3 i ens porta de nou al formulari d'inici de sessi\u00f3. No cont\u00e9 codi HTML 414series.php : Afig un nova vista similar a 412peliculas.php que mostra un \"Llistat de S\u00e8ries\" amb una llista desordenada amb tres s\u00e8ries. Tant 412pelicuas.php com la vista recien creades, han de tindre un xicotet men\u00fa (senzill, mitjan\u00e7ant enlla\u00e7os) que permeta passar d'un llistat a un altre. Comprova que si s'accedeix directament a qualsevol de les vistes sense tindre un usuari loguejao via URL del navegador, no es mostra el llistat. Modifica tant el controlador com les vistes perqu\u00e8: les dades els obtinga el controlador (emmagatzema en la sessi\u00f3 un array de pel\u00b7l\u00edcules i un altre de s\u00e8ries) col\u00b7loque les dades en la sessi\u00f3 En les vistes, les dades es recuperen de la sessi\u00f3 i es pinten* en la llista desordenada recorrent el array corresponent.","title":"Autenticaci\u00f3"},{"location":"04web.html#projecte-videoclub-30","text":"Per al Videoclub, crearem una p\u00e0gina index.php amb un formulari que continga un formulari de login/password. Es comprovaran les dades en login.php . Els possibles usuaris s\u00f3n admin/admin o usuari/usuari * Si l'usuari \u00e9s correcte, en main.php mostrar un missatge de benvinguda amb el nom de l'usuari, al costat d'un enlla\u00e7 per a tancar la sessi\u00f3, que el portaria de nou al login. * Si l'usuari \u00e9s incorrecte, ha de tornar a carregar el formulari donant informaci\u00f3 a l'usuari d'acc\u00e9s incorrecte. Si l'usuari \u00e9s administrador, es carregaran en la sessi\u00f3 les dades de suports i clients del videoclub que ten\u00edem en les nostres proves. En la seg\u00fcent unitat els obtindrem de la base de dades. En mainAdmin.php , a m\u00e9s de la benvinguda, ha de mostrar: Llistat de clients Llistat de suports Esquema navegaci\u00f3 exercici 423 Modificarem la classe Client per a emmagatzemar el user i la password de cada client. Despr\u00e9s de codificar els canvis, modificar el llistat de clients de mainAdmin.php per a afegir al llistat l'usuari. Si l'usuari que accedeix no \u00e9s administrador i coincideix amb algun dels clients que tenim carregats despr\u00e9s del login, ha de carregar mainCliente.php on es mostrar\u00e0 un llistat dels lloguers del client. Per a aix\u00f2, modificarem la classe Client per a oferir el m\u00e8tode getAlquileres() : array , el qual anomenarem i despr\u00e9s recorrerem per a mostrar el llistat sol\u00b7licitat. Ara tornem a la part d'administraci\u00f3 A m\u00e9s de mostrar el llistat de clients, oferirem l'opci\u00f3 de donar d'alta a un nou client en formCreateCliente.php . Les dades s'enviaran mitjan\u00e7ant POST a createCliente.php que els introduir\u00e0 en la sessi\u00f3. Una vegada creat el client, ha de tornar a carregar mainAdmin.php on es podr\u00e0 veure el client inserit. Si hi ha alguna dada incorrecta, ha de tornar a carregar el formulari d'alta. Crea en formUpdateCliente.php un formulari que permeta editar les dades d'un client. Has de recollir les dades en updateCliente.php Les dades de client s'han de poder modificar des de la pr\u00f2pia p\u00e0gina d'un client, aix\u00ed com des del llistat de l'administrador. Des del llistat de clients de l'administrador has d'oferir la possibilitat d'esborrar un client. En el navegador, abans de redirigir al servidor, l'usuari ha de confirmar mitjan\u00e7ant JS que realment desitja eliminar al client. Finalment, en removeCliente.php elimina al client de la sessi\u00f3. Una vegada eliminat, ha de tornar al llistat de clients. Esquema navegaci\u00f3n Videoclub 3.0","title":"Projecte Videoclub 3.0"},{"location":"05herramientas.html","text":"Ferramentes \u00b6 Duraci\u00f3 y criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 16 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 4.- Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. g) Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo. En aquesta unitat estudiarem algunes de les eines m\u00e9s utilitzades en PHP. Composer \u00b6 Logo Composer Eina per excel\u00b7l\u00e8ncia en PHP per a la gesti\u00f3 de llibreries i depend\u00e8ncies, de manera que instal\u00b7la i les actualitza assegurant que tot l'equip de desenvolupament t\u00e9 el mateix entorn i versions. A m\u00e9s, ofereix autoloading del nostre codi, de manera que no h\u00e0gem de fer-lo nosaltres \"a m\u00e0\". Est\u00e0 escrit en PHP, i podeu consultar tota la seua documentaci\u00f3 en https://getcomposer.org/ . Utilitza Packagist com a repositori de llibreries. Funcionalment, \u00e9s similar a Maven (Java) / npm (JS). Instal\u00b7laci\u00f3 \u00b6 Si estem usant XAMPP, hem d'instal\u00b7lar Composer en el propi sistema operatiu. Es recomana seguir les instruccions oficials segons el sistema operatiu a emprar. En canvi, si usem Docker , necessitem modificar la configuraci\u00f3 del nostre contenidor. En el nostre cas, hem decidit modificar l'arxiu Dockerfile i afegir el seg\u00fcent comando: COPY --from = composer:2.0 /usr/bin/composer /usr/local/bin/composer Per a facilitar el treball, hem creat una plantilla ja preparada . \u00c9s important que dins del contenidor comprovem que tenim la v2: composer -V Primers passos \u00b6 Quan creem un projecte per primera vegada, hem d'inicialitzar el repositori. Per a aix\u00f2, executarem el comando composer init on: Configurem el nom del paquet, descripci\u00f3, autor (nom ), tipus de paquet (project), etc... Definim les depend\u00e8ncies del projecte ( require ) i les de desenvolupament ( require-dev ) de manera interactiva. En les de desenvolupament s'indica aquelles que no s'instal\u00b7laran a l'entorn de producci\u00f3, per exemple, les llibreries de proves. Despr\u00e9s de la seua configuraci\u00f3, es crear\u00e0 autom\u00e0ticament l'arxiu composer.json amb les dades introdu\u00efdes i desc\u00e0rrega les llibreries en la carpeta vendor . La instal\u00b7laci\u00f3 de les llibreries sempre es realitza de manera local per a cada projecte. { \"name\" : \"dwes/log\" , \"description\" : \"Pruebas con Monolog\" , \"type\" : \"project\" , \"require\" : { \"monolog/monolog\" : \"^2.1\" }, \"license\" : \"MIT\" , \"authors\" : [ { \"name\" : \"Aitor Medrano\" , \"email\" : \"a.medrano@edu.gva.es\" } ] } A l'hora d'indicar cada llibreria introduirem: el nom de la llibreria, composta tant pel creador o \"vendor\", com pel nom del projecte. Exemples: monolog/monolog o laravel/installer . la versi\u00f3 de cada llibreria. Tenim diverses opcions per a indicar-la: Directament: 1.4.2 Amb comodins: 1. A partir de: >= 2.0.3 Sense trencament de canvis: ^1.3.2 // >=1.3.2 <2.0.0 Actualitzar llibreries \u00b6 Podem definir les depend\u00e8ncies via l'arxiu composer.json o mitjan\u00e7ant comandos amb el format composer require vendor/package:version . Per exemple, si volem afegir phpUnit com a llibreria de desenvolupament, farem: composer require phpunit/phpunit \u2013dev Despr\u00e9s d'afegir noves llibreries, hem d'actualitzar el nostre projecte: composer update Si creem l'arxiu composer.json nosaltres directament sense inicialitzar el repositori, hem d'instal\u00b7lar les depend\u00e8ncies: composer install En fer aquest pas (tant instal\u00b7lar com actualitzar), com ja hem comentat, es descarreguen les llibreries en dins de la carpeta vendor . \u00c9s molt important afegir aquesta carpeta a l'arxiu .gitignore per a no pujar-les a GitHub. A m\u00e9s es crea l'arxiu composer.lock , que emmagatzema la versi\u00f3 exacta que s'ha instal\u00b7lat de cada llibreria (aquest arxiu no es toca). autoload.php \u00b6 Composer crea de manera autom\u00e0tica en vendor/autoload.php el codi per a incloure de manera autom\u00e0tica totes les llibreries que tinguem configurades en composer.json . Per a utilitzar-ho, en la cap\u00e7alera del nostre arxius posarem: <?php require 'vendor/autoload.php' ; En el nostre cas, de moment nom\u00e9s el podrem en els arxius on provem les classes Si volem que Composer tamb\u00e9 s'encarregue de carregar de manera autom\u00e0tica les nostres classes de domini, dins de l'arxiu composer.json , definirem la propietat autoload : \"autoload\" : { \"psr-4\" : { \"Dwes\\\\\" : \"app/Dwes\" } }, Posteriorment, hem de tornar a generar el autoload de Composer mitjan\u00e7ant l'opci\u00f3 dump-autoload (o du ): composer dump-autoload Monolog \u00b6 Provarem Composer afegint la llibreria de Monolog al nostre projecte. Es tracta d'un llibreria per a la gesti\u00f3 de logs de les nostres aplicacions, suportant diferents nivells (info, warning, etc...), eixides (fitxers, sockets, BBDD, Web Services, email, etc) i formats (text pla, HTML, JSON, etc...). Per a aix\u00f2, inclourem la llibreria en el nostre projecte amb: composer require monolog/monolog Monolog 2 requereix almenys PHP 7.2, compleix amb el estandar de logging PSR-3, i \u00e9s la llibreria emprada per Laravel i Symfony per a la gesti\u00f3 de logs. Quan usar un log Seguir les acciones/moviments dels usuaris Registrar les transaccions Rastrejar els errors d'usuari Fallades/avisos a nivell de sistema Interpretar i col\u00b7leccionar dades per a posterior investigaci\u00f3 de patrons Nivells \u00b6 A continuaci\u00f3 vam mostrar els diferents nivells de menys a m\u00e9s restrictiu: * *debug -100*: Informaci\u00f3 detallada amb prop\u00f2sits de debug. No usar en entorns de producci\u00f3. * *info - 200*: Esdeveniments interessants com l'inici de sessi\u00f3 d'usuaris. * *notice - 250*: Esdeveniments normals per\u00f2 significatius. * *warning - 300*: Ocurr\u00e8ncies excepcionals que no arriben a ser error. * error - 400*: Errors d'execuci\u00f3 que permeten continuar amb l'execuci\u00f3 de l'aplicaci\u00f3 per\u00f2 que han de ser monitorats. * *critical - 500*: Situacions importants on es generen excepcions no esperades o no hi ha disponible un component. * *alert - 550*: S'han de prendre mesures immediatament. Caiguda completa de la web, base de dades no disponible, etc... A m\u00e9s, se solen enviar missatges per email. * *emergency - 600*: \u00c9s l'error m\u00e9s greu i indica que tot el sistema est\u00e0 inutilitzable. Hola Monolog \u00b6 Per exemple, en l'arxiu pruebaLog.php que col\u00b7locar\u00edem en l'arrel, primer incloem el autoload , importem els classes a utilitzar per a finalment usar els m\u00e8todes de Monolog : <?php include __DIR__ . \"/vendor/autoload.php\" ; use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; $log = new Logger ( \"MiLogger\" ); $log -> pushHandler ( new StreamHandler ( \"logs/milog.log\" , Logger :: DEBUG )); $log -> debug ( \"Esto es un mensaje de DEBUG\" ); $log -> info ( \"Esto es un mensaje de INFO\" ); $log -> warning ( \"Esto es un mensaje de WARNING\" ); $log -> error ( \"Esto es un mensaje de ERROR\" ); $log -> critical ( \"Esto es un mensaje de CRITICAL\" ); $log -> alert ( \"Esto es un mensaje de ALERT\" ); En tots els m\u00e8todes de registre de missatges ( debug , info , ...), a m\u00e9s del propi missatge, li podem passar informaci\u00f3 com el contingut d'alguna variable, usuari de l'aplicaci\u00f3, etc.. com a segon par\u00e0metre dins d'un array, el qual es coneix com array de context . \u00c9s convenient fer-ho mitjan\u00e7ant un array associatiu per a facilitar la lectura del log. <?php $log -> warning ( \"Producto no encontrado\" , [ $producto ]); $log -> warning ( \"Producto no encontrado\" , [ \"datos\" => $producto ]); Funcionament \u00b6 Cada inst\u00e0ncia Logger t\u00e9 un nom de canal i una pila de manejadores ( handler ). Cada missatge que manem al log travessa la pila de manejadores, i cadascun decideix si ha de registrar la informaci\u00f3, i si es dona el cas, finalitzar la propagaci\u00f3. Per exemple, un StreamHandler en el fons de la pila que ho escriga tot en disc, i en el topall afig un MailHandler que envie un mail nom\u00e9s quan hi haja un error. Manejadores \u00b6 Cada manejador tambien t\u00e9 un formateador ( Formatter ). Si no s'indica cap, se li assigna un per defecte. L'\u00faltim manejador inserit ser\u00e0 el primer a executar-se. Despr\u00e9s es van executant* conforme a la pila. Els manejadores m\u00e9s utilitzats s\u00f3n: StreamHandler(ruta, nivel) RotatingFileHandler(ruta, maxFiles, nivel) NativeMailerHandler(para, asunto, desde, nivel) FirePHPHandler(nivel) Si volem que els missatges de l'aplicaci\u00f3 isquen pel log del servidor, en el nostre cas l'arxiu error.log de Apatxe* utilitzarem com a ruta l'eixida d'error: <?php // error.log $log -> pushHandler ( new StreamHandler ( \"php://stderr\" , Logger :: DEBUG )); FirePHP Per exemple, mitjan\u00e7ant FirePHPHandler , podem utilitzar FirePHP , la qual \u00e9s una eina per a fer debug en la consola de Firefox . Despr\u00e9s d'instal\u00b7lar l'extensi\u00f3 en Firefox, habilitar les opcions i configurar el Handler*, podem veure els missatges acolorits amb les seues dades: <?php $log = new Logger ( \"MiFirePHPLogger\" ); $log -> pushHandler ( new FirePHPHandler ( Logger :: INFO )); $datos = [ \"real\" => \"Bruce Wayne\" , \"personaje\" => \"Batman\" ]; $log -> debug ( \"Esto es un mensaje de DEBUG\" , $datos ); $log -> info ( \"Esto es un mensaje de INFO\" , $datos ); $log -> warning ( \"Esto es un mensaje de WARNING\" , $datos ); // ... Ejemplo de uso de FirePHP Canales \u00b6 Se'ls assigna en crear el Logger . En grans aplicacions, es crea un canal per cada subsistema: vendes, comptabilitat, magatzem. No \u00e9s una bona pr\u00e0ctica usar el nom de la classe com a canal, aix\u00f2 es fa amb un processador*. Per al seu \u00fas, \u00e9s recomane assignar el log a una propietat privada a Logger, i posteriorment, en el constructor de la classe, assignar el canal, manejadores i format. <?php $this -> log = new Logger ( \"MiApp\" ); $this -> log -> pushHandler ( new StreamHandler ( \"logs/milog.log\" , Logger :: DEBUG )); $this -> log -> pushHandler ( new FirePHPHandler ( Logger :: DEBUG )); I dins dels m\u00e8todes per a escriure en el log: <?php $this -> log -> warning ( \"Producto no encontrado\" , [ $producto ]); Processadors \u00b6 Els processadors permeten afegir informaci\u00f3 als missatges. Per a aix\u00f2, s'apilen despr\u00e9s de cada manejador mitjan\u00e7ant el m\u00e8tode pushProcessor($processador) . Alguns processadors coneguts s\u00f3n IntrospectionProcessor (mostren la l\u00ednia, fitxer, classe i metodo des del qual s'invoca el log), WebProcessor (afig la URI, m\u00e8tode i IP) o GitProcessor (afig la branca i el commit). PHP Consola en format text <?php $log = new Logger ( \"MiLogger\" ); $log -> pushHandler ( new RotatingFileHandler ( \"logs/milog.log\" , 0 , Logger :: DEBUG )); $log -> pushProcessor ( new IntrospectionProcessor ()); $log -> pushHandler ( new StreamHandler ( \"php://stderr\" , Logger :: WARNING )); // no usa Introspection pq lo hemos apilado despu\u00e9s, le asigno otro $log -> pushProcessor ( new WebProcessor ()); [2020-11-26T13:35:31.076138+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":12,\"class\":null,\"function\":null} [2020-11-26T13:35:31.078344+01:00] MiLogger.INFO: Esto es un mensaje de INFO [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":13,\"class\":null,\"function\":null} Formateadores \u00b6 S'associen als manejadores amb setFormatter . Els formateadores m\u00e9s utilitzats s\u00f3n LineFormatter , HtmlFormatter o JsonFormatter . PHP Consola en JSON <?php $log = new Logger ( \"MiLogger\" ); $rfh = new RotatingFileHandler ( \"logs/milog.log\" , Logger :: DEBUG ); $rfh -> setFormatter ( new JsonFormatter ()); $log -> pushHandler ( $rfh ); { \"message\" : \"Esto es un mensaje de DEBUG\" , \"context\" :{}, \"level\" : 100 , \"level_name\" : \"DEBUG\" , \"channel\" : \"MiLogger\" , \"datetime\" : \"2020-11-27T15:36:52.747211+01:00\" , \"extra\" :{}} { \"message\" : \"Esto es un mensaje de INFO\" , \"context\" :{}, \"level\" : 200 , \"level_name\" : \"INFO\" , \"channel\" : \"MiLogger\" , \"datetime\" : \"2020-11-27T15:36:52.747538+01:00\" , \"extra\" :{}} M\u00e9s informaci\u00f3 M\u00e9s informaci\u00f3 sobre manejadores, formateadores i processadors en https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md \u00das de Factories \u00b6 En comptes de instanciar un log en cada classe, \u00e9s convenient crear una factoria (per exemple, seguint la idea del patr\u00f3 de disseny Factory Method ). Per al seg\u00fcent exemple, suposarem que creguem la factoria en el namespace Dwes\\Exemples\\Util . <?php namespace Dwes\\Ejemplos\\Util use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; class LogFactory { public static function getLogger ( string $canal = \"miApp\" ) : Logger { $log = new Logger ( $canal ); $log -> pushHandler ( new StreamHandler ( \"logs/miApp.log\" , Logger :: DEBUG )); return $log ; } } Si en comptes de retornar un Monolog\\Logger utilitzem la interf\u00edcie de PSR, si en el futur canviem la implementaci\u00f3 del log, no haurem de modificar nostre codigo. Aix\u00ed doncs, la factoria ara retornar\u00e0 Psr\\Log\\LoggerInterface : <?php namespace Dwes\\Ejemplos\\Util use Monolog\\Handler\\StreamHandler ; use Monolog\\Logger ; use Psr\\Log\\LoggerInterface ; class LogFactory { public static function getLogger ( string $canal = \"miApp\" ) : LoggerInterface { $log = new Logger ( $canal ); $log -> pushHandler ( new StreamHandler ( \"log/miApp.log\" , Logger :: DEBUG )); return $log ; } } Finalment, per a utilitzar la factoria, nom\u00e9s canviem el codi que ten\u00edem en el constructor de les classes que usen el log, quedant alguna cosa asi: <?php namespace Dwes\\Ejemplos\\Model ; use Dwes\\Ejemplos\\Util\\LogFactory ; use Monolog\\Logger ; class Cliente { private $codigo ; private Logger $log ; function __construct ( $codigo ){ $this -> codigo = $codigo ; $this -> log = LogFactory :: getLogger (); } /// ... resto del c\u00f3digo } Documentaci\u00f3n con phpDocumentor \u00b6 phpDocumentor \u00e9s l'eina per a documentar el codi PHP. \u00c9s similar en prop\u00f2sit i funcionament a Javadoc . Aix\u00ed doncs, \u00e9s un eina que facilita la documentaci\u00f3 del codi PHP, creant un lloc web amb l'API de l'aplicaci\u00f3. Es basa en l'\u00fas d'anotacions sobre els docblocks. Per a posar-ho en marxa, en el nostre cas ens decantarem per utilitzar la imatge que ja existeix de Docker. Instal\u00b7laci\u00f3 com a binari \u00b6 Una altra opci\u00f3 \u00e9s seguir els passos que recomana la documentaci\u00f3 oficial per a instal\u00b7lar-ho com un executable, que s\u00f3n descarregar l'arxiu phpDocumentor.phar i donar-los permisos d'execuci\u00f3: wget https://phpdoc.org/phpDocumentor.phar chmod +x phpDocumentor.phar mv phpDocumentor.phar /usr/local/bin/phpdoc phpdoc --version Una vegada instal\u00b7lat, des de l'arrel del projecte, suposant que tenim el nostre codi dins de app i que volem la documentaci\u00f3 dins de docs/api executem: phpdoc -d ./app -t docs/api \u00das en Docker \u00b6 En el cas d'usar Docker , usarem el seg\u00fcent comando per a executar-lo (crea el contenidor, executa el comando que li demanem, i autom\u00e0ticament l'esborra): docker run --rm -v \" $( pwd ) \" :/data phpdoc/phpdoc:3 A aquest comando, li adjuntarem els diferents par\u00e0metres que admet phpDocumentor, per exemple: # Muestra la versi\u00f3n docker run --rm -v \" $( pwd ) \" :/data phpdoc/phpdoc:3 --version # Mediante -d se indica el origen a parsear # Mediante -t se indica el destino donde generar la documentaci\u00f3n docker run --rm -v \" $( pwd ) \" :/data phpdoc/phpdoc:3 -d ./src/app -t ./docs/api DocBlock \u00b6 Un docblock \u00e9s el bloc de codi que es col\u00b7loca damunt d'un recurs. El seu format \u00e9s: <?php /** * Sumari*, una sola l\u00ednia * Descripci\u00f3* que pot utilitzar diverses l\u00ednies * i que ofereix detalls de l'element o refer\u00e8ncies * per a ampliar la informaci\u00f3 * @param string $miArgumento amb una descripci\u00f3* de l'argument * que pot usar diverses l\u00ednies. * @return void */ function miFuncion ( tipo $miArgumento ) { } Documentant el codi \u00b6 En tots els elements, ademas del sumari i/o descripci\u00f3, posarem: En les classes: @author nom @package ruta del namespace En les propietats: @var tipus descripci\u00f3 En els m\u00e8todes: @param tipus $nomene descripci\u00f3 @throws ClaseException descripci\u00f3 @return tipus descripci\u00f3 Vegem-ho amb un exemple. Suposem que tenim una classe que representa un client: <?php /** * Classe que representa un client * * El client s'encarrega d'emmagatzemar els suports que t\u00e9 llogat, * de manera que podem llogar i retornar productes mitjan\u00e7ant les operacions * hom\u00f2nimes. * * @package Dwes\\Videoclub\\Model * @author Aitor Medrano <a.medrano@edu.gva.es> */ class Cliente { public string $nombre ; private string $numero ; /** * Colecci\u00f3 de soports alquilats * @var array<Soporte> */ private $soportesAlquilados []; /* * Comprova si el suport rebut ja el t\u00e9 llogat el client * @ param Suport $suporte Suport a comprovar * @ return bool true si ho t\u00e9 llogat / public function tieneAlquilado ( Soporte $soporte ) : bool { // ... } Si generem la documentaci\u00f3 i obrim amb un navegador l'arxiu docs/api/index.html podrem navegar fins a la classe `Client: phpDocumentor de Cliente Web Scraping \u00b6 Consisteix a navegar a una p\u00e0gina web i extraure informaci\u00f3 autom\u00e0ticament, a partir del codi HTML generat, i organitzar la informaci\u00f3 p\u00fablica disponible en Internet. Aquesta pr\u00e0ctica requereix l'\u00fas d'una llibreria que facilite la desc\u00e0rrega de la informaci\u00f3 desitjada imitant la interacci\u00f3 d'un navegador web. Aquest \"robot\" pot accedir a diverses p\u00e0gines simult\u00e0niament. \u00bf\u00c9s legal? Si el lloc web indica que t\u00e9 el contingut protegit per drets d'autor o en les normes d'acc\u00e9s via usuari/contrasenya ens avisa de la seua prohibici\u00f3, estar\u00edem incorrent en un delicte. \u00c9s recomanable estudiar l'arxiu robots.txt que es troba en l'arrel de cada lloc web. M\u00e9s informaci\u00f3 en l'article El manual complet per al web scraping legal i \u00e8tic en 2021 Goutte \u00b6 Goutte \u00e9s un senzill client HTTP per a PHP creat espec\u00edficament per a fer web scraping. Ho va desenvolupar el mateix autor del framework Symfony i ofereix un API senzilla per a extraure dades de les respostes HTML/XML dels llocs web. FIXME: Revisar https://godofredo.ninja/web-scraping-amb-php-utilitzant-goutte/ Els components principals que abstrau Goutte sobre Symfony s\u00f3n: BrowserKit : simula el comportament d'un navegador web. CssSelector : tradueix consultes CSS en consultes XPath. DomCrawler : facilita l'\u00fas del DOM i XPath. Per a poder utilitzar Goutte en el nostre projecte, executarem el seg\u00fcent comando en el terminal: composer require fabpot/goutte Goutte con selectores CSS \u00b6 A continuaci\u00f3 farem un exemple molt senzill utilitzant els selectors CSS, extraient informaci\u00f3 de la web https://books.toscrape.com/ , la qual \u00e9s una p\u00e0gina per a proves que no rebutjar\u00e0 les nostres peticions. Despr\u00e9s de crear un client amb Goutte , hem de realitzar un petici\u00f3 a una URL. Amb la resposta obtinguda, podem utilitzar el m\u00e8tode filter per a indicar-li la ruta CSS que volem rec\u00f3rrer i iterar sobre els resultats mitjan\u00e7ant una funci\u00f3 an\u00f2nima. Una vegada estem dins d'un determinat node, el m\u00e8tode text() ens retornar\u00e0 el contingut del propi node. En concret, ficarem en un array associatiu el t\u00edtol i el preu de tots els llibres de la categoria Classics . <?php require '../vendor/autoload.php' ; $httpClient = new \\Goutte\\Client (); $response = $httpClient -> request ( 'GET' , 'https://books.toscrape.com/catalogue/category/books/classics_6/index.html' ); // colocamos los precios en un array $precios = []; $response -> filter ( '.row li article div.product_price p.price_color' ) -> each ( // le pasamos $precios por referencia para poder editarla dentro del closure function ( $node ) use ( & $precios ) { $precios [] = $node -> text (); } ); // colocamos el nombre y el precio en un array asociativo $contadorPrecios = 0 ; $libros = []; $response -> filter ( '.row li article h3 a' ) -> each ( function ( $node ) use ( $precios , & $contadorPrecios , & $libros ) { $libros [ $node -> text ()] = $precios [ $contadorPrecios ]; $contadorPrecios ++ ; } ); Crawler \u00b6 Un cas molt com\u00fa \u00e9s obtindre la informaci\u00f3 d'una p\u00e0gina que t\u00e9 els resultats paginados, de manera que anem recorrent els enlla\u00e7os i accedint a cadascun dels resultats. En aquest cas agafarem tots els preus dels llibres de fantasia, i els sumarem: <?php require '../vendor/autoload.php' ; use Goutte\\Client ; use Symfony\\Component\\HttpClient\\HttpClient ; $client = new Client ( HttpClient :: create ([ 'timeout' => 60 ])); $crawler = $client -> request ( 'GET' , 'https://books.toscrape.com/catalogue/category/books/fantasy_19/index.html' ); $salir = false ; $precios = []; while ( ! $salir ) { $crawler -> filter ( '.row li article div.product_price p.price_color' ) -> each ( function ( $node ) use ( & $precios ) { $texto = $node -> text (); $cantidad = substr ( $texto , 2 ); // Le quitamos las libras \u00bf2 posiciones? $precios [] = floatval ( $cantidad ); } ); $enlace = $crawler -> selectLink ( 'next' ); if ( $enlace -> count () != 0 ) { // el enlace next existe $sigPag = $crawler -> selectLink ( 'next' ) -> link (); $crawler = $client -> click ( $sigPag ); // hacemos click } else { // ya no hay enlace next $salir = true ; } } $precioTotal = array_sum ( $precios ); echo $precioTotal ; Proves amb PHPUnit \u00b6 El curs passat, dins del m\u00f2dul de Entorns de Desenvolupament*, estudiarieu la import\u00e0ncia de la realitzaci\u00f3 de proves, aix\u00ed com les proves unit\u00e0ries mitjan\u00e7ant JUnit . Test Driven Development Hui dia \u00e9s de gran import\u00e0ncia seguir una bona metodologia de proves, sent el desenvolupament dirigit per les proves (Test Driven Development* / TDD) un dels enfocaments m\u00e9s emprats, el qual consisteix en: Escriure el test, i com no hi ha codi implementat, la prova falle (roig). Escriure el codi d'aplicaci\u00f3 perqu\u00e8 la prova funcione (verda). refactoritzar el codi de l'aplicaci\u00f3 amb l'ajuda de la prova per a comprovar que no trenquem res (refactor). En el cas de PHP, l'eina que s'utilitza \u00e9s PHPUnit ( https://phpunit.de/ ), que com el seu nom indica, est\u00e0 basada en JUnit. La versi\u00f3 actual \u00e9s la 9.0 Es recomana consultar la seua documentaci\u00f3 en https://phpunit.readthedocs.io/es/latest/index.html . Posada en marxa \u00b6 Col\u00b7locarem totes les proves en una carpeta tests en l'arrel del nostre projecte. En l'arxiu composer.json , afegim: \"require-dev\" : { \"phpunit/phpunit\" : \"^9\" }, \"scripts\" : { \"test\" : \"phpunit --testdox --colors tests\" } Si volgu\u00e9rem afegir la llibreria des d'un comando del terminal, tamb\u00e9 podr\u00edem executar: composer require --dev phpunit/phpunit ^9 Llibreries de desenvolupament Les llibreries que es col\u00b7loquen en require-dev s\u00f3n les de desenvolupament i testing , de manera que no s'instal\u00b7laran en un entorn de producci\u00f3. Com hem creat un script , podem llan\u00e7ar les proves mitjan\u00e7ant: composer test Vasmos a realitzar la nostra primera prova: <?php use PHPUnit\\Framework\\TestCase ; class PilaTest extends TestCase { public function testPushAndPop () { $pila = []; $this -> assertSame ( 0 , count ( $pila )); array_push ( $pila , 'batman' ); $this -> assertSame ( 'batman' , $pila [ count ( $pila ) - 1 ]); $this -> assertSame ( 1 , count ( $pila )); $this -> assertSame ( 'batman' , array_pop ( $pila )); $this -> assertSame ( 0 , count ( $pila )); } } Tenim diferents maneres d'executar una prova: ./vendor/bin/phpunit tests/PilaTest.php ./vendor/bin/phpunit tests ./vendor/bin/phpunit --testdox tests ./vendor/bin/phpunit --testdox --colors tests Dissenyant proves \u00b6 Tal com hem vist en l'exemple, la classe de prova ha d'heretar de TestCase , i el nom de la classe ha d'acabar en Test , d'aqu\u00ed ve que h\u00e0gem anomenat la classe de prova com PilaTest . Una prova implica un m\u00e8tode de prova (p\u00fablic) per cada funcionalitat a provar. Cada un dels m\u00e8todes se'ls associa un cas de prova. Els m\u00e8todes han de nomenar-se amb el prefix test , per exemple, testPushAndPop . \u00c9s molt important que el nom siga molt clar i descriptiu del prop\u00f2sit de la prova. (*camelCase). En els casos de prova prepararem diverses assercions per a tota la casu\u00edstica: rangs de valors, tipus de dades, excepcions, etc... Assercions \u00b6 Les assercions permeten comprovar el resultat dels m\u00e8todes que volem provar. Les assercions esperen que el predicat sempre siga vertader. PHPUnit ofereix les seg\u00fcent assercions: assertTrue / assertFalse : Comprova que la condici\u00f3 donada siga avaluada com true / false assertEquals / assertSame : Comprova que dues variables siguen iguals assertNotEquals / assertNotSame : Comprova que dues variables NO siguen iguals Same \u2192 comprova els tipus. Si no coincideixen els tipus i els valors, l'asserci\u00f3 fallar\u00e0 Equals \u2192 sense comprovaci\u00f3 estricta assertArrayHasKey / assertArrayNotHasKey : Comprova que un array posse\u00efsca un key determinat / o NO ho posse\u00efsca assertArraySubset : Comprova que un array posse\u00efsca un altre array com subset del mateix assertAttributeContains / assertAttributeNotContains : Comprova que un atribut d'una classe continga una variable determinada / o NO continga una variable determinada assertAttributeEquals : Comprova que un atribut d'una classe siga igual a una variable determinada. Comparant l'eixida \u00b6 Si els m\u00e8todes a provar generen contingut mitjan\u00e7ant echo o una instrucci\u00f3 similar, disposem de les seg\u00fcent expectatives: expectOutputString(salidaEsperada) expectOutputRegex(expresionRegularEsperada) Les expectatives difereixen de les assercions que informen del resultat que s'espera abans d'invocar al m\u00e8tode. Despr\u00e9s de definir l'expectativa, s'invoca al m\u00e8tode que realitza el echo / print . <?php namespace Dwes\\Videoclub\\Model ; use PHPUnit\\Framework\\TestCase ; use Dwes\\Videoclub\\Model\\CintaVideo ; class CintaVideoTest extends TestCase { public function testConstructor () { $cinta = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $this -> assertSame ( $cinta -> getNumero (), 23 ); } public function testMuestraResumen () { $cinta = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $resultado = \"<br>Pel\u00edcula en VHS:\" ; $resultado .= \"<br>Los cazafantasmas<br>3.5 (IVA no incluido)\" ; $resultado .= \"<br>Duraci\u00f3n: 107 minutos\" ; // definimos la expectativa $this -> expectOutputString ( $resultado ); // invocamos al m\u00e9todo que har\u00e1 echo $cinta -> muestraResumen (); } } Prove\u00efdors de dades \u00b6 Quan tenim proves que nom\u00e9s canvien respecte a les dades d'entrada i d'eixida, \u00e9s \u00fatil utilitzar prove\u00efdors de dades. Es declaren en el docblock mitjan\u00e7ant @dataProvider nombreMetodo , on s'indica el nom d'un m\u00e8tode p\u00fablic que retorna un array de arrays, on cada element \u00e9s un cas de prova. La classe de prova rep com a par\u00e0metres les dades a provar i el resultat de la prova com a \u00faltim par\u00e0metre. El seg\u00fcent exemple comprova amb diferents dades el funcionament de muestraResumen : <?php /** * @dataProvider cintasProvider */ public function testMuestraResumenConProvider ( $titulo , $id , $precio , $duracion , $esperado ) { $cinta = new CintaVideo ( $titulo , $id , $precio , $duracion ); $this -> expectOutputString ( $esperado ); $cinta -> muestraResumen (); } public function cintasProvider () { return [ \"cazafantasmas\" => [ \"Los cazafantasmas\" , 23 , 3.5 , 107 , \"<br>Pel\u00edcula en VHS:<br>Los cazafantasmas<br>3.5 \u20ac(IVA no incluido)<br>Duraci\u00f3n: 107 minutos\" ], \"superman\" => [ \"Superman\" , 24 , 3 , 188 , \"<br>Pel\u00edcula en VHS:<br>Superman<br>3 \u20ac (IVA no incluido)<br>Duraci\u00f3n: 188 minutos\" ], ]; } Provant excepcions \u00b6 Les proves a m\u00e9s de comprovar que les classes funcionen com s'espera, han de cobrir tots els casos possibles. Aix\u00ed doncs, hem de poder fer proves que esperen que es llance una excepci\u00f3 (i que el missatge continga una certa informaci\u00f3): Per a aix\u00f2, s'utilitzen les seg\u00fcent expectatives: expectException(Excepcion::class) expectExceptionCode(codigoExcepcion) expectExceptionMessage(missatge) De la mateixa manera que abans, primer es posa l'expectativa, i despr\u00e9s es provoca que es llance l'excepci\u00f3: <?php public function testAlquilarCupoLleno () { $soporte1 = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $soporte2 = new Juego ( \"The Last of Us Part II\" , 26 , 49.99 , \"PS4\" , 1 , 1 ); $soporte3 = new Dvd ( \"Origen\" , 24 , 15 , \"es,en,fr\" , \"16:9\" ); $soporte4 = new Dvd ( \"El Imperio Contraataca\" , 4 , 3 , \"es,en\" , \"16:9\" ); $cliente1 = new Cliente ( \"Bruce Wayne\" , 23 ); $cliente1 -> alquilar ( $soporte1 ); $cliente1 -> alquilar ( $soporte2 ); $cliente1 -> alquilar ( $soporte3 ); $this -> expectException ( CupoSuperadoException :: class ); $cliente1 -> alquilar ( $soporte4 ); } Cobertura de codi \u00b6 La cobertura de proves indica la quantitat de codi que les proves cobreixen, sent recomanable que cobrisquen entre el 95 i el 100%. Una de les m\u00e8triques associades als informes de cobertura \u00e9s el CRAP (An\u00e0lisi i Prediccions sobre el Risc en Canvis), el qual mesura la quantitat d'esfor\u00e7, dolor i temps requerit per a mantindre una porci\u00f3 de codi. Aquesta m\u00e8trica ha de mantindre's amb un valor inferior a 5. Requeriment xdebug Encara que ja ve instal\u00b7lat dins de PHPUnit, perqu\u00e8 funcione la cobertura del codi, \u00e9s necessari que el codi PHP s'execute amb XDEBUG, i i indicar-li a Apatxe que aix\u00ed \u00e9s (col\u00b7locant en l'arxiu de configuraci\u00f3 `php.ini`la directiva `xdebug.mode=coverage`). Afegim en composer.json un nou script : \"coverage\" : \"phpunit --coverage-html coverage --coverage-filter app tests\" I posteriorment executem composer coverage Per exemple, si accedim a la classe CintaVideo amb la prova que hav\u00edem realitzat anteriorment, podem observar la cobertura que t\u00e9 al 100% i que el seu CRAP \u00e9s 2. Informe de cobertura de la clase CintaVideo Temes pendents * Dependencia entre casos de prueba con el atributo `@depends` * Completamente configurable mediante el archivo `phpxml.xml`: <https://phpunit.readthedocs.io/es/latest/configuration.html> * Preparando las pruebas con `setUpBeforeClass()` y `tearDownAfterClass()` * Objetos y pruebas *Mock* (dobles) con `createMock()` Referencias \u00b6 Tutorial de Composer Web Scraping with PHP \u2013 How to Crawl Web Pages Using Open Source Tools PHP Monolog Unit Testing con PHPUnit \u2014 Parte 1 , de Emiliano Zublena. Activitats \u00b6 Monolog \u00b6 Crea un nou projecte amb Composer anomenat Monologos : Inclou com a llibreria l'\u00faltima versi\u00f3 de Monolog. Crea la classe Dwes\\Monologos\\HolaMonolog . Defineix una propietat privada nomenada miLog per a guardar el log. Defineix en el constructor un RotatingFileHandler que escriga en la carpeta logs del projecte, i que emmagatzeme els missatges a partir de debug . Crea els m\u00e8todes saludar i acomiadar que facen un log de tipus info amb l'acci\u00f3 corresponent. Seguint amb el projecte Monologos : Crea un arxiu anomenat inici.php que permeta provar HolaMonolog . Comprova que els missatges apareixen en el log . Canvia el nivell perqu\u00e8 el manejador nom\u00e9s mostre els missatges a partir de warning . Torna a ejectuar inici.php i comprova l'arxiu de log. Modifica la classe HolaMonolog : En el constructor, afig a la pila un manejador que escriga a l'eixida d'error conjunt al processador d'introspecci\u00f3, mostrant missatges des del nivell debug . Afig una propietat denominada hora , la qual s'inicialitza \u00fanicament com a par\u00e0metre del constructor. Si la hora \u00e9s inferior a 0 o major de 24, ha d'escriure un log de warning amb un missatge apropiat. Modifica els m\u00e8todes saludar i acomiadar per a fer-lo concorde a la propietat hora (bon dia, bona vesprada, fins dem\u00e0, etc...) Proyecto Videoclub IV \u00b6 Com ja tenim Composer instal\u00b7lat: Inicialitza-ho dins del teu projecte Videoclub Inclou Monolog i PhpUnit , cadascuna en el seu lloc adequat. Afig el autoload a l'arxiu composer.json , i feix els canvis necessaris en les classes per a utilitzar el autolloeu de Composer*. Puja els canvis a GitHub i crea l'etiqueta v0.511 . Modifica la classe Client per a introduir un Logger de Monolog . Afig el log com una propietat de la classe i inicialitza-ho en el constructor, amb el nom del canal VideoclubLogger . S'ha d'emmagatzemar en logs/videoclub.log mostrant tots els missatges des de debug . Abans de llan\u00e7ar qualsevol excepci\u00f3, ha d'escriure un log de tipus warning . Substituir els echo que hi haja en el codi, que ara passaran pel log amb el nivell info, a excepci\u00f3 del m\u00e8tode muestraResumen que continuar\u00e0 fent echo . Torna a fer el mateix que en l'exercici anterior, per\u00f2 ara amb la classe Videoclub . A m\u00e9s: Sempre que es cride a un m\u00e8tode del log, se li passar\u00e0 com a segon par\u00e0metre la informaci\u00f3 que disposem. Executa l'arxiu de prova i comprova que el log s'emplena correctament. REFACTORITZAREM el codi com\u00fa d'inicialitzaci\u00f3 de Monolog que tenim repetits en els constructors a una factoria de Monolog , la qual col\u00b7locarem en \\Dwes\\Videoclub\\Util\\LogFactory . Comprova que continua funcionant correctament. Modifica la factoria perqu\u00e8 retorne LogInterface i comprova que continua funcionant. Puja els canvis a GitHub amb l'etiqueta v0.515 . phpDocumentor \u00b6 Comprova que en el contenidor de Docker funciona phpDocumentor . Executa phpdoc sobre el teu projecte Monolog i comprova el api que es crea. Comenta tant la classe com els m\u00e8todes, i posteriorment, torna a executar phpdoc. Documenta el projecte Videoclub*, i genera la documentaci\u00f3. Comen\u00e7a per les classes de Suport i els seus fills. Comprova el resultat. Despr\u00e9s segueix amb Client i finalment Videoclub . Web Scraping \u00b6 A partir de les dades de http://www.seleccionbaloncesto.es , calcula l'altura i edat mitjana de l'equip de b\u00e0squet mascul\u00ed. Observa que tens les dades dins d'una taula davall de les not\u00edcies. Tornant al Videoclub, en Suport afig una propietat anomenada metacritic per a emmagatzemar la URL de cada suport. A continuaci\u00f3, modifica els m\u00e8todes incluirXXX de Videoclub perqu\u00e8 admeten com a primer par\u00e0metre aquesta URL. Despr\u00e9s d'aix\u00f2, modifica el fitxer inicio3.php per a passar-li la URL de cada suport (per a aix\u00f2 haur\u00e0s de consultar-los en Metacritic fent cerques manuals). Per exemple, en el cas de la pel\u00b7l\u00edcula Cazafantasmas, la seua URL \u00e9s https://www.metacritic.com/movie/ghostbusters . Finalment, afig un m\u00e8tode abstracte en Suport anomenat getPuntuacion , que fent \u00fas de Web Scraping es connecte a Metacritic* i obtinga la seua puntuaci\u00f3. Modifica inicio3.php per a obtindre tots els lloguers d'un client mitjan\u00e7ant getAlquileres() : array , i per a cadascun d'ells, a m\u00e9s del t\u00edtol, mostra la seua puntuaci\u00f3. phpUnit \u00b6 A partir de la classe HolaMonolog , modifica els m\u00e8todes perqu\u00e8 a m\u00e9s d'escriure en en log, retornen la salutaci\u00f3 com una cadena. Crea la classe HolaMonologTest i afig diferents casos de prova per a comprovar que les salutacions i comiats s\u00f3n concordes a l'hora amb la qual es crea la classe. Simularem Test Driven Development*. Volem que la nostra aplicaci\u00f3 emmagatzeme els \u00faltims tres salutacions que ha realitzat. Per a aix\u00f2: Crea les prova necess\u00e0ries (invoca al m\u00e8tode saludar diverses vegades i crida al m\u00e8tode que et retorne les salutacions emmagatzemades) Implementa el codi per a passar les proves refactoritza el codi Crea una nova prova que utilitze prove\u00efdors de dades per a comprovar aquesta \u00faltima funcionalitat, passant-li: * Una salutaci\u00f3. * Tres salutacions. * Quatre salutacions. Recordes que si l'hora \u00e9s negativa o superior a 24 escriv\u00edem en el log un *warning? Ara ha de llan\u00e7ar una excepci\u00f3 de tipus InvalidArgumentException (com l'excepci\u00f3 forma per a de PHP, cal posar la seua FQN: \\InvalidArgumentException ). Torna a aplicar TDD i completa els teus casos de prova. Comenta l'\u00faltima prova realitzada (la comprovaci\u00f3 de les excepcions) i realitza un informe de cobertura de proves. Analitza els resultats obtinguts. Elimina els \u00faltims comentaris sobre l'\u00faltima prova i torna a generar i analitzar l'informe de cobertura. Projecte Videoclub V \u00b6 L'objectiu dels seg\u00fcents exercicis \u00e9s aconseguir de manera incremental una cobertura de proves superior al 95%. Crea proves dins de la carpeta tests per a les classes Suport , CintaVideo , Dvd i Joc . Recorda respectar l'espai de noms. Els m\u00e8todes muestraResumen , despr\u00e9s de fer tire dels missatges, han de retornar una cadena amb el propi missatge. Crea proves per a la classe Client , aprofitant tot el codi que ten\u00edem per a comprovar la funcionalitat. Utilitza prove\u00efdors de dades per a afegir conjunts de dades majors que els empleats. Comprova que funciona amb diferents contingents, que en intentar llogar un suport marcat com ja llogat ha de llan\u00e7ar una excepci\u00f3, que no coincidisquen els ids dels suports, etc... Crea les proves per a la classe Videoclub . Tingues en compte els \u00faltims m\u00e8todes afegits que permetien llogar i retornar suports, tant de manera individual com mitjan\u00e7ant un array. Crea l'informe de cobertura. Una vegada creat, analitza les dades de cobertura (>= 90%) i comprova el valor de CRAP, de manera que sempre siga <= 5. En cas de no complir-se, crea nous casos de prova i/o refactoritza el codi de la teua aplicaci\u00f3. Puja els canvis a GitHub amb l'etiqueta v0.554 . Ampliaci\u00f3 \u00b6 Volem que en Videoclub , quan un client no existeix (tant en llogar com en retornar) es llance una nova excepci\u00f3: ClienteNoExisteException . A m\u00e9s, donat el nombre creixent d'excepcions, volem moure les excepcions al namespace Dwes\\Videoclub\\Exception . Seguint TDD, primer crea les proves, i despr\u00e9s modifica el codi d'aplicaci\u00f3. Torna a generar l'informe de cobertura i comprova la qualitat de les nostres proves. Ning\u00fa s'ha adonat que en els Dvd no estem emmagatzemant la seua duraci\u00f3? Fes tots els canvis necessaris, primer en les proves i despr\u00e9s en el codi. Despr\u00e9s d'anys lluitant contra la tecnologia, decidim introduir els Blu-ray en la nostra empresa. Hem decidisc que Bluray herete de Suport . A m\u00e9s del t\u00edtol i la duracion , ens interessa emmagatzemar si es4k . Fes tots els canvis necessaris, primer en les proves i despr\u00e9s en el codi. Puja els canvis a GitHub amb l'etiqueta v0.563 .","title":"5.- Ferramentes Web"},{"location":"05herramientas.html#ferramentes","text":"Duraci\u00f3 y criteris d'avaluaci\u00f3 Duraci\u00f3 estimada: 16 hores Resultat d'aprenentatge Criteris d'avaluaci\u00f3 4.- Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. g) Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo. En aquesta unitat estudiarem algunes de les eines m\u00e9s utilitzades en PHP.","title":"Ferramentes"},{"location":"05herramientas.html#composer","text":"Logo Composer Eina per excel\u00b7l\u00e8ncia en PHP per a la gesti\u00f3 de llibreries i depend\u00e8ncies, de manera que instal\u00b7la i les actualitza assegurant que tot l'equip de desenvolupament t\u00e9 el mateix entorn i versions. A m\u00e9s, ofereix autoloading del nostre codi, de manera que no h\u00e0gem de fer-lo nosaltres \"a m\u00e0\". Est\u00e0 escrit en PHP, i podeu consultar tota la seua documentaci\u00f3 en https://getcomposer.org/ . Utilitza Packagist com a repositori de llibreries. Funcionalment, \u00e9s similar a Maven (Java) / npm (JS).","title":"Composer"},{"location":"05herramientas.html#installacio","text":"Si estem usant XAMPP, hem d'instal\u00b7lar Composer en el propi sistema operatiu. Es recomana seguir les instruccions oficials segons el sistema operatiu a emprar. En canvi, si usem Docker , necessitem modificar la configuraci\u00f3 del nostre contenidor. En el nostre cas, hem decidit modificar l'arxiu Dockerfile i afegir el seg\u00fcent comando: COPY --from = composer:2.0 /usr/bin/composer /usr/local/bin/composer Per a facilitar el treball, hem creat una plantilla ja preparada . \u00c9s important que dins del contenidor comprovem que tenim la v2: composer -V","title":"Instal\u00b7laci\u00f3"},{"location":"05herramientas.html#primers-passos","text":"Quan creem un projecte per primera vegada, hem d'inicialitzar el repositori. Per a aix\u00f2, executarem el comando composer init on: Configurem el nom del paquet, descripci\u00f3, autor (nom ), tipus de paquet (project), etc... Definim les depend\u00e8ncies del projecte ( require ) i les de desenvolupament ( require-dev ) de manera interactiva. En les de desenvolupament s'indica aquelles que no s'instal\u00b7laran a l'entorn de producci\u00f3, per exemple, les llibreries de proves. Despr\u00e9s de la seua configuraci\u00f3, es crear\u00e0 autom\u00e0ticament l'arxiu composer.json amb les dades introdu\u00efdes i desc\u00e0rrega les llibreries en la carpeta vendor . La instal\u00b7laci\u00f3 de les llibreries sempre es realitza de manera local per a cada projecte. { \"name\" : \"dwes/log\" , \"description\" : \"Pruebas con Monolog\" , \"type\" : \"project\" , \"require\" : { \"monolog/monolog\" : \"^2.1\" }, \"license\" : \"MIT\" , \"authors\" : [ { \"name\" : \"Aitor Medrano\" , \"email\" : \"a.medrano@edu.gva.es\" } ] } A l'hora d'indicar cada llibreria introduirem: el nom de la llibreria, composta tant pel creador o \"vendor\", com pel nom del projecte. Exemples: monolog/monolog o laravel/installer . la versi\u00f3 de cada llibreria. Tenim diverses opcions per a indicar-la: Directament: 1.4.2 Amb comodins: 1. A partir de: >= 2.0.3 Sense trencament de canvis: ^1.3.2 // >=1.3.2 <2.0.0","title":"Primers passos"},{"location":"05herramientas.html#actualitzar-llibreries","text":"Podem definir les depend\u00e8ncies via l'arxiu composer.json o mitjan\u00e7ant comandos amb el format composer require vendor/package:version . Per exemple, si volem afegir phpUnit com a llibreria de desenvolupament, farem: composer require phpunit/phpunit \u2013dev Despr\u00e9s d'afegir noves llibreries, hem d'actualitzar el nostre projecte: composer update Si creem l'arxiu composer.json nosaltres directament sense inicialitzar el repositori, hem d'instal\u00b7lar les depend\u00e8ncies: composer install En fer aquest pas (tant instal\u00b7lar com actualitzar), com ja hem comentat, es descarreguen les llibreries en dins de la carpeta vendor . \u00c9s molt important afegir aquesta carpeta a l'arxiu .gitignore per a no pujar-les a GitHub. A m\u00e9s es crea l'arxiu composer.lock , que emmagatzema la versi\u00f3 exacta que s'ha instal\u00b7lat de cada llibreria (aquest arxiu no es toca).","title":"Actualitzar llibreries"},{"location":"05herramientas.html#autoloadphp","text":"Composer crea de manera autom\u00e0tica en vendor/autoload.php el codi per a incloure de manera autom\u00e0tica totes les llibreries que tinguem configurades en composer.json . Per a utilitzar-ho, en la cap\u00e7alera del nostre arxius posarem: <?php require 'vendor/autoload.php' ; En el nostre cas, de moment nom\u00e9s el podrem en els arxius on provem les classes Si volem que Composer tamb\u00e9 s'encarregue de carregar de manera autom\u00e0tica les nostres classes de domini, dins de l'arxiu composer.json , definirem la propietat autoload : \"autoload\" : { \"psr-4\" : { \"Dwes\\\\\" : \"app/Dwes\" } }, Posteriorment, hem de tornar a generar el autoload de Composer mitjan\u00e7ant l'opci\u00f3 dump-autoload (o du ): composer dump-autoload","title":"autoload.php"},{"location":"05herramientas.html#monolog","text":"Provarem Composer afegint la llibreria de Monolog al nostre projecte. Es tracta d'un llibreria per a la gesti\u00f3 de logs de les nostres aplicacions, suportant diferents nivells (info, warning, etc...), eixides (fitxers, sockets, BBDD, Web Services, email, etc) i formats (text pla, HTML, JSON, etc...). Per a aix\u00f2, inclourem la llibreria en el nostre projecte amb: composer require monolog/monolog Monolog 2 requereix almenys PHP 7.2, compleix amb el estandar de logging PSR-3, i \u00e9s la llibreria emprada per Laravel i Symfony per a la gesti\u00f3 de logs. Quan usar un log Seguir les acciones/moviments dels usuaris Registrar les transaccions Rastrejar els errors d'usuari Fallades/avisos a nivell de sistema Interpretar i col\u00b7leccionar dades per a posterior investigaci\u00f3 de patrons","title":"Monolog"},{"location":"05herramientas.html#nivells","text":"A continuaci\u00f3 vam mostrar els diferents nivells de menys a m\u00e9s restrictiu: * *debug -100*: Informaci\u00f3 detallada amb prop\u00f2sits de debug. No usar en entorns de producci\u00f3. * *info - 200*: Esdeveniments interessants com l'inici de sessi\u00f3 d'usuaris. * *notice - 250*: Esdeveniments normals per\u00f2 significatius. * *warning - 300*: Ocurr\u00e8ncies excepcionals que no arriben a ser error. * error - 400*: Errors d'execuci\u00f3 que permeten continuar amb l'execuci\u00f3 de l'aplicaci\u00f3 per\u00f2 que han de ser monitorats. * *critical - 500*: Situacions importants on es generen excepcions no esperades o no hi ha disponible un component. * *alert - 550*: S'han de prendre mesures immediatament. Caiguda completa de la web, base de dades no disponible, etc... A m\u00e9s, se solen enviar missatges per email. * *emergency - 600*: \u00c9s l'error m\u00e9s greu i indica que tot el sistema est\u00e0 inutilitzable.","title":"Nivells"},{"location":"05herramientas.html#hola-monolog","text":"Per exemple, en l'arxiu pruebaLog.php que col\u00b7locar\u00edem en l'arrel, primer incloem el autoload , importem els classes a utilitzar per a finalment usar els m\u00e8todes de Monolog : <?php include __DIR__ . \"/vendor/autoload.php\" ; use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; $log = new Logger ( \"MiLogger\" ); $log -> pushHandler ( new StreamHandler ( \"logs/milog.log\" , Logger :: DEBUG )); $log -> debug ( \"Esto es un mensaje de DEBUG\" ); $log -> info ( \"Esto es un mensaje de INFO\" ); $log -> warning ( \"Esto es un mensaje de WARNING\" ); $log -> error ( \"Esto es un mensaje de ERROR\" ); $log -> critical ( \"Esto es un mensaje de CRITICAL\" ); $log -> alert ( \"Esto es un mensaje de ALERT\" ); En tots els m\u00e8todes de registre de missatges ( debug , info , ...), a m\u00e9s del propi missatge, li podem passar informaci\u00f3 com el contingut d'alguna variable, usuari de l'aplicaci\u00f3, etc.. com a segon par\u00e0metre dins d'un array, el qual es coneix com array de context . \u00c9s convenient fer-ho mitjan\u00e7ant un array associatiu per a facilitar la lectura del log. <?php $log -> warning ( \"Producto no encontrado\" , [ $producto ]); $log -> warning ( \"Producto no encontrado\" , [ \"datos\" => $producto ]);","title":"Hola Monolog"},{"location":"05herramientas.html#funcionament","text":"Cada inst\u00e0ncia Logger t\u00e9 un nom de canal i una pila de manejadores ( handler ). Cada missatge que manem al log travessa la pila de manejadores, i cadascun decideix si ha de registrar la informaci\u00f3, i si es dona el cas, finalitzar la propagaci\u00f3. Per exemple, un StreamHandler en el fons de la pila que ho escriga tot en disc, i en el topall afig un MailHandler que envie un mail nom\u00e9s quan hi haja un error.","title":"Funcionament"},{"location":"05herramientas.html#manejadores","text":"Cada manejador tambien t\u00e9 un formateador ( Formatter ). Si no s'indica cap, se li assigna un per defecte. L'\u00faltim manejador inserit ser\u00e0 el primer a executar-se. Despr\u00e9s es van executant* conforme a la pila. Els manejadores m\u00e9s utilitzats s\u00f3n: StreamHandler(ruta, nivel) RotatingFileHandler(ruta, maxFiles, nivel) NativeMailerHandler(para, asunto, desde, nivel) FirePHPHandler(nivel) Si volem que els missatges de l'aplicaci\u00f3 isquen pel log del servidor, en el nostre cas l'arxiu error.log de Apatxe* utilitzarem com a ruta l'eixida d'error: <?php // error.log $log -> pushHandler ( new StreamHandler ( \"php://stderr\" , Logger :: DEBUG )); FirePHP Per exemple, mitjan\u00e7ant FirePHPHandler , podem utilitzar FirePHP , la qual \u00e9s una eina per a fer debug en la consola de Firefox . Despr\u00e9s d'instal\u00b7lar l'extensi\u00f3 en Firefox, habilitar les opcions i configurar el Handler*, podem veure els missatges acolorits amb les seues dades: <?php $log = new Logger ( \"MiFirePHPLogger\" ); $log -> pushHandler ( new FirePHPHandler ( Logger :: INFO )); $datos = [ \"real\" => \"Bruce Wayne\" , \"personaje\" => \"Batman\" ]; $log -> debug ( \"Esto es un mensaje de DEBUG\" , $datos ); $log -> info ( \"Esto es un mensaje de INFO\" , $datos ); $log -> warning ( \"Esto es un mensaje de WARNING\" , $datos ); // ... Ejemplo de uso de FirePHP","title":"Manejadores"},{"location":"05herramientas.html#canales","text":"Se'ls assigna en crear el Logger . En grans aplicacions, es crea un canal per cada subsistema: vendes, comptabilitat, magatzem. No \u00e9s una bona pr\u00e0ctica usar el nom de la classe com a canal, aix\u00f2 es fa amb un processador*. Per al seu \u00fas, \u00e9s recomane assignar el log a una propietat privada a Logger, i posteriorment, en el constructor de la classe, assignar el canal, manejadores i format. <?php $this -> log = new Logger ( \"MiApp\" ); $this -> log -> pushHandler ( new StreamHandler ( \"logs/milog.log\" , Logger :: DEBUG )); $this -> log -> pushHandler ( new FirePHPHandler ( Logger :: DEBUG )); I dins dels m\u00e8todes per a escriure en el log: <?php $this -> log -> warning ( \"Producto no encontrado\" , [ $producto ]);","title":"Canales"},{"location":"05herramientas.html#processadors","text":"Els processadors permeten afegir informaci\u00f3 als missatges. Per a aix\u00f2, s'apilen despr\u00e9s de cada manejador mitjan\u00e7ant el m\u00e8tode pushProcessor($processador) . Alguns processadors coneguts s\u00f3n IntrospectionProcessor (mostren la l\u00ednia, fitxer, classe i metodo des del qual s'invoca el log), WebProcessor (afig la URI, m\u00e8tode i IP) o GitProcessor (afig la branca i el commit). PHP Consola en format text <?php $log = new Logger ( \"MiLogger\" ); $log -> pushHandler ( new RotatingFileHandler ( \"logs/milog.log\" , 0 , Logger :: DEBUG )); $log -> pushProcessor ( new IntrospectionProcessor ()); $log -> pushHandler ( new StreamHandler ( \"php://stderr\" , Logger :: WARNING )); // no usa Introspection pq lo hemos apilado despu\u00e9s, le asigno otro $log -> pushProcessor ( new WebProcessor ()); [2020-11-26T13:35:31.076138+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":12,\"class\":null,\"function\":null} [2020-11-26T13:35:31.078344+01:00] MiLogger.INFO: Esto es un mensaje de INFO [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":13,\"class\":null,\"function\":null}","title":"Processadors"},{"location":"05herramientas.html#formateadores","text":"S'associen als manejadores amb setFormatter . Els formateadores m\u00e9s utilitzats s\u00f3n LineFormatter , HtmlFormatter o JsonFormatter . PHP Consola en JSON <?php $log = new Logger ( \"MiLogger\" ); $rfh = new RotatingFileHandler ( \"logs/milog.log\" , Logger :: DEBUG ); $rfh -> setFormatter ( new JsonFormatter ()); $log -> pushHandler ( $rfh ); { \"message\" : \"Esto es un mensaje de DEBUG\" , \"context\" :{}, \"level\" : 100 , \"level_name\" : \"DEBUG\" , \"channel\" : \"MiLogger\" , \"datetime\" : \"2020-11-27T15:36:52.747211+01:00\" , \"extra\" :{}} { \"message\" : \"Esto es un mensaje de INFO\" , \"context\" :{}, \"level\" : 200 , \"level_name\" : \"INFO\" , \"channel\" : \"MiLogger\" , \"datetime\" : \"2020-11-27T15:36:52.747538+01:00\" , \"extra\" :{}} M\u00e9s informaci\u00f3 M\u00e9s informaci\u00f3 sobre manejadores, formateadores i processadors en https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md","title":"Formateadores"},{"location":"05herramientas.html#us-de-factories","text":"En comptes de instanciar un log en cada classe, \u00e9s convenient crear una factoria (per exemple, seguint la idea del patr\u00f3 de disseny Factory Method ). Per al seg\u00fcent exemple, suposarem que creguem la factoria en el namespace Dwes\\Exemples\\Util . <?php namespace Dwes\\Ejemplos\\Util use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; class LogFactory { public static function getLogger ( string $canal = \"miApp\" ) : Logger { $log = new Logger ( $canal ); $log -> pushHandler ( new StreamHandler ( \"logs/miApp.log\" , Logger :: DEBUG )); return $log ; } } Si en comptes de retornar un Monolog\\Logger utilitzem la interf\u00edcie de PSR, si en el futur canviem la implementaci\u00f3 del log, no haurem de modificar nostre codigo. Aix\u00ed doncs, la factoria ara retornar\u00e0 Psr\\Log\\LoggerInterface : <?php namespace Dwes\\Ejemplos\\Util use Monolog\\Handler\\StreamHandler ; use Monolog\\Logger ; use Psr\\Log\\LoggerInterface ; class LogFactory { public static function getLogger ( string $canal = \"miApp\" ) : LoggerInterface { $log = new Logger ( $canal ); $log -> pushHandler ( new StreamHandler ( \"log/miApp.log\" , Logger :: DEBUG )); return $log ; } } Finalment, per a utilitzar la factoria, nom\u00e9s canviem el codi que ten\u00edem en el constructor de les classes que usen el log, quedant alguna cosa asi: <?php namespace Dwes\\Ejemplos\\Model ; use Dwes\\Ejemplos\\Util\\LogFactory ; use Monolog\\Logger ; class Cliente { private $codigo ; private Logger $log ; function __construct ( $codigo ){ $this -> codigo = $codigo ; $this -> log = LogFactory :: getLogger (); } /// ... resto del c\u00f3digo }","title":"\u00das de Factories"},{"location":"05herramientas.html#documentacion-con-phpdocumentor","text":"phpDocumentor \u00e9s l'eina per a documentar el codi PHP. \u00c9s similar en prop\u00f2sit i funcionament a Javadoc . Aix\u00ed doncs, \u00e9s un eina que facilita la documentaci\u00f3 del codi PHP, creant un lloc web amb l'API de l'aplicaci\u00f3. Es basa en l'\u00fas d'anotacions sobre els docblocks. Per a posar-ho en marxa, en el nostre cas ens decantarem per utilitzar la imatge que ja existeix de Docker.","title":"Documentaci\u00f3n con phpDocumentor"},{"location":"05herramientas.html#installacio-com-a-binari","text":"Una altra opci\u00f3 \u00e9s seguir els passos que recomana la documentaci\u00f3 oficial per a instal\u00b7lar-ho com un executable, que s\u00f3n descarregar l'arxiu phpDocumentor.phar i donar-los permisos d'execuci\u00f3: wget https://phpdoc.org/phpDocumentor.phar chmod +x phpDocumentor.phar mv phpDocumentor.phar /usr/local/bin/phpdoc phpdoc --version Una vegada instal\u00b7lat, des de l'arrel del projecte, suposant que tenim el nostre codi dins de app i que volem la documentaci\u00f3 dins de docs/api executem: phpdoc -d ./app -t docs/api","title":"Instal\u00b7laci\u00f3 com a binari"},{"location":"05herramientas.html#us-en-docker","text":"En el cas d'usar Docker , usarem el seg\u00fcent comando per a executar-lo (crea el contenidor, executa el comando que li demanem, i autom\u00e0ticament l'esborra): docker run --rm -v \" $( pwd ) \" :/data phpdoc/phpdoc:3 A aquest comando, li adjuntarem els diferents par\u00e0metres que admet phpDocumentor, per exemple: # Muestra la versi\u00f3n docker run --rm -v \" $( pwd ) \" :/data phpdoc/phpdoc:3 --version # Mediante -d se indica el origen a parsear # Mediante -t se indica el destino donde generar la documentaci\u00f3n docker run --rm -v \" $( pwd ) \" :/data phpdoc/phpdoc:3 -d ./src/app -t ./docs/api","title":"\u00das en Docker"},{"location":"05herramientas.html#docblock","text":"Un docblock \u00e9s el bloc de codi que es col\u00b7loca damunt d'un recurs. El seu format \u00e9s: <?php /** * Sumari*, una sola l\u00ednia * Descripci\u00f3* que pot utilitzar diverses l\u00ednies * i que ofereix detalls de l'element o refer\u00e8ncies * per a ampliar la informaci\u00f3 * @param string $miArgumento amb una descripci\u00f3* de l'argument * que pot usar diverses l\u00ednies. * @return void */ function miFuncion ( tipo $miArgumento ) { }","title":"DocBlock"},{"location":"05herramientas.html#documentant-el-codi","text":"En tots els elements, ademas del sumari i/o descripci\u00f3, posarem: En les classes: @author nom @package ruta del namespace En les propietats: @var tipus descripci\u00f3 En els m\u00e8todes: @param tipus $nomene descripci\u00f3 @throws ClaseException descripci\u00f3 @return tipus descripci\u00f3 Vegem-ho amb un exemple. Suposem que tenim una classe que representa un client: <?php /** * Classe que representa un client * * El client s'encarrega d'emmagatzemar els suports que t\u00e9 llogat, * de manera que podem llogar i retornar productes mitjan\u00e7ant les operacions * hom\u00f2nimes. * * @package Dwes\\Videoclub\\Model * @author Aitor Medrano <a.medrano@edu.gva.es> */ class Cliente { public string $nombre ; private string $numero ; /** * Colecci\u00f3 de soports alquilats * @var array<Soporte> */ private $soportesAlquilados []; /* * Comprova si el suport rebut ja el t\u00e9 llogat el client * @ param Suport $suporte Suport a comprovar * @ return bool true si ho t\u00e9 llogat / public function tieneAlquilado ( Soporte $soporte ) : bool { // ... } Si generem la documentaci\u00f3 i obrim amb un navegador l'arxiu docs/api/index.html podrem navegar fins a la classe `Client: phpDocumentor de Cliente","title":"Documentant el codi"},{"location":"05herramientas.html#web-scraping","text":"Consisteix a navegar a una p\u00e0gina web i extraure informaci\u00f3 autom\u00e0ticament, a partir del codi HTML generat, i organitzar la informaci\u00f3 p\u00fablica disponible en Internet. Aquesta pr\u00e0ctica requereix l'\u00fas d'una llibreria que facilite la desc\u00e0rrega de la informaci\u00f3 desitjada imitant la interacci\u00f3 d'un navegador web. Aquest \"robot\" pot accedir a diverses p\u00e0gines simult\u00e0niament. \u00bf\u00c9s legal? Si el lloc web indica que t\u00e9 el contingut protegit per drets d'autor o en les normes d'acc\u00e9s via usuari/contrasenya ens avisa de la seua prohibici\u00f3, estar\u00edem incorrent en un delicte. \u00c9s recomanable estudiar l'arxiu robots.txt que es troba en l'arrel de cada lloc web. M\u00e9s informaci\u00f3 en l'article El manual complet per al web scraping legal i \u00e8tic en 2021","title":"Web Scraping"},{"location":"05herramientas.html#goutte","text":"Goutte \u00e9s un senzill client HTTP per a PHP creat espec\u00edficament per a fer web scraping. Ho va desenvolupar el mateix autor del framework Symfony i ofereix un API senzilla per a extraure dades de les respostes HTML/XML dels llocs web. FIXME: Revisar https://godofredo.ninja/web-scraping-amb-php-utilitzant-goutte/ Els components principals que abstrau Goutte sobre Symfony s\u00f3n: BrowserKit : simula el comportament d'un navegador web. CssSelector : tradueix consultes CSS en consultes XPath. DomCrawler : facilita l'\u00fas del DOM i XPath. Per a poder utilitzar Goutte en el nostre projecte, executarem el seg\u00fcent comando en el terminal: composer require fabpot/goutte","title":"Goutte"},{"location":"05herramientas.html#goutte-con-selectores-css","text":"A continuaci\u00f3 farem un exemple molt senzill utilitzant els selectors CSS, extraient informaci\u00f3 de la web https://books.toscrape.com/ , la qual \u00e9s una p\u00e0gina per a proves que no rebutjar\u00e0 les nostres peticions. Despr\u00e9s de crear un client amb Goutte , hem de realitzar un petici\u00f3 a una URL. Amb la resposta obtinguda, podem utilitzar el m\u00e8tode filter per a indicar-li la ruta CSS que volem rec\u00f3rrer i iterar sobre els resultats mitjan\u00e7ant una funci\u00f3 an\u00f2nima. Una vegada estem dins d'un determinat node, el m\u00e8tode text() ens retornar\u00e0 el contingut del propi node. En concret, ficarem en un array associatiu el t\u00edtol i el preu de tots els llibres de la categoria Classics . <?php require '../vendor/autoload.php' ; $httpClient = new \\Goutte\\Client (); $response = $httpClient -> request ( 'GET' , 'https://books.toscrape.com/catalogue/category/books/classics_6/index.html' ); // colocamos los precios en un array $precios = []; $response -> filter ( '.row li article div.product_price p.price_color' ) -> each ( // le pasamos $precios por referencia para poder editarla dentro del closure function ( $node ) use ( & $precios ) { $precios [] = $node -> text (); } ); // colocamos el nombre y el precio en un array asociativo $contadorPrecios = 0 ; $libros = []; $response -> filter ( '.row li article h3 a' ) -> each ( function ( $node ) use ( $precios , & $contadorPrecios , & $libros ) { $libros [ $node -> text ()] = $precios [ $contadorPrecios ]; $contadorPrecios ++ ; } );","title":"Goutte con selectores CSS"},{"location":"05herramientas.html#crawler","text":"Un cas molt com\u00fa \u00e9s obtindre la informaci\u00f3 d'una p\u00e0gina que t\u00e9 els resultats paginados, de manera que anem recorrent els enlla\u00e7os i accedint a cadascun dels resultats. En aquest cas agafarem tots els preus dels llibres de fantasia, i els sumarem: <?php require '../vendor/autoload.php' ; use Goutte\\Client ; use Symfony\\Component\\HttpClient\\HttpClient ; $client = new Client ( HttpClient :: create ([ 'timeout' => 60 ])); $crawler = $client -> request ( 'GET' , 'https://books.toscrape.com/catalogue/category/books/fantasy_19/index.html' ); $salir = false ; $precios = []; while ( ! $salir ) { $crawler -> filter ( '.row li article div.product_price p.price_color' ) -> each ( function ( $node ) use ( & $precios ) { $texto = $node -> text (); $cantidad = substr ( $texto , 2 ); // Le quitamos las libras \u00bf2 posiciones? $precios [] = floatval ( $cantidad ); } ); $enlace = $crawler -> selectLink ( 'next' ); if ( $enlace -> count () != 0 ) { // el enlace next existe $sigPag = $crawler -> selectLink ( 'next' ) -> link (); $crawler = $client -> click ( $sigPag ); // hacemos click } else { // ya no hay enlace next $salir = true ; } } $precioTotal = array_sum ( $precios ); echo $precioTotal ;","title":"Crawler"},{"location":"05herramientas.html#proves-amb-phpunit","text":"El curs passat, dins del m\u00f2dul de Entorns de Desenvolupament*, estudiarieu la import\u00e0ncia de la realitzaci\u00f3 de proves, aix\u00ed com les proves unit\u00e0ries mitjan\u00e7ant JUnit . Test Driven Development Hui dia \u00e9s de gran import\u00e0ncia seguir una bona metodologia de proves, sent el desenvolupament dirigit per les proves (Test Driven Development* / TDD) un dels enfocaments m\u00e9s emprats, el qual consisteix en: Escriure el test, i com no hi ha codi implementat, la prova falle (roig). Escriure el codi d'aplicaci\u00f3 perqu\u00e8 la prova funcione (verda). refactoritzar el codi de l'aplicaci\u00f3 amb l'ajuda de la prova per a comprovar que no trenquem res (refactor). En el cas de PHP, l'eina que s'utilitza \u00e9s PHPUnit ( https://phpunit.de/ ), que com el seu nom indica, est\u00e0 basada en JUnit. La versi\u00f3 actual \u00e9s la 9.0 Es recomana consultar la seua documentaci\u00f3 en https://phpunit.readthedocs.io/es/latest/index.html .","title":"Proves amb PHPUnit"},{"location":"05herramientas.html#posada-en-marxa","text":"Col\u00b7locarem totes les proves en una carpeta tests en l'arrel del nostre projecte. En l'arxiu composer.json , afegim: \"require-dev\" : { \"phpunit/phpunit\" : \"^9\" }, \"scripts\" : { \"test\" : \"phpunit --testdox --colors tests\" } Si volgu\u00e9rem afegir la llibreria des d'un comando del terminal, tamb\u00e9 podr\u00edem executar: composer require --dev phpunit/phpunit ^9 Llibreries de desenvolupament Les llibreries que es col\u00b7loquen en require-dev s\u00f3n les de desenvolupament i testing , de manera que no s'instal\u00b7laran en un entorn de producci\u00f3. Com hem creat un script , podem llan\u00e7ar les proves mitjan\u00e7ant: composer test Vasmos a realitzar la nostra primera prova: <?php use PHPUnit\\Framework\\TestCase ; class PilaTest extends TestCase { public function testPushAndPop () { $pila = []; $this -> assertSame ( 0 , count ( $pila )); array_push ( $pila , 'batman' ); $this -> assertSame ( 'batman' , $pila [ count ( $pila ) - 1 ]); $this -> assertSame ( 1 , count ( $pila )); $this -> assertSame ( 'batman' , array_pop ( $pila )); $this -> assertSame ( 0 , count ( $pila )); } } Tenim diferents maneres d'executar una prova: ./vendor/bin/phpunit tests/PilaTest.php ./vendor/bin/phpunit tests ./vendor/bin/phpunit --testdox tests ./vendor/bin/phpunit --testdox --colors tests","title":"Posada en marxa"},{"location":"05herramientas.html#dissenyant-proves","text":"Tal com hem vist en l'exemple, la classe de prova ha d'heretar de TestCase , i el nom de la classe ha d'acabar en Test , d'aqu\u00ed ve que h\u00e0gem anomenat la classe de prova com PilaTest . Una prova implica un m\u00e8tode de prova (p\u00fablic) per cada funcionalitat a provar. Cada un dels m\u00e8todes se'ls associa un cas de prova. Els m\u00e8todes han de nomenar-se amb el prefix test , per exemple, testPushAndPop . \u00c9s molt important que el nom siga molt clar i descriptiu del prop\u00f2sit de la prova. (*camelCase). En els casos de prova prepararem diverses assercions per a tota la casu\u00edstica: rangs de valors, tipus de dades, excepcions, etc...","title":"Dissenyant proves"},{"location":"05herramientas.html#assercions","text":"Les assercions permeten comprovar el resultat dels m\u00e8todes que volem provar. Les assercions esperen que el predicat sempre siga vertader. PHPUnit ofereix les seg\u00fcent assercions: assertTrue / assertFalse : Comprova que la condici\u00f3 donada siga avaluada com true / false assertEquals / assertSame : Comprova que dues variables siguen iguals assertNotEquals / assertNotSame : Comprova que dues variables NO siguen iguals Same \u2192 comprova els tipus. Si no coincideixen els tipus i els valors, l'asserci\u00f3 fallar\u00e0 Equals \u2192 sense comprovaci\u00f3 estricta assertArrayHasKey / assertArrayNotHasKey : Comprova que un array posse\u00efsca un key determinat / o NO ho posse\u00efsca assertArraySubset : Comprova que un array posse\u00efsca un altre array com subset del mateix assertAttributeContains / assertAttributeNotContains : Comprova que un atribut d'una classe continga una variable determinada / o NO continga una variable determinada assertAttributeEquals : Comprova que un atribut d'una classe siga igual a una variable determinada.","title":"Assercions"},{"location":"05herramientas.html#comparant-leixida","text":"Si els m\u00e8todes a provar generen contingut mitjan\u00e7ant echo o una instrucci\u00f3 similar, disposem de les seg\u00fcent expectatives: expectOutputString(salidaEsperada) expectOutputRegex(expresionRegularEsperada) Les expectatives difereixen de les assercions que informen del resultat que s'espera abans d'invocar al m\u00e8tode. Despr\u00e9s de definir l'expectativa, s'invoca al m\u00e8tode que realitza el echo / print . <?php namespace Dwes\\Videoclub\\Model ; use PHPUnit\\Framework\\TestCase ; use Dwes\\Videoclub\\Model\\CintaVideo ; class CintaVideoTest extends TestCase { public function testConstructor () { $cinta = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $this -> assertSame ( $cinta -> getNumero (), 23 ); } public function testMuestraResumen () { $cinta = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $resultado = \"<br>Pel\u00edcula en VHS:\" ; $resultado .= \"<br>Los cazafantasmas<br>3.5 (IVA no incluido)\" ; $resultado .= \"<br>Duraci\u00f3n: 107 minutos\" ; // definimos la expectativa $this -> expectOutputString ( $resultado ); // invocamos al m\u00e9todo que har\u00e1 echo $cinta -> muestraResumen (); } }","title":"Comparant l'eixida"},{"location":"05herramientas.html#proveidors-de-dades","text":"Quan tenim proves que nom\u00e9s canvien respecte a les dades d'entrada i d'eixida, \u00e9s \u00fatil utilitzar prove\u00efdors de dades. Es declaren en el docblock mitjan\u00e7ant @dataProvider nombreMetodo , on s'indica el nom d'un m\u00e8tode p\u00fablic que retorna un array de arrays, on cada element \u00e9s un cas de prova. La classe de prova rep com a par\u00e0metres les dades a provar i el resultat de la prova com a \u00faltim par\u00e0metre. El seg\u00fcent exemple comprova amb diferents dades el funcionament de muestraResumen : <?php /** * @dataProvider cintasProvider */ public function testMuestraResumenConProvider ( $titulo , $id , $precio , $duracion , $esperado ) { $cinta = new CintaVideo ( $titulo , $id , $precio , $duracion ); $this -> expectOutputString ( $esperado ); $cinta -> muestraResumen (); } public function cintasProvider () { return [ \"cazafantasmas\" => [ \"Los cazafantasmas\" , 23 , 3.5 , 107 , \"<br>Pel\u00edcula en VHS:<br>Los cazafantasmas<br>3.5 \u20ac(IVA no incluido)<br>Duraci\u00f3n: 107 minutos\" ], \"superman\" => [ \"Superman\" , 24 , 3 , 188 , \"<br>Pel\u00edcula en VHS:<br>Superman<br>3 \u20ac (IVA no incluido)<br>Duraci\u00f3n: 188 minutos\" ], ]; }","title":"Prove\u00efdors de dades"},{"location":"05herramientas.html#provant-excepcions","text":"Les proves a m\u00e9s de comprovar que les classes funcionen com s'espera, han de cobrir tots els casos possibles. Aix\u00ed doncs, hem de poder fer proves que esperen que es llance una excepci\u00f3 (i que el missatge continga una certa informaci\u00f3): Per a aix\u00f2, s'utilitzen les seg\u00fcent expectatives: expectException(Excepcion::class) expectExceptionCode(codigoExcepcion) expectExceptionMessage(missatge) De la mateixa manera que abans, primer es posa l'expectativa, i despr\u00e9s es provoca que es llance l'excepci\u00f3: <?php public function testAlquilarCupoLleno () { $soporte1 = new CintaVideo ( \"Los cazafantasmas\" , 23 , 3.5 , 107 ); $soporte2 = new Juego ( \"The Last of Us Part II\" , 26 , 49.99 , \"PS4\" , 1 , 1 ); $soporte3 = new Dvd ( \"Origen\" , 24 , 15 , \"es,en,fr\" , \"16:9\" ); $soporte4 = new Dvd ( \"El Imperio Contraataca\" , 4 , 3 , \"es,en\" , \"16:9\" ); $cliente1 = new Cliente ( \"Bruce Wayne\" , 23 ); $cliente1 -> alquilar ( $soporte1 ); $cliente1 -> alquilar ( $soporte2 ); $cliente1 -> alquilar ( $soporte3 ); $this -> expectException ( CupoSuperadoException :: class ); $cliente1 -> alquilar ( $soporte4 ); }","title":"Provant excepcions"},{"location":"05herramientas.html#cobertura-de-codi","text":"La cobertura de proves indica la quantitat de codi que les proves cobreixen, sent recomanable que cobrisquen entre el 95 i el 100%. Una de les m\u00e8triques associades als informes de cobertura \u00e9s el CRAP (An\u00e0lisi i Prediccions sobre el Risc en Canvis), el qual mesura la quantitat d'esfor\u00e7, dolor i temps requerit per a mantindre una porci\u00f3 de codi. Aquesta m\u00e8trica ha de mantindre's amb un valor inferior a 5. Requeriment xdebug Encara que ja ve instal\u00b7lat dins de PHPUnit, perqu\u00e8 funcione la cobertura del codi, \u00e9s necessari que el codi PHP s'execute amb XDEBUG, i i indicar-li a Apatxe que aix\u00ed \u00e9s (col\u00b7locant en l'arxiu de configuraci\u00f3 `php.ini`la directiva `xdebug.mode=coverage`). Afegim en composer.json un nou script : \"coverage\" : \"phpunit --coverage-html coverage --coverage-filter app tests\" I posteriorment executem composer coverage Per exemple, si accedim a la classe CintaVideo amb la prova que hav\u00edem realitzat anteriorment, podem observar la cobertura que t\u00e9 al 100% i que el seu CRAP \u00e9s 2. Informe de cobertura de la clase CintaVideo Temes pendents * Dependencia entre casos de prueba con el atributo `@depends` * Completamente configurable mediante el archivo `phpxml.xml`: <https://phpunit.readthedocs.io/es/latest/configuration.html> * Preparando las pruebas con `setUpBeforeClass()` y `tearDownAfterClass()` * Objetos y pruebas *Mock* (dobles) con `createMock()`","title":"Cobertura de codi"},{"location":"05herramientas.html#referencias","text":"Tutorial de Composer Web Scraping with PHP \u2013 How to Crawl Web Pages Using Open Source Tools PHP Monolog Unit Testing con PHPUnit \u2014 Parte 1 , de Emiliano Zublena.","title":"Referencias"},{"location":"05herramientas.html#activitats","text":"","title":"Activitats"},{"location":"05herramientas.html#monolog_1","text":"Crea un nou projecte amb Composer anomenat Monologos : Inclou com a llibreria l'\u00faltima versi\u00f3 de Monolog. Crea la classe Dwes\\Monologos\\HolaMonolog . Defineix una propietat privada nomenada miLog per a guardar el log. Defineix en el constructor un RotatingFileHandler que escriga en la carpeta logs del projecte, i que emmagatzeme els missatges a partir de debug . Crea els m\u00e8todes saludar i acomiadar que facen un log de tipus info amb l'acci\u00f3 corresponent. Seguint amb el projecte Monologos : Crea un arxiu anomenat inici.php que permeta provar HolaMonolog . Comprova que els missatges apareixen en el log . Canvia el nivell perqu\u00e8 el manejador nom\u00e9s mostre els missatges a partir de warning . Torna a ejectuar inici.php i comprova l'arxiu de log. Modifica la classe HolaMonolog : En el constructor, afig a la pila un manejador que escriga a l'eixida d'error conjunt al processador d'introspecci\u00f3, mostrant missatges des del nivell debug . Afig una propietat denominada hora , la qual s'inicialitza \u00fanicament com a par\u00e0metre del constructor. Si la hora \u00e9s inferior a 0 o major de 24, ha d'escriure un log de warning amb un missatge apropiat. Modifica els m\u00e8todes saludar i acomiadar per a fer-lo concorde a la propietat hora (bon dia, bona vesprada, fins dem\u00e0, etc...)","title":"Monolog"},{"location":"05herramientas.html#proyecto-videoclub-iv","text":"Com ja tenim Composer instal\u00b7lat: Inicialitza-ho dins del teu projecte Videoclub Inclou Monolog i PhpUnit , cadascuna en el seu lloc adequat. Afig el autoload a l'arxiu composer.json , i feix els canvis necessaris en les classes per a utilitzar el autolloeu de Composer*. Puja els canvis a GitHub i crea l'etiqueta v0.511 . Modifica la classe Client per a introduir un Logger de Monolog . Afig el log com una propietat de la classe i inicialitza-ho en el constructor, amb el nom del canal VideoclubLogger . S'ha d'emmagatzemar en logs/videoclub.log mostrant tots els missatges des de debug . Abans de llan\u00e7ar qualsevol excepci\u00f3, ha d'escriure un log de tipus warning . Substituir els echo que hi haja en el codi, que ara passaran pel log amb el nivell info, a excepci\u00f3 del m\u00e8tode muestraResumen que continuar\u00e0 fent echo . Torna a fer el mateix que en l'exercici anterior, per\u00f2 ara amb la classe Videoclub . A m\u00e9s: Sempre que es cride a un m\u00e8tode del log, se li passar\u00e0 com a segon par\u00e0metre la informaci\u00f3 que disposem. Executa l'arxiu de prova i comprova que el log s'emplena correctament. REFACTORITZAREM el codi com\u00fa d'inicialitzaci\u00f3 de Monolog que tenim repetits en els constructors a una factoria de Monolog , la qual col\u00b7locarem en \\Dwes\\Videoclub\\Util\\LogFactory . Comprova que continua funcionant correctament. Modifica la factoria perqu\u00e8 retorne LogInterface i comprova que continua funcionant. Puja els canvis a GitHub amb l'etiqueta v0.515 .","title":"Proyecto Videoclub IV"},{"location":"05herramientas.html#phpdocumentor","text":"Comprova que en el contenidor de Docker funciona phpDocumentor . Executa phpdoc sobre el teu projecte Monolog i comprova el api que es crea. Comenta tant la classe com els m\u00e8todes, i posteriorment, torna a executar phpdoc. Documenta el projecte Videoclub*, i genera la documentaci\u00f3. Comen\u00e7a per les classes de Suport i els seus fills. Comprova el resultat. Despr\u00e9s segueix amb Client i finalment Videoclub .","title":"phpDocumentor"},{"location":"05herramientas.html#web-scraping_1","text":"A partir de les dades de http://www.seleccionbaloncesto.es , calcula l'altura i edat mitjana de l'equip de b\u00e0squet mascul\u00ed. Observa que tens les dades dins d'una taula davall de les not\u00edcies. Tornant al Videoclub, en Suport afig una propietat anomenada metacritic per a emmagatzemar la URL de cada suport. A continuaci\u00f3, modifica els m\u00e8todes incluirXXX de Videoclub perqu\u00e8 admeten com a primer par\u00e0metre aquesta URL. Despr\u00e9s d'aix\u00f2, modifica el fitxer inicio3.php per a passar-li la URL de cada suport (per a aix\u00f2 haur\u00e0s de consultar-los en Metacritic fent cerques manuals). Per exemple, en el cas de la pel\u00b7l\u00edcula Cazafantasmas, la seua URL \u00e9s https://www.metacritic.com/movie/ghostbusters . Finalment, afig un m\u00e8tode abstracte en Suport anomenat getPuntuacion , que fent \u00fas de Web Scraping es connecte a Metacritic* i obtinga la seua puntuaci\u00f3. Modifica inicio3.php per a obtindre tots els lloguers d'un client mitjan\u00e7ant getAlquileres() : array , i per a cadascun d'ells, a m\u00e9s del t\u00edtol, mostra la seua puntuaci\u00f3.","title":"Web Scraping"},{"location":"05herramientas.html#phpunit","text":"A partir de la classe HolaMonolog , modifica els m\u00e8todes perqu\u00e8 a m\u00e9s d'escriure en en log, retornen la salutaci\u00f3 com una cadena. Crea la classe HolaMonologTest i afig diferents casos de prova per a comprovar que les salutacions i comiats s\u00f3n concordes a l'hora amb la qual es crea la classe. Simularem Test Driven Development*. Volem que la nostra aplicaci\u00f3 emmagatzeme els \u00faltims tres salutacions que ha realitzat. Per a aix\u00f2: Crea les prova necess\u00e0ries (invoca al m\u00e8tode saludar diverses vegades i crida al m\u00e8tode que et retorne les salutacions emmagatzemades) Implementa el codi per a passar les proves refactoritza el codi Crea una nova prova que utilitze prove\u00efdors de dades per a comprovar aquesta \u00faltima funcionalitat, passant-li: * Una salutaci\u00f3. * Tres salutacions. * Quatre salutacions. Recordes que si l'hora \u00e9s negativa o superior a 24 escriv\u00edem en el log un *warning? Ara ha de llan\u00e7ar una excepci\u00f3 de tipus InvalidArgumentException (com l'excepci\u00f3 forma per a de PHP, cal posar la seua FQN: \\InvalidArgumentException ). Torna a aplicar TDD i completa els teus casos de prova. Comenta l'\u00faltima prova realitzada (la comprovaci\u00f3 de les excepcions) i realitza un informe de cobertura de proves. Analitza els resultats obtinguts. Elimina els \u00faltims comentaris sobre l'\u00faltima prova i torna a generar i analitzar l'informe de cobertura.","title":"phpUnit"},{"location":"05herramientas.html#projecte-videoclub-v","text":"L'objectiu dels seg\u00fcents exercicis \u00e9s aconseguir de manera incremental una cobertura de proves superior al 95%. Crea proves dins de la carpeta tests per a les classes Suport , CintaVideo , Dvd i Joc . Recorda respectar l'espai de noms. Els m\u00e8todes muestraResumen , despr\u00e9s de fer tire dels missatges, han de retornar una cadena amb el propi missatge. Crea proves per a la classe Client , aprofitant tot el codi que ten\u00edem per a comprovar la funcionalitat. Utilitza prove\u00efdors de dades per a afegir conjunts de dades majors que els empleats. Comprova que funciona amb diferents contingents, que en intentar llogar un suport marcat com ja llogat ha de llan\u00e7ar una excepci\u00f3, que no coincidisquen els ids dels suports, etc... Crea les proves per a la classe Videoclub . Tingues en compte els \u00faltims m\u00e8todes afegits que permetien llogar i retornar suports, tant de manera individual com mitjan\u00e7ant un array. Crea l'informe de cobertura. Una vegada creat, analitza les dades de cobertura (>= 90%) i comprova el valor de CRAP, de manera que sempre siga <= 5. En cas de no complir-se, crea nous casos de prova i/o refactoritza el codi de la teua aplicaci\u00f3. Puja els canvis a GitHub amb l'etiqueta v0.554 .","title":"Projecte Videoclub V"},{"location":"05herramientas.html#ampliacio","text":"Volem que en Videoclub , quan un client no existeix (tant en llogar com en retornar) es llance una nova excepci\u00f3: ClienteNoExisteException . A m\u00e9s, donat el nombre creixent d'excepcions, volem moure les excepcions al namespace Dwes\\Videoclub\\Exception . Seguint TDD, primer crea les proves, i despr\u00e9s modifica el codi d'aplicaci\u00f3. Torna a generar l'informe de cobertura i comprova la qualitat de les nostres proves. Ning\u00fa s'ha adonat que en els Dvd no estem emmagatzemant la seua duraci\u00f3? Fes tots els canvis necessaris, primer en les proves i despr\u00e9s en el codi. Despr\u00e9s d'anys lluitant contra la tecnologia, decidim introduir els Blu-ray en la nostra empresa. Hem decidisc que Bluray herete de Suport . A m\u00e9s del t\u00edtol i la duracion , ens interessa emmagatzemar si es4k . Fes tots els canvis necessaris, primer en les proves i despr\u00e9s en el codi. Puja els canvis a GitHub amb l'etiqueta v0.563 .","title":"Ampliaci\u00f3"},{"location":"06accesoDatos.html","text":"img { margin: 20px 0; border-radius: 8px; } .alert { color: #BD1550; } .warning { color: #E97F02; } .success { color: #8A9B0F; } .center { text-align: center; } .right { text-align: right; } .img-small { max-width: 200px; margin: auto; } .img-medium { max-width: 400px; margin: auto; } .img-large { max-width: 800px; margin: auto; } .leyenda { font-size: small; margin: 10px 0; } Acceso a datos \u00b6 En esta unidad vamos a aprender a acceder a datos que se encuentran en un servidor; recuperando, editando y creando dichos datos a trav\u00e9s de una base de datos. A trav\u00e9s de las distintas capas o niveles, de las cuales 2 de ellas ya conocemos ( Apache , PHP ) y MySQL la que vamos a estudiar en este tema. Instalaci\u00f3n \u00b6 A trav\u00e9s de XAMPP es muy sencillo, simplemente nos descargar\u00edamos el programa y lo activar\u00edamos. Para descargar XAMPP pulsa aqu\u00ed . Con Docker nos descargaremos esta imagen de docker y lanzamos docker-compose up -d Si todo ha salido bien y el contenedor est\u00e1 en marcha, podremos visitar la p\u00e1gina de phpMyAdmin de la siguiente manera http://localhost:8000 Para acceder debemos utilizar las siguientes credenciales que vienen configuradas en el alrchivo docker-compose.yml usuario: root contrase\u00f1a: 1234 Estructura de una base de datos \u00b6 Sabemos que una base de datos tiene muchos campos con sus nombres y valores, pero adem\u00e1s sabemos que la base de datos debe tener un nombre. por tanto tendr\u00edamos la siguiente estructura para una base de datos: NombreBaseDeDatos |__Tabla-#1 | |__DatosTabla-#1 | |__Tabla-#2 | |__DatosTabla-#2 | |__Tabla-#3 | |__DatosTabla-#3 [...] Ve\u00e1moslo en un ejemplo real Ryanair |__pasajero | |__id[*] | |__nombre | |__apellidos | |__edad | |__id_vuelo[^] | |__vuelo | |__id[*] | |__n_plazas | |__disponible | |__id_pais[^] | |__pais |__id[*] |__nombre [*] Clave primaria [^] Clave For\u00e1nea CholloSevero \u00b6 Como muy bien hab\u00e9is elegido, a lo largo de esta unidad vamos a trabajar con una base de datos que iremos confeccionando conforme avancemos, donde almacenaremos la informaci\u00f3n relacionada con ofertas que publiquen los usuarios y los listaremos en funci\u00f3n de varios filtros; nuevos, m\u00e1s votados, m\u00e1s vistos, m\u00e1s comentados entre otros, al m\u00e1s puro estilo Chollometro . SQL \u00b6 Este lenguaje de consulta estructurada ( Structured Query Language ) es el que vamos a utilizar para realizar las consultas a nuestras bases de datos para mostrar el contenido en las distintas interfaces web que creemos a lo largo de la unidad. Si quieres saber m\u00e1s detalles visita Wiki SQL Ejemplo de una sentencia SQL donde seleccionamos todas las filas y columnas de nuestra tabla llamada 'pais' SELECT * FROM pais Estas sentencias pueden invocarse desde la consola de comandos mediante el int\u00e9rprete mysql (previamente instalado en el sistema) o a trav\u00e9s de la herramienta phpMyAdmin. Las sentencias SQL tambi\u00e9n las podemos usar dentro de nuestro c\u00f3digo php, de tal manera que cuando se cargue nuestra interfaz web, lance una sentecia SQL para mostrar los datos que queramos. <?php // Listado de clientes, ordenados por DNI de manera ASCendente $clientesOrdenadosPorDNI = \"SELECT * FROM `pasajero` ORDER BY `dni`\" ASC ; ?> phpMyAdmin \u00b6 Este software funciona bajo Apache y PHP y es m\u00e1s que nada una interfaz web para gestionar las bases de datos que tengamos disponibles en nuestro servidor local. Muchos hostings ofrecen esta herramienta por defecto para poder gestionar las BBDD que tengamos configuradas bajo nuestra cuenta. Creando una base de datos dentro de phpMyAdmin \u00b6 Para crear una nueva base de datos debemos entrar en phpMyAdmin como usuario root y pinchar en la opci\u00f3n Nueva del men\u00fa de la izquierda. En la nueva ventana de creaci\u00f3n pondremos un nombre a nuestra bbdd. Tambi\u00e9n estableceremos el cotejamiento utf8m4_unicode_ci para que nuestra bbdd soporte todo tipo de caracteres (como los asi\u00e1ticos) e incluso emojis ;) Le damos al bot\u00f3n de Crear para crear la bbdd y empezar a escribir las distintas tablas que vayamos a introducir en ella. El sistema generar\u00e1 el c\u00f3digo SQL para crear todo lo que le hemos puesto y crear\u00e1 la base de datos con las tablas que le hayamos metido. CREATE TABLE ` persona ` . ( ` id ` INT NOT NULL AUTO_INCREMENT , ` nombre ` TINYTEXT NOT NULL , ` apellidos ` TEXT NOT NULL , ` telefono ` TINYTEXT NOT NULL , PRIMARY KEY ( ` id ` )) ENGINE = InnoDB ; Opciones en phpMyAdmin \u00b6 Cuando seleccionamos una base de datos de la lista, el sistema nos muestra varias pesta\u00f1as con las cuales interactuar con la base de datos en cuesti\u00f3n: Estructura : Podemos ver las distintas tablas que consolidan nuestra base de datos SQL : Por si queremos inyectar c\u00f3digo SQL para que el sistema lo interprete Buscar : Sirve para buscar por t\u00e9rminos, en nuestra base de datos, aplicando distintos filtros de b\u00fasqueda Generar consulta : parecido a SQL pero de una manera m\u00e1s gr\u00e1fica, sin tener que saber nada del lenguaje Exportar e importar : Como su nombre indica, para hacer cualquiera de las 2 operaciones sobre la base de datos Operaciones : Distintas opciones avanzadas para realizar en nuestra base de datos, de la cual destacaremos la opci\u00f3n Cotejamiento donde podremos cambiar el cotejamiento de nuestra tabla pero OJO CON \u00c9STO porque podemos eliminar datos sin querer, ya que al cambiar el cotejamiento podemos suprimir caracteres no soportados por el nuevo cotejamiento No vamos a profundizar en el resto de opciones pero, en la pesta\u00f1a M\u00e1s existe la opci\u00f3n Dise\u00f1ador para poder editar las relaciones entre tablas de una manera gr\u00e1fica (pinchando y arrastrando) que veremos m\u00e1s adelante. MySQLi \u00b6 PHP hace uso de esta extensi\u00f3n mejorada para poder comunicarse con las bases de datos, ya sean MySQL (4.1 o superior) o MariaDB. Cualquier consulta que queramos hacer a una base de datos necesitaremos hacer uso de la extensi\u00f3n mysqli() Veamos como conectarnos con una base de datos a trav\u00e9s del c\u00f3digo PHP <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 // \"SERVIDOR\", \"USUARIO\", \"CONTRASE\u00d1A\", \"BASE DE DATOS\" $conexion = mysqli_connect ( \"d939ebf6a741\" , \"tuUsuario\" , \"1234\" , \"pruebas\" ); // COMPROBAMOS LA CONEXI\u00d3N if ( mysqli_connect_errno ()) { echo \"Failed to connect to MySQL: \" . mysqli_connect_error (); exit (); } echo \"<h1>Bienvenid@ a MySQL !!</h1>\" ; ?> servidor : El servidor donde se encuentra la base de datos que queremos usar suele ser localhost , pero en nuestro caso, al utilizar Docker ser\u00e1 el nombre de la imagen mysql:8.0 que aparece al dejar el rat\u00f3n encima en el Visual Studio Code usuarioDB : El usuario de la base de datos passwordDB : La contrase\u00f1a para ese usuario de la base de datos baseDeDatos : Nombre de la base de datos que queramos usar Si todo ha salido bien habr\u00e9is visto un mensaje diciendo Bienvenid@ a MySQL !! Recuperando datos de una BD \u00b6 Ahora que ya sabemos c\u00f3mo conectarnos a una base de datos alojada en nuestro servidor, lo que necesitamos saber es c\u00f3mo recuperar datos almacenados en la base de datos. Durante la instalaci\u00f3n de la imagen de Docker, se ha creado una tabla llamada Pruebas que contiene varios registros de distintas personas. Vamos a recuperar esos datos para ver de qu\u00e9 forma se hace con PHP. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $conexion = mysqli_connect ( \"d939ebf6a741\" , \"lupa\" , \"1234\" , \"pruebas\" ); // COMPROBAMOS LA CONEXI\u00d3N if ( mysqli_connect_errno ()) { echo \"Failed to connect to MySQL: \" . mysqli_connect_error (); exit (); } // CONSULTA A LA BASE DE DATOS $consulta = \"SELECT * FROM `Person`\" ; $listaUsuarios = mysqli_query ( $conexion , $consulta ); // COMPROBAMOS SI EL SERVIDOR NOS HA DEVUELTO RESULTADOS if ( $listaUsuarios ) { // RECORREMOS CADA RESULTADO QUE NOS DEVUELVE EL SERVIDOR foreach ( $listaUsuarios as $usuario ) { echo \" $usuario[id] $usuario[name] <br> \" ; } } ?> Si todo ha salido bien, por pantalla ver\u00e1s el siguiente listado \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 http://localhost/pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 1 William 2 Marc 3 John 4 Antonio Moreno PHP Data Objects :: PDO \u00b6 De la misma manera que hemos visto con mysqli, PHP Data Objects (o PDO) es un driver de PHP que se utiliza para trabajar bajo una interfaz de objetos con la base de datos. A d\u00eda de hoy es lo que m\u00e1s se utiliza para manejar informaci\u00f3n desde una base de datos, ya sea relacional o no relacional. De igual manera que pasaba con los objetos en PHP nativos, en la interfaz de MySQL la cosa cambia la hora de conectarnos con una base de datos. <?php $conexion = new PDO ( 'mysql:host=localhost; dbname=dwes' , 'dwes' , 'abc123' ); Adem\u00e1s, con PDO podemos usar las excepciones con try catch para gestionar los errores que se produzcan en nuestra aplicaci\u00f3n, para ello, como hac\u00edamos antes, debemos encapsular el c\u00f3digo entre bloques try / catch. <?php $dsn = 'mysql:dbname=prueba;host=127.0.0.1' ; $usuario = 'usuario' ; $contrase\u00f1a = 'contrase\u00f1a' ; try { $mbd = new PDO ( $dsn , $usuario , $contrase\u00f1a ); $mbd -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); } catch ( PDOException $e ) { echo 'Fall\u00f3 la conexi\u00f3n: ' . $e -> getMessage (); } En primer lugar, creamos la conexi\u00f3n con la base de datos a trav\u00e9s del constructor PDO pas\u00e1ndole la informaci\u00f3n de la base de datos. En segundo lugar, establecemos los par\u00e1metros para manejar las excepciones, en este caso hemos utilizado: PDO::ATTR_ERRMODE indic\u00e1ndole a PHP que queremos un reporte de errores. PDO::ERRMODE_EXCEPTION con este atributo obligamos a que lance excepciones, adem\u00e1s de ser la opci\u00f3n m\u00e1s humana y legible que hay a la hora de controlar errores. Cualquier error que se lance a trav\u00e9s de PDO, el sistema lanzar\u00e1 una PDOException . Fichero de configuraci\u00f3n de la BD \u00b6 De la misma manera que creamos nuestro archivo de funciones funciones-php y albergamos todas las funciones que se usan de manera global en la aplicaci\u00f3n, podemos establecer un archivo de constantes donde definamos los par\u00e1metros de conexi\u00f3n con la base de datos. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 conexion.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 constDSN = \"mysql:host=localhost;dbname=dwes\" ; constUSUARIO = \"dwes\" ; constPASSWORD = \"abc123\" ; /* \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 NO SUBAS ESTE ARCHIVO A git \u2592\u2592\u2592\u2592\u2592 \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 */ Este archivo contiene informaci\u00f3n muy sensible as\u00ed que no es recomendable que subas este archivo a git. Sentencias preparadas \u00b6 Se trata de sentencias que se establecen como si fueran plantillas de la SQL que vamos a lanzar, aceptando par\u00e1metros que son establecidos a posteriori de la declaraci\u00f3n de la sentencia preparada. Las sentencias preparadas evitan la injecci\u00f3n de SQL (SQL Injection) y mejoran el rendimiento de nuestras aplicaci\u00f3nes o p\u00e1ginas web. <?php $sql = \"INSERT INTO Clientes VALUES (?, ?, ?, ?)\" ; Cada interrogante es un par\u00e1metro que estableceremos despu\u00e9s, unas cuantas l\u00edneas m\u00e1s abajo. Una vez tenemos la plantilla de nuestra consulta, debemos seguir con la preparaci\u00f3n junto con 3 m\u00e9todos m\u00e1s de PHP para su completa ejecuci\u00f3n: prepare: prepara la sentenci\u00e1n antes de ser ejecutada bind : el tipo de uni\u00f3n (bind) de dato que puede ser mediante ' ? ' o ' :parametro ' execute se ejecuta la consulta uniendo la plantilla con las bariables o par\u00e1metros que hemos establecido. Ejemplo par\u00e1metros \u00b6 <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Borrando con par\u00e1metros \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 include \"config/database.inc.php\" ; $conexion = null ; try { $cantidad = $_GET [ \"cantidad\" ]; $conexion = new PDO ( DSN , USUARIO , PASSWORD ); $conexion -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"DELETE FROM stock WHERE unidades = ?\" ; $sentencia = $conexion -> prepare ( $sql ); $isOk = $sentencia -> execute ([ $cantidad ]); $cantidadAfectada = $sentencia -> rowCount (); echo $cantidadAfectada ; } catch ( PDOException $e ) { echo $e -> getMessage (); } $conexion = null Ejemplo bindParam \u00b6 Muy parecido a utilizar par\u00e1metros pero esta vez la variable est\u00e1 dentro de la sentencia SQL, en este caso la hemos llamado :cant <?php include \"config/database.inc.php\" ; $conexion = null ; try { $cantidad = $_GET [ \"cantidad\" ] ?? 0 ; $conexion = new PDO ( DSN , USUARIO , PASSWORD ); $conexion -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"DELETE FROM stock WHERE unidades = :cant\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> bindParam ( \":cant\" , $cantidad ); $isOk = $sentencia -> execute (); $cantidadAfectada = $sentencia -> rowCount (); echo $cantidadAfectada ; } catch ( PDOException $e ) { echo $e -> getMessage (); } $conexion = null ; bindParam VS bindValue \u00b6 Utilizaremos bindValue() cuando tengamos que insertar datos s\u00f3lo una vez, en cambio, deberemos usar bindParam() cuando tengamos que pasar datos m\u00faltiples, como por ejemplo, un array. <?php // se asignan nombre a los par\u00e1metros $sql = \"DELETE FROM stock WHERE unidades = :cant\" ; $sentencia = $conexion -> prepare ( $sql ); // bindParam enlaza por referencia $cantidad = 0 ; $sentencia -> bindParam ( \":cant\" , $cantidad ); $cantidad = 1 ; // se eliminan con cant = 1 $isOk = $sentencia -> execute (); // bindValue enlaza por valor $cantidad = 0 ; $sentencia -> bindValue ( \":cant\" , $cantidad ); $cantidad = 1 ; // se eliminan con cant = 0 $isOk = $sentencia -> execute (); Para m\u00e1s informaci\u00f3n y uso de las variables PDO consulta el manual de PHP . Insertando registros \u00b6 A la hora de insertar registros en una base de datos, debemos tener en cuenta que en la tabla puede haber valores autoincrementados. Para salvaguardar \u00e9sto, lo que debemos hacer es dejar ese cambpo autoincrementado vac\u00edo, pero a la hora de hacer la conexi\u00f3n, debemos recuperarlo con el m\u00e9todo lastInsertId() . <?php $nombre = $_GET [ \"nombre\" ] ?? \"SUCURSAL X\" ; $telefono = $_GET [ \"telefono\" ] ?? \"636123456\" ; $sql = \"INSERT INTO tienda(nombre, tlf) VALUES (:nombre, :telefono)\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> bindParam ( \":nombre\" , $nombre ); $sentencia -> bindParam ( \":telefono\" , $telefono ); $isOk = $sentencia -> execute (); $idGenerado = $conexion -> lastInsertId (); echo $idGenerado ; Consultando registros \u00b6 A la hora de recuperar los resultados de una consulta, bastar\u00e1 con invocar al m\u00e9todo PDOStatement::fetch para listar las filas generadas por la consulta. Pero debemos elegir el tipo de dato que queremos recibir entre los 3 que hay disponibles: PDO::FETCH_ASSOC: array indexado cuyos keys son el nombre de las columnas. PDO::FETCH_NUM: array indexado cuyos keys son n\u00fameros. PDO::FETCH_BOTH: valor por defecto. Devuelve un array indexado cuyos keys son tanto el nombre de las columnas como n\u00fameros. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 include \"config/database.inc.php\" ; $conexion = null ; try { $conexion = new PDO ( DSN , USUARIO , PASSWORD ); $conexion -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"select * from tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_ASSOC ); $sentencia -> execute (); while ( $fila = $sentencia -> fetch ()){ echo \"Codigo:\" . $fila [ \"cod\" ] . \"<br />\" ; echo \"Nombre:\" . $fila [ \"nombre\" ] . \"<br />\" ; echo \"Tel\u00e9fono:\" . $fila [ \"tlf\" ] . \"<br />\" ; } } catch ( PDOException $e ) { echo $e -> getMessage (); } $conexion = null ; Recuperando datos con una matriz como resultado de nuestra consulta <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_ASSOC ); $sentencia -> execute (); $tiendas = $sentencia -> fetchAll (); foreach ( $tiendasas$tienda ) { echo \"Codigo:\" . $tienda [ \"cod\" ] . \"<br />\" ; echo \"Nombre:\" . $tienda [ \"nombre\" ] . \"<br />\" ; } Pero si lo que queremos es leer datos con forma de objeto utilizando PDO::FETCH_OBJ , debemos crear un objeto con propiedades p\u00fablicas con el mismo nombre que las columnas de la tabla que vayamos a consultar. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con formato de objeto \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_OBJ ); $sentencia -> execute (); while ( $t = $sentencia -> fetch ()) { echo \"Codigo:\" . $t -> cod . \"<br />\" ; echo \"Nombre:\" . $t -> nombre . \"<br />\" ; echo \"Tel\u00e9fono:\" . $t -> tlf . \"<br />\" ; } Consultas con modelos \u00b6 Llevamos tiempo creando clases en PHP y las consultas tambi\u00e9n admiten este tipo de datos mediante el uso de PDO::FETCH_CLASS Si usamos este m\u00e9todo, debemos tener en cuenta que los nombres de los atributos privados deben coincidir con los nombres de las columnas de la tabla que vayamos a manejar. As\u00ed pues, si por lo que sea cambiamos la estructura de la tabla DEBEMOS CAMBIAR nuestra clase para que todo siga funcionando. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 classTienda { private int $cod ; private string $nombre ; private ? string $tlf ; public function getCodigo () : int { return $this -> cod ; } public function getNombre () : string { return $this -> nombre ; } public function getTelefono () : ? string { return $this -> tlf ; } } <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consultando a trav\u00e9s de la clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); // Aqu\u00ed 'Tienda' es el nombre de nuestra clase $sentencia -> setFetchMode ( PDO :: FETCH_CLASS , \"Tienda\" ); $sentencia -> execute (); while ( $t = $sentencia -> fetch ()) { echo \"Codigo: \" . $t -> getCodigo () . \"<br />\" ; echo \"Nombre: \" . $t -> getNombre () . \"<br />\" ; echo \"Tel\u00e9fono: \" . $t -> getTelefono () . \"<br />\" ; var_dump ( $t ); } Pero \u00bfqu\u00e9 pasa si nuestras clases tienen constructor? pues que debemos indicarle, al m\u00e9todo FECTH, que rellene las propiedades despu\u00e9s de llamar al constructor y para ello hacemos uso de PDO::FETCH_PROPS_LATE . <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consulta para una clase con constructor \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_CLASS | PDO :: FETCH_PROPS_LATE , Tienda :: class ); $sentencia -> execute (); $tiendas = $sentencia -> fetchAll (); Consultas con LIKE \u00b6 Para utilizar el comod\u00edn LIKE u otros comodines, debemos asociarlo al dato y NUNCA en la propia consulta. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Utilizando comodines :: LIKE \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda where nombre like :nombre or tlf like :tlf\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_CLASS | PDO :: FETCH_PROPS_LATE , Tienda :: class ); $cadBuscar = \"%\" . $busqueda . \"%\" ; $sentencia -> execute ([ \"nombre\" => $cadBuscar , \"tlf\" => $cadBuscar ]); $result = $sentencia -> fetchAll (); Ten\u00e9is una lista de ejemplos muy completa en la documentaci\u00f3n oficial . Login & Password \u00b6 Para manejar un sistema completo de login y password con contrase\u00f1as cifradas, necesitamos un m\u00e9todo que cifre esos strings que el usuario introduce como contrase\u00f1a; tanto en el formulario de registro como en el del login, ya que al codificar una contrase\u00f1a, despu\u00e9s tenemos que decodificarla para comprobar que ambas contras\u00f1eas (la que instroduce el usuario en el login y la que tenemos en la base de datos) coincidan. Necesitamos pues: password_hash() para almacenar la contrase\u00f1a en la base de datos a la hora de hacer el INSERT PASSWORD_DEFAULT almacenamos la contrase\u00f1a usando el m\u00e9todo de encriptaci\u00f3n bcrypt PASSWORD_BCRYPT almacenamos la contrase\u00f1a usando el algoritmo CRYPT_BLOWFISH compatible con crypt() password_verify() para verificar el usuario y la contrase\u00f1a <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Almacenando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $usu = $_POST [ \"usuario\" ]; $pas = $_POST [ \"password\" ]; $sql = \"INSERT INTO usuarios(usuario, password) VALUES (:usuario, :password)\" ; $sentencia = $conexion -> prepare ( $sql ); $isOk = $sentencia -> execute ([ \"usuario\" => $usu , \"password\" => password_hash ( $pas , PASSWORD_DEFAULT ) ]); Ahora que tenemos el usuario codificado y guardado en la base de datos, vamos a recuperarlo para poder loguearlo correctamente. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Recuperando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $usu = $_POST [ \"login\" ] ?? \"\" ; $sql = \"select * from usuarios where usuario = ?\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> execute ([ $usu ]); $usuario = $sentencia -> fetch (); if ( $usuario && password_verify ( $_POST [ 'pass' ], $usuario [ 'password' ])) { echo \"OK!\" ; } else { echo \"KO\" ; } Acceso a ficheros \u00b6 Gracias a la funcion fopen() desde PHP podemos abrir archivos que se encuentren en nuestros servidor o una URL. A esta funci\u00f3n hay que pasarle 2 par\u00e1metros; el nombre del archivo que queremos abrir y el modo en el que se abrir\u00e1 $fp = fopen(\"miarchivo.txt\", \"r\"); Muchas veces no podemos abrir el archivo porque \u00e9ste no se encuentra o no tenemos acceso a \u00e9l, por eso es recomendable comprobar que podemos hacerlo if (!$fp = fopen(\"miarchivo.txt\", \"r\")){ echo \"No se ha podido abrir el archivo\"; } Modos de apertura de ficheros \u00b6 r : Modo lectura. Puntero al principio del archivo. r+ : Apertura para lectura y escritura. Puntero al principio del archivo w : Apertura para escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear. w+ : Apertura para lectura y escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear. a : Apertura para escritura. Puntero al final del archivo. Si no existe se intenta crear. a+ : Apertura para lectura y escritura. Puntero al final del archivo. Si no existe se intenta crear. x : Creaci\u00f3n y apertura para s\u00f3lo escritura. Puntero al principio del archivo. Si el archivo ya existe dar\u00e1 error E_WARNING. Si no existe se intenta crear. x+ : Creaci\u00f3n y apertura para lectura y escritura. Mismo comportamiento que x. c : Apertura para escritura. Si no existe se crea. Si existe no se sobreescribe ni da ning\u00fan error. Puntero al principio del archivo. c+ : Apertura para lectura y escritura. Mismo comportamiento que C. b : Cuando se trabaja con archivos binarios como jpg, pdf, png y dem\u00e1s. Se suele colocar al final del modo, es decir rb, r+b, x+b, wb... Operaciones con archivos \u00b6 Para poder leer un archivo necesitamos usar la funci\u00f3n fread() de PHP // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Abriendo un archivo y leyendo su contenido \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $file = \"miarchivo.txt\"; $fp = fopen($file, \"r\"); // filesize() nos devuelve el tama\u00f1o del archivo en cuesti\u00f3n $contents = fread($fp, filesize($file)); // Cerramos la conexi\u00f3n con el archivo fclose(); Si lo que queremos es escribir en un archivo, deberemos hacer uso de la funci\u00f3n fwrite() // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Escribiendo en un archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $file = \"miarchivo.txt\"; $texto = \"Hola que tal\"; $fp = fopen($file, \"w\"); fwrite($fp, $texto); fclose($fp); Informaci\u00f3n de un fichero \u00b6 Con PHP y su m\u00e9todo stat() podemos obtener informaci\u00f3n sobre los archivos que le indiquemos. Este m\u00e9todo devuelve hasta un total de 12 elementos con ifnormaci\u00f3n acerca de nuestro archivo. 0 dev n\u00famero de dispositivo 1 ino n\u00famero de i-nodo 2 mode modo de protecci\u00f3n del i-nodo 3 nlink n\u00famero de enlaces 4 uid ID de usuario del propietario 5 gid ID de grupo del propietario 6 rdev tipo de dispositivo, si es un dispositivo i-nodo 7 size tama\u00f1o en bytes 8 atime momento del \u00faltimo acceso (tiempo Unix) 9 mtime momento de la \u00faltima modificaci\u00f3n (tiempo Unix) 10 ctime momento de la \u00faltima modificaci\u00f3n del i-nodo (tiempo Unix) 11 blksize tama\u00f1o del bloque E/S del sistema de ficheros 12 blocks n\u00famero de bloques de 512 bytes asignados Unos ejemplos... <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Informaci\u00f3n del archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $file = \"miarchivo.txt\" ; $texto = \"Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.\" ; $fp = fopen ( $file , \"w\" ); fwrite ( $fp , $texto ); $datos = stat ( $file ); echo $datos [ 3 ] . \"<br>\" ; // N\u00famero de enlaces, 1 echo $datos [ 7 ] . \"<br>\" ; // Tama\u00f1o en bytes, 85 echo $datos [ 8 ] . \"<br>\" ; // Momento de \u00faltimo acceso, 1444138104 echo $datos [ 9 ] . \"<br>\" ; // Momento de \u00faltima modificaci\u00f3n, 1444138251 ?> Echa un vistazo a las funciones de directorios que tiene PHP, es muy interesante. Archivos PDF \u00b6 Con PHP podemos manejar todo tipo de archivos como ya hemos visto pero, \u00bfqu\u00e9 pasa si queremos generar ficheros PDF con datos sacados de una base de datos? Gracias a una clase escrita en PHP, podemos generar archivos PDF sin necesidad de instalar librer\u00edas adicionales en nuestro servidor. Para ello, como tenemos composer dentro de nuestra imagen de Docker, usaremos composer para instalar esta dependencia. Acu\u00e9rdate que debemes haber hecho composer init para empezar un proyecto con composer, de lo contrario no podr\u00e1s a\u00f1adir ning\u00fan paquete. Veamos un ejemplo de Hello World convertido a PDF <?php ob_end_clean (); require ( 'fpdf/fpdf.php' ); // Instanciamos la clase // P = Portrait | mm = unidades en mil\u00edmetros | A4 = formato $pdf = new FPDF ( 'P' , 'mm' , 'A4' ); // A\u00f1adimos una p\u00e1gina $pdf -> AddPage (); // Establecemos la fuente y el tama\u00f1o de letra $pdf -> SetFont ( 'Arial' , 'B' , 18 ); // Imprimimos una celda con el texto que nosotros queramos $pdf -> Cell ( 60 , 20 , 'Hello World!' ); // Terminamos el PDF $pdf -> Output (); ?> Hay muchos ejemplos y tutoriales, as\u00ed como documentaci\u00f3n de la clase FPDF en la p\u00e1gina oficial. Visita la secci\u00f3n de tutoriales y el manual para sacar mayor partido a esta clase. <?php require ( 'fpdf/fpdf.php' ); class PDF extends FPDF { // Cabecera function Header () { // A\u00f1adimos un logotipo $this -> Image ( 'logo.png' , 10 , 8 , 33 ); // establecemos la fuente y el tama\u00f1o $this -> SetFont ( 'Arial' , 'B' , 20 ); // Movemos el contenido un poco a la derecha $this -> Cell ( 80 ); // Pintamos la celda $this -> Cell ( 50 , 10 , 'Cabecera' , 1 , 0 , 'C' ); // Pasamos a la siguiente l\u00ednea $this -> Ln ( 20 ); } // Pie de p\u00e1gina function Footer () { // Nos posicionamos a 1.5 cm desde abajo del todo de la p\u00e1gina $this -> SetY ( - 15 ); // Arial italic 8 $this -> SetFont ( 'Arial' , 'I' , 8 ); // N\u00famero de p\u00e1gina $this -> Cell ( 0 , 10 , 'P\u00e1gina ' . $this -> PageNo () . '/{nb}' , 0 , 0 , 'C' ); } } // Instanciamos la clase $pdf = new PDF (); // Definimos un alias para la numeraci\u00f3n de p\u00e1ginas $pdf -> AliasNbPages (); $pdf -> AddPage (); $pdf -> SetFont ( 'Times' , '' , 14 ); for ( $i = 1 ; $i <= 30 ; $i ++ ) $pdf -> Cell ( 0 , 10 , 'N\u00famero de l\u00ednea ' . $i , 0 , 1 ); $pdf -> Output (); ?> Actividades \u00b6 MySQLi \u00b6 Crea una nueva base de datos con el nombre lol y cotejamiento de datos utf8mb4_unicode_ci . En nuestra base de datos lol que acabamos de crear, vamos a crear la tabla campeon con los siguientes campos. id [*] nombre rol dificultad descripcion Acu\u00e9rdate que [*] significa que es clave primaria y no olvides poner el tipo de datos de cada uno de los campos. Rellena la tabla campeon con, al menos 5 registros, con los datos que t\u00fa quieras o si lo prefieres, puedes basarte en la p\u00e1gina oficial del juego pero \u00a1\u00a1 NO TE PONGAS A JUGAR !! Crea el archivo 604campeones.php donde listes todos los campeones del LOL que has metido en tu base de datos. Acu\u00e9rdate que para ello deberas hacer una conexi\u00f3n con la base de datos y un foreach para cada campe\u00f3n que tengas albergado en la tabla campeon . Modifica el archivo 604campeones.php y gu\u00e1rdalo como 606campeones.php pero pon al lado de cada uno de los campeones listados un bot\u00f3n para editar y otro para borrar . Cada uno de esos botones har\u00e1 la correspondiente funci\u00f3n dependiendo del id del campe\u00f3n seleccionado. Al pinchar en editar, el usuario ser\u00e1 redirigido al archivo 605editando.php donde mostrar\u00e1 un formulario con los campos rellenos por los datos del campe\u00f3n seleccionado. Al darle al bot\u00f3n de guardar los datos se guardar\u00e1n en la base de datos y el usuario ser\u00e1 redirigido a la lista de campones para poder ver los cambios. Al pinchar en borrar, el usuario ser\u00e1 preguntado a trav\u00e9s de un mensaje de JavaScript (prompt) si est\u00e1 seguro de que quiere borrar al campe\u00f3n seleccionado. En el mensaje de confirmaci\u00f3n debe aparecer el nombre del campe\u00f3n seleccionado . Si el usuario pincha en Aceptar el campe\u00f3n ser\u00e1 eliminado de la base de datos y el usuario ser\u00e1 redirigido nuevamente al listado de campeones para comprobar que, efectivamente dicho campe\u00f3n se ha eliminado de la lista. Filtros y comodines \u00b6 modifica el archivo 604campeones.php y gu\u00e1rdalo como 606campeones.php para que se muestre como una tabla con las columnas de la propia tabla de la base de datos, es decir; id, nombre, rol, dificultad, descripci\u00f3n. Al lado de cada nombre de cada columna, pon 2 iconos que sean \u02c4 \u02c5 y que cada uno de ellos ordene el listado en funci\u00f3n de cu\u00e1l se haya pinchado. Si se ha pulsado en Nombre el icono de \u02c4, el listado debe aparecer ordenado por nombre ascendente. Si por el contrario se ha pulsado \u02c5 tendr\u00e1 que ordenarse por nombre descendente. Ten en cuenta que cada icono debe llevar consigo un enlace al listado que contenga par\u00e1metros en la URL que satisfagan las opciones seleccionadas as\u00ed que haced uso de $_GET para poder capturarlos y escribid las consultas SQL que sean necesarias para hacer cada uno de los filtros. Puedes usar Font Awesome para los iconos pero es algo opcional PDO \u00b6 Aprovecha lo que hiciste de los ejercicios 601 al 604 pero esta vez utilizando PDO::FETCH_ASSOC . Crea una tabla nueva dentro de la base de datos lol que ya tienes y crea un sistema de login con usuarios. Introduce en la base de datos al menos 3 usuarios diferentes con sus contrase\u00f1as distintas. Recuerda que: La tabla nueva ha de llamarse usuario Los campos a crear en la nueva tabla deben ser id [*] nombre usuario password email Las contrase\u00f1as deben ser cifradas antes de guardar el datos en la base de datos. Crea el formulario 608registro.php donde el usuario introduzca los datos de registro y vinc\u00falalo con 608nuevoUsuario.php para que recoja los datos mediante POST y los inserte en la base de datos si todo ha ido bien. Queda PROHIBID\u00cdSIMO acceder a 608nuevoUsuario.php sin el formulario rellenado. La sentencia de INSERT debe estar controlada para que no pueda introducirse ning\u00fan dato en blanco. Ten en cuenta que est\u00e1s modificando la base de datos y no queremos campos mal rellenados. Si todo ha ido bien, muestra un mensaje por pantalla diciendo El usuario XXX ha sido introducido en el sistema con la contrase\u00f1a YYY . Ficheros \u00b6 M\u00e9tete en loremipsum.com y genera un texto de 3 p\u00e1rrafos. Copia el texto generado y gu\u00e1rdalo en un archivo nuevo llamado 609loremIpsum.txt . Genera un archivo php llamado 609loremIpsum.php y muestra por pantalla el texto del archivo txt que acabas de crear, su tama\u00f1o en Kilobytes , la fecha de su \u00faltima modificaci\u00f3n y el ID de usuario que cre\u00f3 el archivo. Vuelve a cargar el archivo 606campeones.php y ren\u00f3mbralo a 610campeones.php pero en vez de mostrar la tabla por pantalla, genera un archivo CSV 610campeones.csv y otro 610campeonesCSV.php donde saques por pantalla el contenido del archivo 610campeones.csv . Proyecto CholloSevero \u00b6 Estructura el proyecto y piensa en las tablas y bases de datos que necesit\u00e9is para crear el proyecto. Crea los UML necesarios con nombres como 615UMLnombreTabla metiendo todos los campos que se necesiten as\u00ed como las relaciones que creas necesarias. Establece un sistema de archivos para el proyecto, teniendo en cuenta que van a haber im\u00e1genes, css, funciones php, constantes e incluso javaScript (pero algo b\u00e1sico) para controlar los eventos del usuario a lo largo de la interfaz. Crea un sistema de login/password con los roles administrador y usuario . De momento que se validen los usuarios correctamente utilizando encriptaci\u00f3n en la contrase\u00f1a. Administrador : Puede ver todos los usuarios registrados as\u00ed como los administradores y los chollos creados en la base de datos. Usuario : Puede ver sus propios chollos, editarlos y borrarlos, adem\u00e1s de crear nuevos. Crea la vista para poner nuevos chollos y recuerda s\u00f3lo pueden entrar a esta vista usuarios registrados o administradores . Crea la vista donde se muestren todos los chollos creados. Esta vista puede verla cualquier usuario, registrado o no en el sistema. Ten en cuenta que esta vista ser\u00e1 la vista general de la web as\u00ed que puedes llamarla index.php donde despu\u00e9s aplicaremos filtros por $_GET.","title":"6.- Acc\u00e8s a Dades"},{"location":"06accesoDatos.html#acceso-a-datos","text":"En esta unidad vamos a aprender a acceder a datos que se encuentran en un servidor; recuperando, editando y creando dichos datos a trav\u00e9s de una base de datos. A trav\u00e9s de las distintas capas o niveles, de las cuales 2 de ellas ya conocemos ( Apache , PHP ) y MySQL la que vamos a estudiar en este tema.","title":"Acceso a datos"},{"location":"06accesoDatos.html#instalacion","text":"A trav\u00e9s de XAMPP es muy sencillo, simplemente nos descargar\u00edamos el programa y lo activar\u00edamos. Para descargar XAMPP pulsa aqu\u00ed . Con Docker nos descargaremos esta imagen de docker y lanzamos docker-compose up -d Si todo ha salido bien y el contenedor est\u00e1 en marcha, podremos visitar la p\u00e1gina de phpMyAdmin de la siguiente manera http://localhost:8000 Para acceder debemos utilizar las siguientes credenciales que vienen configuradas en el alrchivo docker-compose.yml usuario: root contrase\u00f1a: 1234","title":"Instalaci\u00f3n"},{"location":"06accesoDatos.html#estructura-de-una-base-de-datos","text":"Sabemos que una base de datos tiene muchos campos con sus nombres y valores, pero adem\u00e1s sabemos que la base de datos debe tener un nombre. por tanto tendr\u00edamos la siguiente estructura para una base de datos: NombreBaseDeDatos |__Tabla-#1 | |__DatosTabla-#1 | |__Tabla-#2 | |__DatosTabla-#2 | |__Tabla-#3 | |__DatosTabla-#3 [...] Ve\u00e1moslo en un ejemplo real Ryanair |__pasajero | |__id[*] | |__nombre | |__apellidos | |__edad | |__id_vuelo[^] | |__vuelo | |__id[*] | |__n_plazas | |__disponible | |__id_pais[^] | |__pais |__id[*] |__nombre [*] Clave primaria [^] Clave For\u00e1nea","title":"Estructura de una base de datos"},{"location":"06accesoDatos.html#chollosevero","text":"Como muy bien hab\u00e9is elegido, a lo largo de esta unidad vamos a trabajar con una base de datos que iremos confeccionando conforme avancemos, donde almacenaremos la informaci\u00f3n relacionada con ofertas que publiquen los usuarios y los listaremos en funci\u00f3n de varios filtros; nuevos, m\u00e1s votados, m\u00e1s vistos, m\u00e1s comentados entre otros, al m\u00e1s puro estilo Chollometro .","title":"CholloSevero"},{"location":"06accesoDatos.html#sql","text":"Este lenguaje de consulta estructurada ( Structured Query Language ) es el que vamos a utilizar para realizar las consultas a nuestras bases de datos para mostrar el contenido en las distintas interfaces web que creemos a lo largo de la unidad. Si quieres saber m\u00e1s detalles visita Wiki SQL Ejemplo de una sentencia SQL donde seleccionamos todas las filas y columnas de nuestra tabla llamada 'pais' SELECT * FROM pais Estas sentencias pueden invocarse desde la consola de comandos mediante el int\u00e9rprete mysql (previamente instalado en el sistema) o a trav\u00e9s de la herramienta phpMyAdmin. Las sentencias SQL tambi\u00e9n las podemos usar dentro de nuestro c\u00f3digo php, de tal manera que cuando se cargue nuestra interfaz web, lance una sentecia SQL para mostrar los datos que queramos. <?php // Listado de clientes, ordenados por DNI de manera ASCendente $clientesOrdenadosPorDNI = \"SELECT * FROM `pasajero` ORDER BY `dni`\" ASC ; ?>","title":"SQL"},{"location":"06accesoDatos.html#phpmyadmin","text":"Este software funciona bajo Apache y PHP y es m\u00e1s que nada una interfaz web para gestionar las bases de datos que tengamos disponibles en nuestro servidor local. Muchos hostings ofrecen esta herramienta por defecto para poder gestionar las BBDD que tengamos configuradas bajo nuestra cuenta.","title":"phpMyAdmin"},{"location":"06accesoDatos.html#creando-una-base-de-datos-dentro-de-phpmyadmin","text":"Para crear una nueva base de datos debemos entrar en phpMyAdmin como usuario root y pinchar en la opci\u00f3n Nueva del men\u00fa de la izquierda. En la nueva ventana de creaci\u00f3n pondremos un nombre a nuestra bbdd. Tambi\u00e9n estableceremos el cotejamiento utf8m4_unicode_ci para que nuestra bbdd soporte todo tipo de caracteres (como los asi\u00e1ticos) e incluso emojis ;) Le damos al bot\u00f3n de Crear para crear la bbdd y empezar a escribir las distintas tablas que vayamos a introducir en ella. El sistema generar\u00e1 el c\u00f3digo SQL para crear todo lo que le hemos puesto y crear\u00e1 la base de datos con las tablas que le hayamos metido. CREATE TABLE ` persona ` . ( ` id ` INT NOT NULL AUTO_INCREMENT , ` nombre ` TINYTEXT NOT NULL , ` apellidos ` TEXT NOT NULL , ` telefono ` TINYTEXT NOT NULL , PRIMARY KEY ( ` id ` )) ENGINE = InnoDB ;","title":"Creando una base de datos dentro de phpMyAdmin"},{"location":"06accesoDatos.html#opciones-en-phpmyadmin","text":"Cuando seleccionamos una base de datos de la lista, el sistema nos muestra varias pesta\u00f1as con las cuales interactuar con la base de datos en cuesti\u00f3n: Estructura : Podemos ver las distintas tablas que consolidan nuestra base de datos SQL : Por si queremos inyectar c\u00f3digo SQL para que el sistema lo interprete Buscar : Sirve para buscar por t\u00e9rminos, en nuestra base de datos, aplicando distintos filtros de b\u00fasqueda Generar consulta : parecido a SQL pero de una manera m\u00e1s gr\u00e1fica, sin tener que saber nada del lenguaje Exportar e importar : Como su nombre indica, para hacer cualquiera de las 2 operaciones sobre la base de datos Operaciones : Distintas opciones avanzadas para realizar en nuestra base de datos, de la cual destacaremos la opci\u00f3n Cotejamiento donde podremos cambiar el cotejamiento de nuestra tabla pero OJO CON \u00c9STO porque podemos eliminar datos sin querer, ya que al cambiar el cotejamiento podemos suprimir caracteres no soportados por el nuevo cotejamiento No vamos a profundizar en el resto de opciones pero, en la pesta\u00f1a M\u00e1s existe la opci\u00f3n Dise\u00f1ador para poder editar las relaciones entre tablas de una manera gr\u00e1fica (pinchando y arrastrando) que veremos m\u00e1s adelante.","title":"Opciones en phpMyAdmin"},{"location":"06accesoDatos.html#mysqli","text":"PHP hace uso de esta extensi\u00f3n mejorada para poder comunicarse con las bases de datos, ya sean MySQL (4.1 o superior) o MariaDB. Cualquier consulta que queramos hacer a una base de datos necesitaremos hacer uso de la extensi\u00f3n mysqli() Veamos como conectarnos con una base de datos a trav\u00e9s del c\u00f3digo PHP <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 // \"SERVIDOR\", \"USUARIO\", \"CONTRASE\u00d1A\", \"BASE DE DATOS\" $conexion = mysqli_connect ( \"d939ebf6a741\" , \"tuUsuario\" , \"1234\" , \"pruebas\" ); // COMPROBAMOS LA CONEXI\u00d3N if ( mysqli_connect_errno ()) { echo \"Failed to connect to MySQL: \" . mysqli_connect_error (); exit (); } echo \"<h1>Bienvenid@ a MySQL !!</h1>\" ; ?> servidor : El servidor donde se encuentra la base de datos que queremos usar suele ser localhost , pero en nuestro caso, al utilizar Docker ser\u00e1 el nombre de la imagen mysql:8.0 que aparece al dejar el rat\u00f3n encima en el Visual Studio Code usuarioDB : El usuario de la base de datos passwordDB : La contrase\u00f1a para ese usuario de la base de datos baseDeDatos : Nombre de la base de datos que queramos usar Si todo ha salido bien habr\u00e9is visto un mensaje diciendo Bienvenid@ a MySQL !!","title":"MySQLi"},{"location":"06accesoDatos.html#recuperando-datos-de-una-bd","text":"Ahora que ya sabemos c\u00f3mo conectarnos a una base de datos alojada en nuestro servidor, lo que necesitamos saber es c\u00f3mo recuperar datos almacenados en la base de datos. Durante la instalaci\u00f3n de la imagen de Docker, se ha creado una tabla llamada Pruebas que contiene varios registros de distintas personas. Vamos a recuperar esos datos para ver de qu\u00e9 forma se hace con PHP. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $conexion = mysqli_connect ( \"d939ebf6a741\" , \"lupa\" , \"1234\" , \"pruebas\" ); // COMPROBAMOS LA CONEXI\u00d3N if ( mysqli_connect_errno ()) { echo \"Failed to connect to MySQL: \" . mysqli_connect_error (); exit (); } // CONSULTA A LA BASE DE DATOS $consulta = \"SELECT * FROM `Person`\" ; $listaUsuarios = mysqli_query ( $conexion , $consulta ); // COMPROBAMOS SI EL SERVIDOR NOS HA DEVUELTO RESULTADOS if ( $listaUsuarios ) { // RECORREMOS CADA RESULTADO QUE NOS DEVUELVE EL SERVIDOR foreach ( $listaUsuarios as $usuario ) { echo \" $usuario[id] $usuario[name] <br> \" ; } } ?> Si todo ha salido bien, por pantalla ver\u00e1s el siguiente listado \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 http://localhost/pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 1 William 2 Marc 3 John 4 Antonio Moreno","title":"Recuperando datos de una BD"},{"location":"06accesoDatos.html#php-data-objects-pdo","text":"De la misma manera que hemos visto con mysqli, PHP Data Objects (o PDO) es un driver de PHP que se utiliza para trabajar bajo una interfaz de objetos con la base de datos. A d\u00eda de hoy es lo que m\u00e1s se utiliza para manejar informaci\u00f3n desde una base de datos, ya sea relacional o no relacional. De igual manera que pasaba con los objetos en PHP nativos, en la interfaz de MySQL la cosa cambia la hora de conectarnos con una base de datos. <?php $conexion = new PDO ( 'mysql:host=localhost; dbname=dwes' , 'dwes' , 'abc123' ); Adem\u00e1s, con PDO podemos usar las excepciones con try catch para gestionar los errores que se produzcan en nuestra aplicaci\u00f3n, para ello, como hac\u00edamos antes, debemos encapsular el c\u00f3digo entre bloques try / catch. <?php $dsn = 'mysql:dbname=prueba;host=127.0.0.1' ; $usuario = 'usuario' ; $contrase\u00f1a = 'contrase\u00f1a' ; try { $mbd = new PDO ( $dsn , $usuario , $contrase\u00f1a ); $mbd -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); } catch ( PDOException $e ) { echo 'Fall\u00f3 la conexi\u00f3n: ' . $e -> getMessage (); } En primer lugar, creamos la conexi\u00f3n con la base de datos a trav\u00e9s del constructor PDO pas\u00e1ndole la informaci\u00f3n de la base de datos. En segundo lugar, establecemos los par\u00e1metros para manejar las excepciones, en este caso hemos utilizado: PDO::ATTR_ERRMODE indic\u00e1ndole a PHP que queremos un reporte de errores. PDO::ERRMODE_EXCEPTION con este atributo obligamos a que lance excepciones, adem\u00e1s de ser la opci\u00f3n m\u00e1s humana y legible que hay a la hora de controlar errores. Cualquier error que se lance a trav\u00e9s de PDO, el sistema lanzar\u00e1 una PDOException .","title":"PHP Data Objects :: PDO"},{"location":"06accesoDatos.html#fichero-de-configuracion-de-la-bd","text":"De la misma manera que creamos nuestro archivo de funciones funciones-php y albergamos todas las funciones que se usan de manera global en la aplicaci\u00f3n, podemos establecer un archivo de constantes donde definamos los par\u00e1metros de conexi\u00f3n con la base de datos. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 conexion.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 constDSN = \"mysql:host=localhost;dbname=dwes\" ; constUSUARIO = \"dwes\" ; constPASSWORD = \"abc123\" ; /* \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 NO SUBAS ESTE ARCHIVO A git \u2592\u2592\u2592\u2592\u2592 \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 */ Este archivo contiene informaci\u00f3n muy sensible as\u00ed que no es recomendable que subas este archivo a git.","title":"Fichero de configuraci\u00f3n de la BD"},{"location":"06accesoDatos.html#sentencias-preparadas","text":"Se trata de sentencias que se establecen como si fueran plantillas de la SQL que vamos a lanzar, aceptando par\u00e1metros que son establecidos a posteriori de la declaraci\u00f3n de la sentencia preparada. Las sentencias preparadas evitan la injecci\u00f3n de SQL (SQL Injection) y mejoran el rendimiento de nuestras aplicaci\u00f3nes o p\u00e1ginas web. <?php $sql = \"INSERT INTO Clientes VALUES (?, ?, ?, ?)\" ; Cada interrogante es un par\u00e1metro que estableceremos despu\u00e9s, unas cuantas l\u00edneas m\u00e1s abajo. Una vez tenemos la plantilla de nuestra consulta, debemos seguir con la preparaci\u00f3n junto con 3 m\u00e9todos m\u00e1s de PHP para su completa ejecuci\u00f3n: prepare: prepara la sentenci\u00e1n antes de ser ejecutada bind : el tipo de uni\u00f3n (bind) de dato que puede ser mediante ' ? ' o ' :parametro ' execute se ejecuta la consulta uniendo la plantilla con las bariables o par\u00e1metros que hemos establecido.","title":"Sentencias preparadas"},{"location":"06accesoDatos.html#ejemplo-parametros","text":"<?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Borrando con par\u00e1metros \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 include \"config/database.inc.php\" ; $conexion = null ; try { $cantidad = $_GET [ \"cantidad\" ]; $conexion = new PDO ( DSN , USUARIO , PASSWORD ); $conexion -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"DELETE FROM stock WHERE unidades = ?\" ; $sentencia = $conexion -> prepare ( $sql ); $isOk = $sentencia -> execute ([ $cantidad ]); $cantidadAfectada = $sentencia -> rowCount (); echo $cantidadAfectada ; } catch ( PDOException $e ) { echo $e -> getMessage (); } $conexion = null","title":"Ejemplo par\u00e1metros"},{"location":"06accesoDatos.html#ejemplo-bindparam","text":"Muy parecido a utilizar par\u00e1metros pero esta vez la variable est\u00e1 dentro de la sentencia SQL, en este caso la hemos llamado :cant <?php include \"config/database.inc.php\" ; $conexion = null ; try { $cantidad = $_GET [ \"cantidad\" ] ?? 0 ; $conexion = new PDO ( DSN , USUARIO , PASSWORD ); $conexion -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"DELETE FROM stock WHERE unidades = :cant\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> bindParam ( \":cant\" , $cantidad ); $isOk = $sentencia -> execute (); $cantidadAfectada = $sentencia -> rowCount (); echo $cantidadAfectada ; } catch ( PDOException $e ) { echo $e -> getMessage (); } $conexion = null ;","title":"Ejemplo bindParam"},{"location":"06accesoDatos.html#bindparam-vs-bindvalue","text":"Utilizaremos bindValue() cuando tengamos que insertar datos s\u00f3lo una vez, en cambio, deberemos usar bindParam() cuando tengamos que pasar datos m\u00faltiples, como por ejemplo, un array. <?php // se asignan nombre a los par\u00e1metros $sql = \"DELETE FROM stock WHERE unidades = :cant\" ; $sentencia = $conexion -> prepare ( $sql ); // bindParam enlaza por referencia $cantidad = 0 ; $sentencia -> bindParam ( \":cant\" , $cantidad ); $cantidad = 1 ; // se eliminan con cant = 1 $isOk = $sentencia -> execute (); // bindValue enlaza por valor $cantidad = 0 ; $sentencia -> bindValue ( \":cant\" , $cantidad ); $cantidad = 1 ; // se eliminan con cant = 0 $isOk = $sentencia -> execute (); Para m\u00e1s informaci\u00f3n y uso de las variables PDO consulta el manual de PHP .","title":"bindParam VS bindValue"},{"location":"06accesoDatos.html#insertando-registros","text":"A la hora de insertar registros en una base de datos, debemos tener en cuenta que en la tabla puede haber valores autoincrementados. Para salvaguardar \u00e9sto, lo que debemos hacer es dejar ese cambpo autoincrementado vac\u00edo, pero a la hora de hacer la conexi\u00f3n, debemos recuperarlo con el m\u00e9todo lastInsertId() . <?php $nombre = $_GET [ \"nombre\" ] ?? \"SUCURSAL X\" ; $telefono = $_GET [ \"telefono\" ] ?? \"636123456\" ; $sql = \"INSERT INTO tienda(nombre, tlf) VALUES (:nombre, :telefono)\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> bindParam ( \":nombre\" , $nombre ); $sentencia -> bindParam ( \":telefono\" , $telefono ); $isOk = $sentencia -> execute (); $idGenerado = $conexion -> lastInsertId (); echo $idGenerado ;","title":"Insertando registros"},{"location":"06accesoDatos.html#consultando-registros","text":"A la hora de recuperar los resultados de una consulta, bastar\u00e1 con invocar al m\u00e9todo PDOStatement::fetch para listar las filas generadas por la consulta. Pero debemos elegir el tipo de dato que queremos recibir entre los 3 que hay disponibles: PDO::FETCH_ASSOC: array indexado cuyos keys son el nombre de las columnas. PDO::FETCH_NUM: array indexado cuyos keys son n\u00fameros. PDO::FETCH_BOTH: valor por defecto. Devuelve un array indexado cuyos keys son tanto el nombre de las columnas como n\u00fameros. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 include \"config/database.inc.php\" ; $conexion = null ; try { $conexion = new PDO ( DSN , USUARIO , PASSWORD ); $conexion -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"select * from tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_ASSOC ); $sentencia -> execute (); while ( $fila = $sentencia -> fetch ()){ echo \"Codigo:\" . $fila [ \"cod\" ] . \"<br />\" ; echo \"Nombre:\" . $fila [ \"nombre\" ] . \"<br />\" ; echo \"Tel\u00e9fono:\" . $fila [ \"tlf\" ] . \"<br />\" ; } } catch ( PDOException $e ) { echo $e -> getMessage (); } $conexion = null ; Recuperando datos con una matriz como resultado de nuestra consulta <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_ASSOC ); $sentencia -> execute (); $tiendas = $sentencia -> fetchAll (); foreach ( $tiendasas$tienda ) { echo \"Codigo:\" . $tienda [ \"cod\" ] . \"<br />\" ; echo \"Nombre:\" . $tienda [ \"nombre\" ] . \"<br />\" ; } Pero si lo que queremos es leer datos con forma de objeto utilizando PDO::FETCH_OBJ , debemos crear un objeto con propiedades p\u00fablicas con el mismo nombre que las columnas de la tabla que vayamos a consultar. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con formato de objeto \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_OBJ ); $sentencia -> execute (); while ( $t = $sentencia -> fetch ()) { echo \"Codigo:\" . $t -> cod . \"<br />\" ; echo \"Nombre:\" . $t -> nombre . \"<br />\" ; echo \"Tel\u00e9fono:\" . $t -> tlf . \"<br />\" ; }","title":"Consultando registros"},{"location":"06accesoDatos.html#consultas-con-modelos","text":"Llevamos tiempo creando clases en PHP y las consultas tambi\u00e9n admiten este tipo de datos mediante el uso de PDO::FETCH_CLASS Si usamos este m\u00e9todo, debemos tener en cuenta que los nombres de los atributos privados deben coincidir con los nombres de las columnas de la tabla que vayamos a manejar. As\u00ed pues, si por lo que sea cambiamos la estructura de la tabla DEBEMOS CAMBIAR nuestra clase para que todo siga funcionando. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 classTienda { private int $cod ; private string $nombre ; private ? string $tlf ; public function getCodigo () : int { return $this -> cod ; } public function getNombre () : string { return $this -> nombre ; } public function getTelefono () : ? string { return $this -> tlf ; } } <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consultando a trav\u00e9s de la clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); // Aqu\u00ed 'Tienda' es el nombre de nuestra clase $sentencia -> setFetchMode ( PDO :: FETCH_CLASS , \"Tienda\" ); $sentencia -> execute (); while ( $t = $sentencia -> fetch ()) { echo \"Codigo: \" . $t -> getCodigo () . \"<br />\" ; echo \"Nombre: \" . $t -> getNombre () . \"<br />\" ; echo \"Tel\u00e9fono: \" . $t -> getTelefono () . \"<br />\" ; var_dump ( $t ); } Pero \u00bfqu\u00e9 pasa si nuestras clases tienen constructor? pues que debemos indicarle, al m\u00e9todo FECTH, que rellene las propiedades despu\u00e9s de llamar al constructor y para ello hacemos uso de PDO::FETCH_PROPS_LATE . <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consulta para una clase con constructor \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_CLASS | PDO :: FETCH_PROPS_LATE , Tienda :: class ); $sentencia -> execute (); $tiendas = $sentencia -> fetchAll ();","title":"Consultas con modelos"},{"location":"06accesoDatos.html#consultas-con-like","text":"Para utilizar el comod\u00edn LIKE u otros comodines, debemos asociarlo al dato y NUNCA en la propia consulta. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Utilizando comodines :: LIKE \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $sql = \"SELECT * FROM tienda where nombre like :nombre or tlf like :tlf\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> setFetchMode ( PDO :: FETCH_CLASS | PDO :: FETCH_PROPS_LATE , Tienda :: class ); $cadBuscar = \"%\" . $busqueda . \"%\" ; $sentencia -> execute ([ \"nombre\" => $cadBuscar , \"tlf\" => $cadBuscar ]); $result = $sentencia -> fetchAll (); Ten\u00e9is una lista de ejemplos muy completa en la documentaci\u00f3n oficial .","title":"Consultas con LIKE"},{"location":"06accesoDatos.html#login-password","text":"Para manejar un sistema completo de login y password con contrase\u00f1as cifradas, necesitamos un m\u00e9todo que cifre esos strings que el usuario introduce como contrase\u00f1a; tanto en el formulario de registro como en el del login, ya que al codificar una contrase\u00f1a, despu\u00e9s tenemos que decodificarla para comprobar que ambas contras\u00f1eas (la que instroduce el usuario en el login y la que tenemos en la base de datos) coincidan. Necesitamos pues: password_hash() para almacenar la contrase\u00f1a en la base de datos a la hora de hacer el INSERT PASSWORD_DEFAULT almacenamos la contrase\u00f1a usando el m\u00e9todo de encriptaci\u00f3n bcrypt PASSWORD_BCRYPT almacenamos la contrase\u00f1a usando el algoritmo CRYPT_BLOWFISH compatible con crypt() password_verify() para verificar el usuario y la contrase\u00f1a <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Almacenando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $usu = $_POST [ \"usuario\" ]; $pas = $_POST [ \"password\" ]; $sql = \"INSERT INTO usuarios(usuario, password) VALUES (:usuario, :password)\" ; $sentencia = $conexion -> prepare ( $sql ); $isOk = $sentencia -> execute ([ \"usuario\" => $usu , \"password\" => password_hash ( $pas , PASSWORD_DEFAULT ) ]); Ahora que tenemos el usuario codificado y guardado en la base de datos, vamos a recuperarlo para poder loguearlo correctamente. <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Recuperando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $usu = $_POST [ \"login\" ] ?? \"\" ; $sql = \"select * from usuarios where usuario = ?\" ; $sentencia = $conexion -> prepare ( $sql ); $sentencia -> execute ([ $usu ]); $usuario = $sentencia -> fetch (); if ( $usuario && password_verify ( $_POST [ 'pass' ], $usuario [ 'password' ])) { echo \"OK!\" ; } else { echo \"KO\" ; }","title":"Login &amp; Password"},{"location":"06accesoDatos.html#acceso-a-ficheros","text":"Gracias a la funcion fopen() desde PHP podemos abrir archivos que se encuentren en nuestros servidor o una URL. A esta funci\u00f3n hay que pasarle 2 par\u00e1metros; el nombre del archivo que queremos abrir y el modo en el que se abrir\u00e1 $fp = fopen(\"miarchivo.txt\", \"r\"); Muchas veces no podemos abrir el archivo porque \u00e9ste no se encuentra o no tenemos acceso a \u00e9l, por eso es recomendable comprobar que podemos hacerlo if (!$fp = fopen(\"miarchivo.txt\", \"r\")){ echo \"No se ha podido abrir el archivo\"; }","title":"Acceso a ficheros"},{"location":"06accesoDatos.html#modos-de-apertura-de-ficheros","text":"r : Modo lectura. Puntero al principio del archivo. r+ : Apertura para lectura y escritura. Puntero al principio del archivo w : Apertura para escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear. w+ : Apertura para lectura y escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear. a : Apertura para escritura. Puntero al final del archivo. Si no existe se intenta crear. a+ : Apertura para lectura y escritura. Puntero al final del archivo. Si no existe se intenta crear. x : Creaci\u00f3n y apertura para s\u00f3lo escritura. Puntero al principio del archivo. Si el archivo ya existe dar\u00e1 error E_WARNING. Si no existe se intenta crear. x+ : Creaci\u00f3n y apertura para lectura y escritura. Mismo comportamiento que x. c : Apertura para escritura. Si no existe se crea. Si existe no se sobreescribe ni da ning\u00fan error. Puntero al principio del archivo. c+ : Apertura para lectura y escritura. Mismo comportamiento que C. b : Cuando se trabaja con archivos binarios como jpg, pdf, png y dem\u00e1s. Se suele colocar al final del modo, es decir rb, r+b, x+b, wb...","title":"Modos de apertura de ficheros"},{"location":"06accesoDatos.html#operaciones-con-archivos","text":"Para poder leer un archivo necesitamos usar la funci\u00f3n fread() de PHP // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Abriendo un archivo y leyendo su contenido \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $file = \"miarchivo.txt\"; $fp = fopen($file, \"r\"); // filesize() nos devuelve el tama\u00f1o del archivo en cuesti\u00f3n $contents = fread($fp, filesize($file)); // Cerramos la conexi\u00f3n con el archivo fclose(); Si lo que queremos es escribir en un archivo, deberemos hacer uso de la funci\u00f3n fwrite() // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Escribiendo en un archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $file = \"miarchivo.txt\"; $texto = \"Hola que tal\"; $fp = fopen($file, \"w\"); fwrite($fp, $texto); fclose($fp);","title":"Operaciones con archivos"},{"location":"06accesoDatos.html#informacion-de-un-fichero","text":"Con PHP y su m\u00e9todo stat() podemos obtener informaci\u00f3n sobre los archivos que le indiquemos. Este m\u00e9todo devuelve hasta un total de 12 elementos con ifnormaci\u00f3n acerca de nuestro archivo. 0 dev n\u00famero de dispositivo 1 ino n\u00famero de i-nodo 2 mode modo de protecci\u00f3n del i-nodo 3 nlink n\u00famero de enlaces 4 uid ID de usuario del propietario 5 gid ID de grupo del propietario 6 rdev tipo de dispositivo, si es un dispositivo i-nodo 7 size tama\u00f1o en bytes 8 atime momento del \u00faltimo acceso (tiempo Unix) 9 mtime momento de la \u00faltima modificaci\u00f3n (tiempo Unix) 10 ctime momento de la \u00faltima modificaci\u00f3n del i-nodo (tiempo Unix) 11 blksize tama\u00f1o del bloque E/S del sistema de ficheros 12 blocks n\u00famero de bloques de 512 bytes asignados Unos ejemplos... <?php // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Informaci\u00f3n del archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 $file = \"miarchivo.txt\" ; $texto = \"Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.\" ; $fp = fopen ( $file , \"w\" ); fwrite ( $fp , $texto ); $datos = stat ( $file ); echo $datos [ 3 ] . \"<br>\" ; // N\u00famero de enlaces, 1 echo $datos [ 7 ] . \"<br>\" ; // Tama\u00f1o en bytes, 85 echo $datos [ 8 ] . \"<br>\" ; // Momento de \u00faltimo acceso, 1444138104 echo $datos [ 9 ] . \"<br>\" ; // Momento de \u00faltima modificaci\u00f3n, 1444138251 ?> Echa un vistazo a las funciones de directorios que tiene PHP, es muy interesante.","title":"Informaci\u00f3n de un fichero"},{"location":"06accesoDatos.html#archivos-pdf","text":"Con PHP podemos manejar todo tipo de archivos como ya hemos visto pero, \u00bfqu\u00e9 pasa si queremos generar ficheros PDF con datos sacados de una base de datos? Gracias a una clase escrita en PHP, podemos generar archivos PDF sin necesidad de instalar librer\u00edas adicionales en nuestro servidor. Para ello, como tenemos composer dentro de nuestra imagen de Docker, usaremos composer para instalar esta dependencia. Acu\u00e9rdate que debemes haber hecho composer init para empezar un proyecto con composer, de lo contrario no podr\u00e1s a\u00f1adir ning\u00fan paquete. Veamos un ejemplo de Hello World convertido a PDF <?php ob_end_clean (); require ( 'fpdf/fpdf.php' ); // Instanciamos la clase // P = Portrait | mm = unidades en mil\u00edmetros | A4 = formato $pdf = new FPDF ( 'P' , 'mm' , 'A4' ); // A\u00f1adimos una p\u00e1gina $pdf -> AddPage (); // Establecemos la fuente y el tama\u00f1o de letra $pdf -> SetFont ( 'Arial' , 'B' , 18 ); // Imprimimos una celda con el texto que nosotros queramos $pdf -> Cell ( 60 , 20 , 'Hello World!' ); // Terminamos el PDF $pdf -> Output (); ?> Hay muchos ejemplos y tutoriales, as\u00ed como documentaci\u00f3n de la clase FPDF en la p\u00e1gina oficial. Visita la secci\u00f3n de tutoriales y el manual para sacar mayor partido a esta clase. <?php require ( 'fpdf/fpdf.php' ); class PDF extends FPDF { // Cabecera function Header () { // A\u00f1adimos un logotipo $this -> Image ( 'logo.png' , 10 , 8 , 33 ); // establecemos la fuente y el tama\u00f1o $this -> SetFont ( 'Arial' , 'B' , 20 ); // Movemos el contenido un poco a la derecha $this -> Cell ( 80 ); // Pintamos la celda $this -> Cell ( 50 , 10 , 'Cabecera' , 1 , 0 , 'C' ); // Pasamos a la siguiente l\u00ednea $this -> Ln ( 20 ); } // Pie de p\u00e1gina function Footer () { // Nos posicionamos a 1.5 cm desde abajo del todo de la p\u00e1gina $this -> SetY ( - 15 ); // Arial italic 8 $this -> SetFont ( 'Arial' , 'I' , 8 ); // N\u00famero de p\u00e1gina $this -> Cell ( 0 , 10 , 'P\u00e1gina ' . $this -> PageNo () . '/{nb}' , 0 , 0 , 'C' ); } } // Instanciamos la clase $pdf = new PDF (); // Definimos un alias para la numeraci\u00f3n de p\u00e1ginas $pdf -> AliasNbPages (); $pdf -> AddPage (); $pdf -> SetFont ( 'Times' , '' , 14 ); for ( $i = 1 ; $i <= 30 ; $i ++ ) $pdf -> Cell ( 0 , 10 , 'N\u00famero de l\u00ednea ' . $i , 0 , 1 ); $pdf -> Output (); ?>","title":"Archivos PDF"},{"location":"06accesoDatos.html#actividades","text":"","title":"Actividades"},{"location":"06accesoDatos.html#mysqli_1","text":"Crea una nueva base de datos con el nombre lol y cotejamiento de datos utf8mb4_unicode_ci . En nuestra base de datos lol que acabamos de crear, vamos a crear la tabla campeon con los siguientes campos. id [*] nombre rol dificultad descripcion Acu\u00e9rdate que [*] significa que es clave primaria y no olvides poner el tipo de datos de cada uno de los campos. Rellena la tabla campeon con, al menos 5 registros, con los datos que t\u00fa quieras o si lo prefieres, puedes basarte en la p\u00e1gina oficial del juego pero \u00a1\u00a1 NO TE PONGAS A JUGAR !! Crea el archivo 604campeones.php donde listes todos los campeones del LOL que has metido en tu base de datos. Acu\u00e9rdate que para ello deberas hacer una conexi\u00f3n con la base de datos y un foreach para cada campe\u00f3n que tengas albergado en la tabla campeon . Modifica el archivo 604campeones.php y gu\u00e1rdalo como 606campeones.php pero pon al lado de cada uno de los campeones listados un bot\u00f3n para editar y otro para borrar . Cada uno de esos botones har\u00e1 la correspondiente funci\u00f3n dependiendo del id del campe\u00f3n seleccionado. Al pinchar en editar, el usuario ser\u00e1 redirigido al archivo 605editando.php donde mostrar\u00e1 un formulario con los campos rellenos por los datos del campe\u00f3n seleccionado. Al darle al bot\u00f3n de guardar los datos se guardar\u00e1n en la base de datos y el usuario ser\u00e1 redirigido a la lista de campones para poder ver los cambios. Al pinchar en borrar, el usuario ser\u00e1 preguntado a trav\u00e9s de un mensaje de JavaScript (prompt) si est\u00e1 seguro de que quiere borrar al campe\u00f3n seleccionado. En el mensaje de confirmaci\u00f3n debe aparecer el nombre del campe\u00f3n seleccionado . Si el usuario pincha en Aceptar el campe\u00f3n ser\u00e1 eliminado de la base de datos y el usuario ser\u00e1 redirigido nuevamente al listado de campeones para comprobar que, efectivamente dicho campe\u00f3n se ha eliminado de la lista.","title":"MySQLi"},{"location":"06accesoDatos.html#filtros-y-comodines","text":"modifica el archivo 604campeones.php y gu\u00e1rdalo como 606campeones.php para que se muestre como una tabla con las columnas de la propia tabla de la base de datos, es decir; id, nombre, rol, dificultad, descripci\u00f3n. Al lado de cada nombre de cada columna, pon 2 iconos que sean \u02c4 \u02c5 y que cada uno de ellos ordene el listado en funci\u00f3n de cu\u00e1l se haya pinchado. Si se ha pulsado en Nombre el icono de \u02c4, el listado debe aparecer ordenado por nombre ascendente. Si por el contrario se ha pulsado \u02c5 tendr\u00e1 que ordenarse por nombre descendente. Ten en cuenta que cada icono debe llevar consigo un enlace al listado que contenga par\u00e1metros en la URL que satisfagan las opciones seleccionadas as\u00ed que haced uso de $_GET para poder capturarlos y escribid las consultas SQL que sean necesarias para hacer cada uno de los filtros. Puedes usar Font Awesome para los iconos pero es algo opcional","title":"Filtros y comodines"},{"location":"06accesoDatos.html#pdo","text":"Aprovecha lo que hiciste de los ejercicios 601 al 604 pero esta vez utilizando PDO::FETCH_ASSOC . Crea una tabla nueva dentro de la base de datos lol que ya tienes y crea un sistema de login con usuarios. Introduce en la base de datos al menos 3 usuarios diferentes con sus contrase\u00f1as distintas. Recuerda que: La tabla nueva ha de llamarse usuario Los campos a crear en la nueva tabla deben ser id [*] nombre usuario password email Las contrase\u00f1as deben ser cifradas antes de guardar el datos en la base de datos. Crea el formulario 608registro.php donde el usuario introduzca los datos de registro y vinc\u00falalo con 608nuevoUsuario.php para que recoja los datos mediante POST y los inserte en la base de datos si todo ha ido bien. Queda PROHIBID\u00cdSIMO acceder a 608nuevoUsuario.php sin el formulario rellenado. La sentencia de INSERT debe estar controlada para que no pueda introducirse ning\u00fan dato en blanco. Ten en cuenta que est\u00e1s modificando la base de datos y no queremos campos mal rellenados. Si todo ha ido bien, muestra un mensaje por pantalla diciendo El usuario XXX ha sido introducido en el sistema con la contrase\u00f1a YYY .","title":"PDO"},{"location":"06accesoDatos.html#ficheros","text":"M\u00e9tete en loremipsum.com y genera un texto de 3 p\u00e1rrafos. Copia el texto generado y gu\u00e1rdalo en un archivo nuevo llamado 609loremIpsum.txt . Genera un archivo php llamado 609loremIpsum.php y muestra por pantalla el texto del archivo txt que acabas de crear, su tama\u00f1o en Kilobytes , la fecha de su \u00faltima modificaci\u00f3n y el ID de usuario que cre\u00f3 el archivo. Vuelve a cargar el archivo 606campeones.php y ren\u00f3mbralo a 610campeones.php pero en vez de mostrar la tabla por pantalla, genera un archivo CSV 610campeones.csv y otro 610campeonesCSV.php donde saques por pantalla el contenido del archivo 610campeones.csv .","title":"Ficheros"},{"location":"06accesoDatos.html#proyecto-chollosevero","text":"Estructura el proyecto y piensa en las tablas y bases de datos que necesit\u00e9is para crear el proyecto. Crea los UML necesarios con nombres como 615UMLnombreTabla metiendo todos los campos que se necesiten as\u00ed como las relaciones que creas necesarias. Establece un sistema de archivos para el proyecto, teniendo en cuenta que van a haber im\u00e1genes, css, funciones php, constantes e incluso javaScript (pero algo b\u00e1sico) para controlar los eventos del usuario a lo largo de la interfaz. Crea un sistema de login/password con los roles administrador y usuario . De momento que se validen los usuarios correctamente utilizando encriptaci\u00f3n en la contrase\u00f1a. Administrador : Puede ver todos los usuarios registrados as\u00ed como los administradores y los chollos creados en la base de datos. Usuario : Puede ver sus propios chollos, editarlos y borrarlos, adem\u00e1s de crear nuevos. Crea la vista para poner nuevos chollos y recuerda s\u00f3lo pueden entrar a esta vista usuarios registrados o administradores . Crea la vista donde se muestren todos los chollos creados. Esta vista puede verla cualquier usuario, registrado o no en el sistema. Ten en cuenta que esta vista ser\u00e1 la vista general de la web as\u00ed que puedes llamarla index.php donde despu\u00e9s aplicaremos filtros por $_GET.","title":"Proyecto CholloSevero"},{"location":"07frameworks.html","text":"img { margin: 20px 0; border-radius: 8px; } .alert { color: #BD1550; } .warning { color: #E97F02; } .success { color: #8A9B0F; } .center { text-align: center; } .right { text-align: right; } .img-small { max-width: 200px; margin: auto; } .img-medium { max-width: 400px; margin: auto; } .img-large { max-width: 800px; margin: auto; } .leyenda { font-size: small; margin: 10px 0; } Frameworks PHP. Laravel \u00b6 Duraci\u00f3n estimada: 40 sesiones Puesta en marcha \u00b6 Lo primero de todo es crear una carpeta con el nombre del proyecto que vayamos a crear y nos metemos en ella. Vamos a utilizar la imagen de Bitnami ya preparada, as\u00ed que lo que hacer ahora es descargar el archivo docker-compose.yml del repositorio de Github oficial. Una vez descargado el archivo en nuestra carpeta que acabamos de crear con el nombre del proyecto, lanzamos el siguiente comando por consola para instalar todas las dependencias y crear las im\u00e1genes de Docker correspondientes. docker-compose -p Laravel up -d Si todo ha salido bien podr\u00e1s ver en el Visual Studio Code que se han creado 2 im\u00e1genes y que el servidor web de Laravel est\u00e1 funcionando bajo la siguiente URL. http://localhost:8000 Si por alguna extra\u00f1a raz\u00f3n est\u00e1s en Windows y no te funciona una de las 2 im\u00e1genes, puede ser debido a la instalci\u00f3n de composer dentro de la imagen de Laravel. Para solucionarlo, nos vamos a la carpeta del proyecto que se te habr\u00e1 creado por defecto al hacer docker-compose, en este caso y si no has modificado el archivo .yml la carpeta del proyecto sera my-proyect y dentro de ella eliminamos la carpeta vendor . Cuando hayamos eliminado dicha carpeta, necesitaremos instalar Composer de manera global en nuestro sistema Windows. Para ello. b\u00e1jate el instalador desde este enlace . Una vez lo instales ya ser\u00e1s capaz de lanzar el comando composer desde cualquier consola de Windows. Por \u00faltimo, abrimos una consola dentro de la carpeta my-project o el nombre que le hayas puesto a la carpeta del proyecto de Laravel y ejecutamos el siguiente comando. composer install Para terminar tan s\u00f3lo tendremos que volver a ejecutar el contenedor de Laravel desde Docker. VSCode extensiones \u00b6 Recomendable instalar los siguientes plugins para Visual Studio Code Laravel Blade Snippets Carpetas en Laravel \u00b6 Al crear un nuevo proyecto con este framework, Laravel crea una serie de carpetas por defecto. Esta estructura de carpetas es la recomendada para utilizar Laravel. Public \u00b6 Esta es la carpeta m\u00e1s importante ya que es donde se ponen todos los archivos que el cliente va a mostrar al usuario cuando introduzcamos la URL de nuestro sitio web. Normalmente se carga el archivo index.php por defecto. Routes \u00b6 Otra de las carpetas que m\u00e1s vamos a usar a lo largo de este curso de Laravel. En ella se albergan todas las rutas (redirecciones web) de nuestro proyecto, pero m\u00e1s concretamente en el archivo web.php Dada una ruta \u2192 se cargar\u00e1 una vista Resources \u00b6 Esta es nuestra carpeta de recursos donde guardaremos los siguientes archivos, que tambi\u00e9n, est\u00e1n separados por sus carpetas... como cada nombre indica: css Archivos CSS js Archivos JS (JavaScript) lang Archivos relacionados con el idioma del sitio (variables & strings) views Archivos de nuestras vistas, lo que las rutas cargan Rutas \u00b6 Las rutas en Laravel (y en casi cualquier Framework) sirven para redireccionar al cliente (o navegador) a las vistas que nosotros queramos. Estas rutas se configuran en el archivo public/routes/web.php donde se define la ruta que el usuario pone en la URL despu\u00e9s del dominio y se retorna la vista que se quiere cargar al introducir dicha direcci\u00f3n en el navegador. <?php // Ruta por defecto para cargar la vista welcome cuando el usuario introduce simplemente el dominio Route :: get ( '/' , function () { return view ( 'welcome' ); }); En el ejemplo de arriba vamos a cargar la vista llamada welcome que hace referencia a la vista resources/views/welcome.blade.php Alias \u00b6 Es interesante darle un alias o un nombre a nuestras rutas para poder utilizar dichos alias en nuestras plantillas de Laravel que veremos m\u00e1s adelante. Para ello, basta con utilizar la palabra name al final de la estructura de la ruta y darle un nombre que queramos; normalmente descriptivo y asociado a la vista que tiene que cargar el enroutador de Laravel. <?php Route :: get ( '/users' , function () { return view ( 'users' ); }) -> name ( 'usuarios' ); Despu\u00e9s veremos que es muy \u00fatil ya que a la hora de refactorizar o hacer un cambio, si tenemos enlaces o men\u00fas de navegaci\u00f3n que apuntan a esta ruta, s\u00f3lo tendr\u00edamos que cambiar el par\u00e1metro dentro del get() y no tener que ir archivo por archivo. Laravel nos proporciona una manera m\u00e1s c\u00f3moda a la hora de cargar una vista si no queremos par\u00e1metros ni condiciones. Tan s\u00f3lo definiremos la siguiente l\u00ednea que hace referencia la ruta datos en la URL y va a cargar el archivo usuarios.php de nuestra carpeta views como le hemos indicado en el segundo par\u00e1metro. <?php /* http://localhost/datos/ */ Route :: view ( 'datos' , 'usuarios' ); Pero no s\u00f3lo podemos retornar una vista sino, desde un simple string a m\u00f3dulos propios de Laravel. Par\u00e1metros \u00b6 Ya hemos visto que con PHP podemos pasar par\u00e1metros a trav\u00e9s de la URL, como si fueran variables, que las recuper\u00e1bamos a trav\u00e9s del m\u00e9todo GET o POST. Con Laravel tambi\u00e9n podemos introducir par\u00e1metros pero de una forma m\u00e1s vistosa y ordenada, de tal manera que sea visualmente m\u00e1s c\u00f3modo de recordar y de indexar por los motores de b\u00fasqueda como Google. http://localhost/cliente/324 Para configurar este tipo de rutas en nuestro archivo de rutas public/routes/web.php haremos lo siguiente. <?php Route :: get ( 'cliente/{id}' , function ( $id ) { return ( 'Cliente con el id: ' . $id ); }); \u00bfQu\u00e9 pasa si no introducimos un id y s\u00f3lo navegamos hasta cliente/ ? ... Nos va a devolver un 404 Para resolver \u00e9sto, podemos definir una ruta por defecto en caso de que el id (o par\u00e1metro) no sea pasado. Para ello usaremos el s\u00edmbolo ? en nuestro nombre de ruta e inicializaremos la variable con el valor que queramos. <?php Route :: get ( 'cliente/{id?}' , function ( $id = 1 ) { return ( 'Cliente con el id: ' . $id ); }); Ahora tenemos otro problema, porque estamos filtrando por id del cliente que, normalmente es un n\u00famero, pero si metemos un par\u00e1metro que no sea un n\u00famero, vamos a obtener un resultado no deseado. Para resolver este caso haremos uso de la cl\u00e1usula where junto con una expresi\u00f3n regular n\u00famerica. <?php Route :: get ( 'cliente/{id?}' , function ( $id = 1 ) { return ( 'Cliente con el id: ' . $id ); }) -> where ( 'id' , '[0-9]+' ); Adem\u00e1s, podemos pasarle variables a nuestra URL para luego utilzarlas en nuestros archivos de plantillas o en archivos .php haciendo uso de un array asociativo. Veamos un ejemplo con la forma reducida para ahorrarnos c\u00f3digo <?php Route :: view ( 'datos' , 'usuarios' , [ 'id' => 5446 ]); ... y el archivo resources/views/usuarios.php debe tener algo parecido a \u00e9sto <!-- Estructura t\u00edpica de un archivo HTML5 --> < p > Usuario con id: <?= $id ?> </ p > <!-- ... --> Con las plantillas de Laravel blade.php veremos c\u00f3mo simplificar a\u00fan m\u00e1s nuestro c\u00f3digo. Para m\u00e1s informaci\u00f3n acerca de las rutas, par\u00e1metros y expresiones regulares en las rutas puedes echar un vistazo a la documentaci\u00f3n oficial de rutas que contiene numerosos ejemplos. Plantillas o Templates \u00b6 A trav\u00e9s de las plantillas de Laravel vamos a escribir menos c\u00f3digo PHP y vamos a tener nuestros archivos mejor organizados. Blade es el sistema de plantillas que trae Laravel, por eso los archivos de plantillas que guardamos en el directorio de views llevan la extensi\u00f3n blade.php . De esta manera sabemos inmediatamente que se trata de una plantilla de Laravel y que forma parte de una vista que se mostrar\u00e1 en el navegador. Directivas \u00b6 Laravel tiene un gran n\u00famero de directivas que podemos utilizar para ahorrarnos mucho c\u00f3digo repetitivo entre otras funciones. Digamos que las directivas son peque\u00f1as funciones ya escritas que aceptan par\u00e1metros y que cada una de ellas hace una funci\u00f3n diferente dentro de Laravel. @yield Define el contenido din\u00e1mico que se va a cargar. Se usa conjuntamente con @section @section y @endsection bloque de c\u00f3digo din\u00e1mico @extends importa el contenido de una plantilla ya creada Separando c\u00f3digo \u00b6 Veamos un ejemplo de c\u00f3mo hacer uso del poder de Laravel para crear plantillas y no repetir c\u00f3digo. Supongamos que tenemos ciertas estructuras HTML repetidas como puede ser una cabecera header , un men\u00fa de navegaci\u00f3n nav y un par de secciones que hacen uso de este mismo c\u00f3digo. Supongamos que tenemos 2 apartados en la web: Blog Fotos Primero de todo tendremos que generar un archivo que haga de plantilla de nuestro sitio web. Para ello creamos el archivo plantilla.blade.php dentro de nuestro directorio de plantillas resources/views . Dicho archivo va a contener el t\u00edpico c\u00f3digo de una p\u00e1gina simple de HTML y en el body a\u00f1adiremos nuestros contenido est\u00e1tico y din\u00e1mico. < body > <!-- CONTENIDO EST\u00c1TICO PARA TODAS LAS SECCIONES --> < h1 > Bienvenid@s a Laravel </ h1 > < hr > <!-- MEN\u00da --> < nav > < a href = {{ route (' noticias ') }} > Blog </ a > | < a href = {{ route (' galeria ') }} > Fotos </ a > </ nav > <!-- CONTENIDO DIN\u00c1MICO EN FUNCI\u00d3N DE LA SECCI\u00d3N QUE SE VISITA --> < header > @yield('apartado') </ header > </ body > Cada secci\u00f3n que haga uso de esta plantilla contendr\u00e1 el texto est\u00e1tico Bienvenid@s a Laravel seguido de un men\u00fa de navegaci\u00f3n con enlaces a cada una de las secciones y el contenido din\u00e1mico de cada secci\u00f3n. Ahora crearemos los archivos din\u00e1micos de cada una de las secciones, en nuestro caso blog.blade.php y fotos.blade.php <?php // blog.blade.php @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h2 > Est\u00e1s en BLOG </ h2 > @ endsection Importamos el contenido de plantilla bajo la directiva @extends para que cargue los elementos est\u00e1ticos que hemos declarado y con la directiva @section y @endsection definimos el bloque de c\u00f3digo din\u00e1mico, en funci\u00f3n de la secci\u00f3n que estemos visitando. Ahora casi lo mismo para la secci\u00f3n de fotos <?php // fotos.blade.html @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h2 > Est\u00e1s en FOTOS </ h2 > @ endsection El \u00faltimo paso que nos queda es configurar el archivo de rutas routes/web.php <?php // web.php Route :: view ( 'blog' , 'blog' ) -> name ( 'noticias' ); Route :: view ( 'fotos' , 'fotos' ) -> name ( 'galeria' ); De esta manera podremos hacer uso del men\u00fa de navegaci\u00f3n que hemos puesto en nuestra plantilla y gracias a los alias noticias y galeria , la URL ser\u00e1 m\u00e1s amigable. Estructuras de control \u00b6 Como en todo buen lenguaje de programaci\u00f3n, en Laravel tambi\u00e9n tenemos estructuras de control. En Blade (plantillas de Laravel) siempre que iniciemos un bloque de estructura de control DEBEMOS cerrarla @foreach ~ @endforeach lo usamos para recorrer arrays @if ~ @endif para comprobar condiciones l\u00f3gicas @switch ~ @endswitch en funci\u00f3n del valor de una variable ejecutar un c\u00f3digo @case define la casu\u00edstica del switch @break rompe la ejecuci\u00f3n del c\u00f3digo en curso @default si ninguna casu\u00edstica se cumple <?php $equipo = [ 'Mar\u00eda' , 'Alfredo' , 'William' , 'Ver\u00f3nica' ]; @ foreach ( $equipo as $nombre ) < p > {{ $nombre }} </ p > @ endforeach Acordaros que podemos pasar variables a trav\u00e9s de las rutas como si fueran par\u00e1metros. Pero en este caso, vamos a ver otra directiva m\u00e1s; el uso de @compact . <?php // Uso de @compact $equipo = [ 'Mar\u00eda' , 'Alfredo' , 'William' , 'Ver\u00f3nica' ]; // Route::view('nosotros', ['equipo' => 'equipo']); Route :: view ( 'nosotros' , @ compact ( 'equipo' )); Controladores \u00b6 Los controladores son el lugar perfecto para definir la l\u00f3gica de negocio de nuestra aplicaci\u00f3n o sitio web. Hace de intermediario entre la vista (lo que vemos con nuestro navegador o cliente) y el servidor donde la app est\u00e1 alojada. Por defecto, los controladores se guardan en una carpeta espec\u00edfica situada en app/Http/Controllers y tienen extensi\u00f3n .php . Para crear un controlador nuevo debemos hacer uso de nuestro querido aut\u00f3mata artisan donde le diremos que cree un controlador con el nombre que nosotros queramos. Abrimos la consola y nos situamos en la ra\u00edz de nuestro proyecto php artisan make:controller PagesController Si todo ha salido bien, recibiremos un mensaje por consola con que todo ha ido bien y podremos comprobar que, efectivamente se ha creado el archivo PagesController.php con una estructura b\u00e1sica de controlador, dentro de la carpeta Controllers que hemos descrito anteriormente. Ahora podemos modificar nuestro archivo de rutas web.pbp para dejarlo limpio de l\u00f3gica y trasladar \u00e9sta a nuestro nuevo controlador. La idea de \u00e9sto es dejar el archivo web.php tan limpio como podamos para que, de un vistazo, se entienda todo perfectamente. RECUERDA que s\u00f3lo movemos la l\u00f3gica, mientras que las cl\u00e1usulas como where y name las seguimos dejando en el archivo de rutas web.php Veamos c\u00f3mo quedar\u00eda un refactor del archivo de rutas utilizando un Controller como el que acabamos de crear Ahora nos quedar\u00eda de la siguiente manera <?php // web.php (v2.0) \u2592\u2592\u2592\u2592 Refactorizado use App\\Http\\Controllers\\PagesController ; use Illuminate\\Support\\Facades\\Route ; Route :: get ( '/' , [ PagesController :: class , 'inicio' ]); Route :: get ( 'datos' , [ PagesController :: class , 'datos' ]); Route :: get ( 'cliente/{id?}' , [ PagesController :: class , 'cliente' ]) -> where ( 'id' , '[0-9]+' ); Route :: get ( 'nosotros/{nosotros?}' , [ PagesController :: class , 'nosotros' ]) -> name ( 'nosotros' ); y en nuestro archivo controlador lo dejar\u00edamos de la siguiente manera <?php // PagesController.php namespace App\\Http\\Controllers ; class PagesController extends Controller { public function inicio () { return view ( 'welcome' ); } public function datos () { return view ( 'usuarios' , [ 'id' => 56 ]); } public function cliente ( $id = 1 ) { return ( 'Cliente con el id: ' . $id ); } public function nosotros ( $nombre = null ) { $equipo = [ 'Paco' , 'Enrique' , 'Maria' , 'Veronica' ]; return view ( 'nosotros' , @ compact ( 'equipo' , 'nombre' )); } } Migraciones & Eloquent \u00b6 Con las migraciones vamos a gestionar la base de datos de nuestro sitio web; tanto crear nuevas BBDD como editarlas desde Laravel. Las migraciones de un sitio hecho con Laravel se alojan en la ruta database/migrations y tienen extensi\u00f3n .php . Si te fijas, nada m\u00e1s instalar Laravel con la imagen de Bitnami, se han creado varios archivos de migraciones que podemos usar, pero de momento los dejamos ah\u00ed y NO LOS BORRAMOS porque son muy \u00fatiles. Archivos .env \u00b6 Es de uso com\u00fan trabajr con archivos de entorno llamados tambi\u00e9n archivos .env . Normalmente, eun unproyecto real puedes encontrarte con varios archivos de este tipo en funci\u00f3n del despliegue que se quiera hacer; como por ejemplo: test.env config. para desplegar en entorno seguro de pruebas release.env config. para desplegar cambios de versi\u00f3n que se env\u00eda a los beta testers production.env config. para desplegar el c\u00f3digo ya probado al resto del mundo. En nuestro caso, como no vamos a desplegar nada, s\u00f3lo vamos a usar un \u00fanico archivo .env y en cuesti\u00f3n de las migraciones vamos a fijarnos a partir de la l\u00ednea 11 donde dice: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=blog DB_USERNAME=root DB_PASSWORD= En este archivo debemos configurar los datos de nuestro servidor MySQL y rellenarlo con la informaci\u00f3n correspondiente a nuestra base de datos ya creada Una vez tengamos \u00e9sto, lo que nos queda es ejecutar el comando de las migraciones a trav\u00e9s del CLI artisan php artisan migrate Si todo ha salido bien obtendremos el siguiente resultado donde podremos observar que todas las migraciones se han insertado correctamente en la base de datos. Si nos vamos al cliente que utilicemos para manejar la base de datos (phpMyAdmin por ejemplo) veremos que en nuestra base de datos se han creado todas las tablas de la migraci\u00f3n que hemos ejecutado y adem\u00e1s una tabla que se llama migrations . La tabla migrations es simplemente un registro de todas las migraciones llevadas a cabo. Adem\u00e1s, podemos hacer un rollback en caso de que queramos reestablecer nuestra base de datos. php artisan migrate:rollback O si preferimos hacer un reset para dejarla limpia php artisan migrate:reset Modelos \u00b6 Gracias a Eloquent y su integraci\u00f3n con Laravel, podremos crear modelos de datos de una manera automatizada a trav\u00e9s de artisan Ahora que ya sabemos manejar las migraciones es hora de crear nuestras propias migraciones pero a trav\u00e9s de Eloquent. A trav\u00e9s de la instrucci\u00f3n make:model creamos un nuevo modelo de datos, a continuaci\u00f3n ponemos el nombre siempre empezando en May\u00fasucla y en SINGULAR y pasamos el par\u00e1metro relacionado con las migraciones -m . php artisan make:model Nota -m Si todo ha salido bien, veremos en nuestro directorio de migraciones database/migrations un nuevo archivo que se llama 2022_01_07_81237_create_notas_table.php . El siguiente paso es ver nuestro archivo de migraciones y editarlo para que contenga las tablas que nosotros queramos. Si lo visualizamos tan s\u00f3lo tendr\u00e1 la estructura b\u00e1sica con un par de tablas. Vamos a a\u00f1adir un par de tablas m\u00e1s. <?php Schema :: create ( 'notas' , function ( Blueprint $table ) { $table -> id (); $table -> timestamps (); $table -> string ( 'nombre' ); $table -> text ( 'descripcion' ); }); En esta Schema podemos poner todas las tablas que nosotros queramos y establecer el tipo de dato para cada una de ellas, as\u00ed como el nombre. Una vez que estamos satisfechos con nuestro esquema debemos volver a ejecutar el c\u00f3digo de migraci\u00f3n a trav\u00e9s de artisan para que se introduzca esta nueva informaci\u00f3n en la base de datos. Para ver todos los tipos de datos que maneja Eloquent puedes visitar la documentaci\u00f3n oficial . Recuperando datos \u00b6 Ya tenemos nuestra base de datos creada con nuestras tablas migradas, ahora s\u00f3lo falta rellenar esas tablas con datos para poder pintarlos en nuestro c\u00f3digo HTML. Rellenamos las tablas a trav\u00e9s del cliente de MySQL que m\u00e1s nos guste: PHP MyAdmin MySQL Workbench HeidiSQL * SquirrelSQL Ahora tendremos que irnos a una vista ya creada o creamos una nueva y solicitamos los datos desde el HTML. \u00bfNos acordamos del PagesController ? pues hacer uso de su magia junto con las rutas que creamos en web.php <?php // estamos en \u2593\u2593\u2593 web.php Route :: get ( 'notas' , [ PagesController :: class , 'notas' ]); Antes de intentar entrar, debemos configurar nuestro controlador de la siguiente manera: <?php // estamos en \u2593\u2593\u2593 PagesController.php public function notas () { $notas = Nota :: all (); return view ( 'notas' , compact ( 'notas' )); } El \u00faltimo paso ser\u00eda, crear la vista con la tabla que pinte los datos a trav\u00e9s de la variable que le pasamos por par\u00e1metro en la ruta que acabamos de describir. <?php // estamos en \u2593\u2593\u2593 notas.blade.php < h1 > Notas desde base de datos </ h1 > < table border = \"1\" > < thead > < tr > < th > Nombre </ th > < th > Descripci\u00f3n </ th > </ tr > </ thead > @ foreach ( $notas as $nota ) < tr > < td > {{ $nota -> nombre }} </ td > < td > {{ $nota -> descripcion }} </ td > </ tr > @ endforeach </ table > Hay que fijarse bien en los nombres de las columnas que tienen nuestras bases de datos, es justo lo que va despu\u00e9s de -> y siempre rodeado por los s\u00edmbolos {{ }} ya que estamos en un archivo de plantilla. \u00bfQu\u00e9 pasar\u00eda si s\u00f3lo queremos acceder a un \u00fanico elemento? como si hici\u00e9semos un SELECT * from usuarios where id = 1 Para \u00e9so, tenemos una instrucci\u00f3n espec\u00edfica en Eloquent que nos soluciona el problema. En este caso usaremos la instrucci\u00f3n findOrFail y como buenos usuarios de Laravel, lo utilizaremos dentro del controlador. <?php // estamos en \u2593\u2593\u2593 PagesController.php public function detalle ( $id ) { $nota = Nota :: findOrFail ( $id ); return view ( 'notas.detalle' , compact ( 'nota' )); } Hay que acordarse que debemos configurar la ruta en nuestro archivo de rutas. <?php // estamos en \u2593\u2593\u2593 web.php Route :: get ( 'notas/{id?}' , [ PagesController :: class , 'detalle' ]) -> name ( 'notas.detalle' ); Y por \u00faltimo, debemos crear la plantilla, pero como es un archivo de detalle o que est\u00e1 relacionado con otra plantilla ya creada, podemos crear una carpeta con el nombre de la plantilla y dentro, el archivo de plantilla en cuesti\u00f3n. De tal manera que quedar\u00eda as\u00ed resources/views/notas/detalle.blade.php <?php // estamos en \u2593\u2593\u2593 detalle.blade.php @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h1 > Detalle de la nota </ h1 > < h3 > ID : {{ $nota -> id }} </ h3 > < h3 > Nombre : {{ $nota -> nombre }} </ h3 > < h3 > Descripci\u00f3n : {{ $nota -> descripcion }} </ h3 > @ endsection Modificar tablas sin perder datos \u00b6 Uno de los dilemas que tenemos a la hora de manejar las bases de datos con Laravel y Eloquent, es que a veces cometemos errores y queremos introducir una nueva columna dentro de nuestra tabla o modificar una de esas columnas SIN PERDER LOS DATOS DE LA BASE DE DATOS . Imaginemos que en nuestra tabla notas queremos agregar una columna con el nombre autor . Lo primero de todo es crear una nueva migraci\u00f3n para realizar este cambio. Para ello, haremos uso de nuestro querido artisan y debemos crear el nombre de esta migraci\u00f3n con la siguiente f\u00f3rmula add_fields_to_ seguidamente del nombre de la tabla que queremos modificar. php artisan migrate add_fields_to_nota Seguidamente, nos metemos en el archivo de la migraci\u00f3n que acabamos de crear y en el apartado up() debemos poner el cambio que queremos realizar y en la secci\u00f3n down() debemos hacer lo mismo pero tenemos que decirle a Eloquent que la elimine \u00bfpor qu\u00e9? para en caso de hacer migrate rollback, se cargue este nuevo campo que hemos creado. <?php public function up () { Schema :: table ( 'notas' , function ( Blueprint $table ) { $table -> string ( 'autor' ); }); } public function down () { Schema :: table ( 'notas' , function ( Blueprint $table ) { $table -> dropColumn ( 'autor' ); }); } Formularios \u00b6 Ahora que ya sabemos c\u00f3mo cargar de una base de datos, vamos a ver c\u00f3mo insertarlos con Laravel y sin escribir ni una sola l\u00ednea de SQL. Gracias al m\u00e9todo save() de Laravel podremos guardar datos que provengan de un formulario desde nuestras plantillas. Para ello, lo primero que necesitamos lo siguiente: formulario HTML que recoja los datos que el usuario introduce Una ruta que sea la encargada de recibir los datos del formulario M\u00e9todo POST para enviar los datos al servidor Un m\u00e9todo en nuestro controlador que procese los datos y los guarde a trav\u00e9s de save() La cl\u00e1usula de seguridad @csrf para evitar ataques desde otros sitios As\u00ed pues, empecemos por el formulario < form action = \"{{ route('notas.crear') }}\" method = \"POST\" > @csrf {{-- Cl\u00e1usula para obtener un token de formulario al enviarlo --}} < input type = \"text\" name = \"nombre\" placeholder = \"Nombre de la nota\" class = \"form-control mb-2\" autofocus > < input type = \"text\" name = \"descripcion\" placeholder = \"Descripci\u00f3n de la nota\" class = \"form-control mb-2\" > < button class = \"btn btn-primary btn-block\" type = \"submit\" > Crear nueva nota </ button > </ form > Como vemos, creamos 2 inputs relacionados con nuestras columnas dentro de la tabla, en este caso nombre y descripci\u00f3n El action del formulario debe apuntar a una nueva ruta que vayamos a crear y donde enviemos los datos mediante POST . Ahora crearemos la ruta en nuestro archivo de rutas web.php <?php // estamos en \u2593\u2593\u2593 web.php Route :: post ( 'notas' , [ PagesController :: class , 'crear' ]) -> name ( 'notas.crear' ); Si nos fijamos, ya no estamos haciendo uso del get sino del m\u00e9todo post y como son m\u00e9todos diferentes, podemos nombrar la ruta de la misma manera que en get ya que no habr\u00e1 conflicto. Por otro lado, necesitamos invocar nuestro PagesController famoso y decirle que vamos a utilizar el m\u00e9todo crear que bueno, todav\u00eda no existe pero que vamos a crear a contnuaci\u00f3n. No olvidemos crear un alias para poder vincularlo al action del formulario SUPER IMPORTANTE . Para terminar, editaremos nuetro archivo PagesController.php para que el controlador que estamos usando tenga el m\u00e9todo que hemos nombrado previamente. <?php // estamos en \u2593\u2593\u2593 PagesController.php use App\\Models\\Nota ; use Illuminate\\Http\\Request ; public function crear ( Request $request ) { $notaNueva = new Nota ; $notaNueva -> nombre = $request -> nombre ; $notaNueva -> descripcion = $request -> descripcion ; $notaNueva -> save (); return back () -> with ( 'mensaje' , 'Nota agregada exit\u00f3samente' ); } Nuestro m\u00e9todo crear va a recibir un objeto llamado $request (el cual podemos cambiarle el nombre perfectamente) de tipo Request por lo que DEBEMOS IMPORTAR Request para poder utilizar dicha clase de Laravel. Dentro del m\u00e9todo crear que acabamos de escribir, debemos hacer uso del modelo Nota que ya creamos en otros ejemplos e instanciarla a traves de una variable, en nuestro caso $notaNueva . De esta manera, podremos aceder a los m\u00e9todos y propiedades de la misma, por eso podemos utilizar nombre y descripcion . As\u00ed mismo, la variable $request est\u00e1 formada por los mismos nombres de input que hemos puesto en el formulario de la plantilla, si os acord\u00e1is eran name=\"nombre\" y name=\"descripcion\" . Finalmente usamos el m\u00e9todo save() para guardar estos nuevos datos en la base de datos y retornamos a la p\u00e1gina del formulario con el m\u00e9todo back() a\u00f1adiendo un mensaje con with() . Pero \u00bfd\u00f3nde va a salir este mensaje? -- lo tenemos que declarar en nuestra plantilla @if (session('mensaje')) < div class = \"mensaje-nota-creada\" > {{ session('mensaje') }} </ div > @endif Validaciones \u00b6 Laravel nos proporciona herramientas para poder validar los datos que el usuario introduce en los campos del formulario. Adem\u00e1s de poder hacerlo con la etiqueta required de HTML5, debemos validar los datos a trav\u00e9s del Framework. Para ello, necesitamos modificar varios elementos: En primer lugar, nuestro archivo controller En segundo lugar, nuestra plantilla que carga el formulario Empecemos con el controlador. A trav\u00e9s del m\u00e9todo validate() le decimos a Eloquent qu\u00e9 campos son requeridos para poder enviar el formulario. Utilizaremos para ello un array asociativo con el nombre del input y la palabra reservada required <?php // estamos en \u2593\u2593\u2593 PagesController.php $request -> validate ([ 'nombre' => 'required' , 'descripcion' => 'required' ]); Seguidamente nos moveremos a la plantilla donde est\u00e9 el formulario y a trav\u00e9s de la directiva @error crearemos un bloque html con nuestro mensaje de error por cada uno de los inputs requeridos. <?php // estamos en \u2593\u2593\u2593 notas.blade.php @ error ( 'nombre' ) < div class = \"alert alert-danger\" > No olvides rellenar el nombre </ div > @ enderror Pero \u00bfqu\u00e9 pasa cuando ha habido un error y nos muestra el mensaje que hemos escrito? Si te fijas, los campos que hab\u00edas rellenado perder\u00e1n la informaci\u00f3n, pero con Laravel podemos persistirlos sin hacer que el usuario vuelva a introducirlos. Para poder persistir los datos una vez enviados pero con alg\u00fan error de campo requerido, utilizaremos la directiva old() como value del input dentro de nuestro formulario y le pasaremos el nombre del input declarado en la etiqueta name . <?php // estamos en \u2593\u2593\u2593 notas.blade.php < input type = \"text\" name = \"nombre\" value = \"{{ old('nombre') }}\" class = \"form-control mb-2\" placeholder = \"Nombre de la nota\" autofocus > Editando registros \u00b6 Despu\u00e9s de tener campos en la base de datos, lo interesante ser\u00eda poder editarlos a trav\u00e9s de un formulario. Laravel nos proporciona las herramientas necesarias para ello; veamos pues lo que necesitamos para poder realizar el cambio a trav\u00e9s de la directiva put() . Para poder hacer el cambio de resgistros necesitamos lo siguiente: Un enlace para redirigir a la p\u00e1gina de editar, pasando el id del elemento en cuesti\u00f3n Una nueva ruta que apunte a nuestra plantilla de editar Una plantilla para poder editar con un formulario que reciba los datos a editar Una nueva funci\u00f3n dentro de nuestro controlador para poder manejar los datos ya introducidos Una nueva ruta que utilice el m\u00e9todo put() para poder actualizar los datos Un nuevo m\u00e9todo dentro de nuestro controlador para actualizar los datos nuevos introducidos <?php // estamos en \u2593\u2593\u2593 notas.blade.php < a href = \"{{ route('notas.editar', $nota ) }}\" class = \"btn btn-warning btn-sm\" > Editar </ a > Ahora creamos la ruta <?php // estamos en \u2593\u2593\u2593 wep.php Route :: get ( 'editar/{id}' , [ PagesController :: class , 'editar' ]) -> name ( 'notas.editar' ); Route :: put ( 'editar/{id}' , [ PagesController :: class , 'actualizar' ]) -> name ( 'notas.actualizar' ); Ahora necesitamos crear una nueva plantilla resources/views/notas/editar.blade.php <?php // estamos en \u2593\u2593\u2593 editar.blade.php @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h2 > Editando la nota {{ $nota -> id }} </ h2 > @ if ( session ( 'mensaje' )) < div class = \"alert alert-success\" > {{ session ( 'mensaje' )}} </ div > @ endif < form action = \"{{ route('notas.actualizar', $nota -> id) }}\" method = \"POST\" > @ method ( 'PUT' ) {{ -- Necesitamos cambiar al m\u00e9todo PUT para editar -- }} @ csrf {{ -- Cl\u00e1usula para obtener un token de formulario al enviarlo -- }} @ error ( 'nombre' ) < div class = \"alert alert-danger\" > El nombre es obligatorio </ div > @ enderror @ error ( 'descripcion' ) < div class = \"alert alert-danger\" > La descripci\u00f3n es obligatoria </ div > @ enderror < input type = \"text\" name = \"nombre\" class = \"form-control mb-2\" value = \"{{ $nota -> nombre }}\" placeholder = \"Nombre de la nota\" autofocus > < input type = \"text\" name = \"descripcion\" placeholder = \"Descripci\u00f3n de la nota\" class = \"form-control mb-2\" value = \"{{ $nota -> descripcion }}\" > < button class = \"btn btn-primary btn-block\" type = \"submit\" > Guardar cambios </ button > </ form > @ endsection Y por \u00faltimo, modificamos nuestro PagesController <?php // estamos en \u2593\u2593\u2593 PagesController.php public function editar ( $id ) { $nota = Nota :: findOrFail ( $id ); return view ( 'notas.editar' , compact ( 'nota' )); } public function actualizar ( Request $request , $id ) { $request -> validate ([ 'nombre' => 'required' , 'descripcion' => 'required' ]); $notaActualizar = Nota :: findOrFail ( $id ); $notaActualizar -> nombre = $request -> nombre ; $notaActualizar -> descripcion = $request -> descripcion ; $notaActualizar -> save (); return back () -> with ( 'mensaje' , 'Nota actualizada' ); } Eliminando registros \u00b6 A la hora de eliminar un registro nuevo, no necesitamos crear una plantilla nueva ya que podemos mandar la instrucci\u00f3n directamente a trav\u00e9s de otro formulario. Por lo tanto, para eliminar un registro de la base de datos utilizaremos lo siguiente. Un formulario b\u00e1sico con un \u00fanico bot\u00f3n de eliminar Usaremos el m\u00e9todo DELETE para sobreescribir el m\u00e9todo del formulario HTML Una ruta nueva para controlar el action de este nuevo formulario Un nuevo m\u00e9todo dentro de nuestro Controlador que lleve la l\u00f3gica para borrar el registro Vamos a ver c\u00f3mo meter ese formulario dentro de nuestro listado de notas <?php // estamos en \u2593\u2593\u2593 notas.blade.php < form action = \"{{ route('notas.eliminar', $nota ) }}\" method = \"POST\" class = \"d-inline\" > @ method ( 'DELETE' ) @ csrf < button class = \"btn btn-danger btn-sm\" type = \"submit\" > Eliminar </ button > </ form > Ahora que ya tenemos montado el formulario en nuestra plantilla, pasemos a crear la ruta que hemos colocado en el action del formulario para borrar elementos. <?php // estamos en \u2593\u2593\u2593 web.php Route :: delete ( 'eliminar/{id}' , [ PagesController :: class , 'eliminar' ]) -> name ( 'notas.eliminar' ); El \u00faltimo paso que nos queda es modificar el PagesController <?php // estamos en \u2593\u2593\u2593 PagesController.php public function eliminar ( $id ) { $notaEliminar = Nota :: findOrFail ( $id ); $notaEliminar -> delete (); return back () -> with ( 'mensaje' , 'Nota Eliminada' ); } Si todo ha salido bien, habremos creado un sitio en Laravel y Eloquent que es capaz de hacer un CRUD validando campos en formularios e insertando datos reales en una base de datos. Paginaci\u00f3n \u00b6 Para a\u00f1adir paginaci\u00f3n a nuestros resultados, Eloquent tiene un m\u00e9todo que se llama paginate() donde le pasamos un n\u00famero entero como par\u00e1metro para indicarle el n\u00famero de resultados que queremos por p\u00e1gina. <?php // estamos en \u2593\u2593\u2593 PagesController.php public function notas () { // $notas = Nota::all(); $notas = Nota :: paginate ( 5 ); return view ( 'notas' , compact ( 'notas' )); } Ahora veremos ciertos elementos HTML que se han generado en nuestra vista, \u00e9sto es porque Laravel hace uso de una librer\u00eda de paginaci\u00f3n situada en la carpeta vendor/laravel/framework/src/illuminate/Pagination Si os met\u00e9is en el directorio y abr\u00eds el archivo tailwind.blade.php ver\u00e9is la estructura HTML que os sale en la vista. Pod\u00e9is modificar este archivo a vuestro antojo, pero es recomendable guardarse una copia del mismo. Existe otra dependencia en resources/lang/en/pagination.php donde encontrar\u00e1s el idioma para la paginaci\u00f3n. Autenticaci\u00f3n \u00b6 Para la utenticaci\u00f3n de usuarios necesitamos instalar unas cuantas dependencias ya preparadas para ello. No es necesarios crear un proyecto nuevo pero nosotros vamos a hacerlo para tener uno con autenticaci\u00f3n y otro no, el que ya hicimos al principio. Primero de todo, vamos a crear un nuevo proyecto en Laravel que se llame notas_auth y nos metemos dentro de la carpeta del mismo cuando el script haya terminado. Dentro de la carpeta notas_auth lanzamos los siguientes comandos. composer require laravel/ui php artisan ui vue --auth Para terminar, lanzaremos el comando migrate que ya conocemos... SI EST\u00c1S WINDOWS fuera de la imagen de Docker (utilizando xampp o parecidos) debes crear una nueva base de datos y posteriormente modificiar el archivo .env poniendo el nombre de esa base de datos que acabas de crear. php artisan migrate Si todo ha salido bien, podr\u00e1s ver en la carpeta resources/views una carpeta que se llama auth y un controlador nuevo que llama HomeController Restringir una ruta \u00b6 Si nos fijamos, en el nuevo controlador que se ha creado HomeController podemos ver unas l\u00edneas al principio del archivo que son las que determinan si la ruta est\u00e1 restringida a usuarios registrados y logueados. <?php public function __construct () { $this -> middleware ( 'auth' ); } Mediante el uso del middleware llamado auth establecemos que todas las rutas que hagan uso de este controlador deban pasar por el login para mostrar el contenido. Por lo tanto, en nuestros proyectos es recomendable utilizar diferentes controladores para diferentes vistas; las que est\u00e9n reestringidas por el login y las que no. Datos del usuario \u00b6 Siempre que queramos acceder a cualquier dato del usuario logueado, utilizaremos el m\u00e9todo auth() para sacar por pantalla la informaci\u00f3n o para utilizar l\u00f3gica a la hora de guardar datos en la base de datos en funci\u00f3n de un usuario, un email o el campo que sea. Imaginemos que tenemos una ruta donde accedemos a dicha informaci\u00f3n <?php public function notas () { return auth () -> user (); // return auth()->user() -> name; // return auth()->user() -> email; // ... } Si visitamos esta ruta con nuestro login y password, nos aparecer\u00e1 por pantalla toda la informaci\u00f3n de nuestro user a excepci\u00f3n de la contrase\u00f1a y, aunque as\u00ed fuera porque se lo forzamos, \u00e9sta aparecer\u00e1 encriptada. Relaciones con Eloquent \u00b6 A trav\u00e9s de Eloquent vamos a poder gestionar las relaciones entre nuestras tablas de la base de datos de una manera muy sencilla y sin sentencias SQL. Uno a uno (1 a 1) \u00b6 Para crear este tipo de relaciones en Eloquent y Laravel, debemos tener creadas las tablas que vayamos a relacionar y establecer la relaci\u00f3n entre ellas a trav\u00e9s del m\u00e9todo hasOne . Supongamos que tenemos una tablas usuario que est\u00e1 relacionada con la tabla telefono . <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Usuario extends Model { /** * Obtener el Tel\u00e9fono asocioado con el Usuario */ public function telefono () { return $this -> hasOne ( Telefono :: class ); } } Una vez hecho \u00e9sto, para poder recuperar el dato relacionado, debemos utilizar las propiedades din\u00e1micas de Eloquent. Con estas propiedades din\u00e1micas podremos obtener dicho dato. <?php $telefono = Usuario :: find ( 1 ) -> telefono ; En este caso, Eloquent asume que en Usuario existe la clave ajena usuario_id pero \u00bfqu\u00e9 pasa si tenemos otro nombre? pues se lo pasamos como par\u00e1metro. <?php return $this -> hasOne ( Telefono :: class , 'clave_ajena' ); Uno a Uno INVERSA \u00b6 Ahora que podemos acceder al modelo tel\u00e9fono desde el modelo usuario, vamos a ver c\u00f3mo hacerlo de manera inversa, es decir, c\u00f3mo acceder desde el m\u00f3delo usuario desdel el modelo telefono gracias al m\u00e9todo belongsTo() . <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Telefono extends Model { public function usuario () { return $this -> belongsTo ( Usuario :: class ); } } Al llamar el m\u00e9todo de usuario , Eloquent intentar\u00e1 encontrar un modelo de usuario que tenga un id que coincida con la columna de usuario_id en el modelo de telefono . Eloquent determina el nombre de la clave externa examinando el nombre del m\u00e9todo de relaci\u00f3n y agregando el sufijo _id al nombre del m\u00e9todo. Entonces, asume que el modelo Telefono tiene una columna usuario_id . Sin embargo, si no se llama de esa manera, puedes pasarle como argumento el nombre de la clave. <?php public function usuario () { return $this -> belongsTo ( Usuario :: class , 'clave_ajena' ); } Uno a Muchos (1 a MM) \u00b6 En este caso, las relaciones de 1 a muchos podemos decir que en una entrada de un blog, o en un post de Facebook, hay muchos comentarios relacionados a esa misma publicaci\u00f3n. Para empezar, ya sabemos que debemos crear el modelo y en este caso usaremos el m\u00e9todo hasMany() para obtener los datos relacionados con ese post o entrada en el blog <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Post extends Model { public function comentarios () { return $this -> hasMany ( Comentario :: class ); } } Cuidado con las claves ajenas, que aqu\u00ed pasa lo mismo... Eloquent establece por defecto el sufijo _id por lo tanto, en este ejemplo buscar\u00eda por post_id . Si no queremos \u00e9so o nuestra clave ajena tiene otro nombre, se lo pasamos por par\u00e1metro en el m\u00e9todo hasMany como hac\u00edamos m\u00e1s arriba. Ahora, al haber m\u00e1s de un dato, necesitamos iterar, por tanto debemos crear un bucle para poder sacar cada dato. <?php use App\\Models\\Post ; $comentarios = Post :: find ( 1 ) -> comentarios ; foreach ( $comentarios as $comentario ) { // Lo que sea que hagamos con esos datos } Adem\u00e1s, como todas las relaciones son sentencias SQL, podemos anidar varios filtros en funci\u00f3n de lo que queramos sacar. $comentario = Post::find(1) -> comentarios() ->where('titulo', 'lo que sea') ->first(); Uno a Muchos INVERSA \u00b6 Ahora que podemos acceder a todos los comentarios de una publicaci\u00f3n, definamos una relaci\u00f3n para permitir que un comentario acceda a su publicaci\u00f3n principal. <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Comentario extends Model { public function post () { return $this -> belongsTo ( Post :: class ); } } Y ahora, a trav\u00e9s de la propiedad de relaci\u00f3n din\u00e1mica... <?php use App\\Models\\Comentario ; $comentario = Comentario :: find ( 1 ); return $comentario -> post -> titulo ; Pasar\u00eda lo mismo con el nombre de la clave ajena, si no se llama de la misma manera que Eloquent establece con el sufijo _id podemos pasarle como par\u00e1metro el nombre de la clave donde debe buscar. Muchos a Muchos (MM a MM) \u00b6 Este tipo de relaciones son las m\u00e1s complicadas ya que, en un Blog del estilo Wordpress por ejemplo, un usuario puede tener muchos roles (lector, autor, administrador) pero un rol pueden tenerlo varios usuarios, es decir, puede haber muchos usuarios administradores, otros lectores y dem\u00e1s. Para realizar este tipo de relaciones necesitar\u00edamos 3 tablas diferentes. usuarios [ id, nombre] roles [id, nombre] rol_usuario [usuario_id, rol_id] (Tabla Pivote) Lo primero de todo, vamos a crear las tablas con sus modelos a excepci\u00f3n de la tabla pivote rol_usuario que s\u00f3lo crearemos la tabla, sin su modelo php artisan make:migration create_rol_usuario_table --create=rol_usuario Y la estructura de dicha seria de la siguiente manera... <?php public function up () { Schema :: create ( 'rol_usuario' , function ( Blueprint $table ) { $table -> bigIncrements ( 'id' ); $table -> unsignedInteger ( 'usuario_id' ); $table -> unsignedInteger ( 'rol_id' ); $table -> timestamps (); }); } Ahora que ya tenemos todo listo, las relaciones de Muchos a Muchos vienen definidas por un m\u00e9todo que devuelve el resultado de usar el m\u00e9todo belongsToMany() <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Usuario extends Model { public function roles () { return $this -> belongsToMany ( Rol :: class ); } } Una vez que tengamos las relaciones definidas, accederemos a ellas mediante las propiedades din\u00e1micas de rol <?php use App\\Models\\Usuario ; $usuario = Usuario :: find ( 1 ); foreach ( $usuario -> roles as $rol ) { // nuestro c\u00f3digo } Acordaros que podemos encadenar comandos sql a trav\u00e9s de los m\u00e9todos de Eloquent <?php $roles = Usuario :: find ( 1 ) -> roles () -> orderBy ( 'nombre' ) -> get (); Muchos a Muchos INVERSA \u00b6 Para definir el \"inverso\" de una relaci\u00f3n de muchos a muchos, debemos establecer un m\u00e9todo en el modelo relacionado que tambi\u00e9n devuelva el resultado del m\u00e9todo belongsToMany . Seg\u00fan el ejemplo que estamos siguiendo... <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Rol extends Model { public function usuarios () { return $this -> belongsToMany ( Usuario :: class ); } } Vamos a hacer un ejemplo con una APP que gestiones alumnos y asignaturas, de tal manera que MUCHOS ALUMNOS pueden cursar MUCHAS ASIGNATURAS \u00bfQu\u00e9 necesitamos para este ejemplo? 3 migraciones para crear las tablas Alumnos /// Materias /// AlumnoMateria Modificar los archivos de las migraciones create_alumnos_table y create_materias_table . Crear la base de datos muchos_a_muchos Ejecutar las Migraciones 2 modelos para Alumnos /// Materias M\u00e9todo dentro de Alumno para crear la relaci\u00f3n Alumno -> Materia Crear el controlador para la vista Crear la ruta de nuestra vista Rellenar la base de datos Crear la vista con los datos 3 MIGRACIONES php artisan make:migration create_alumnos_table php artisan make:migration create_materias_table php artisan make:migration create_alumno_materia_table MODIFICANDO LAS MIGRACIONES create_alumnos_table.php create_materias_table.php create_alumno_materia_table.php <?php public function up () { Schema :: create ( 'alumnos' , function ( Blueprint $table ) { $table -> id (); $table -> string ( 'nombre' ); $table -> timestamps (); }); } <?php public function up () { Schema :: create ( 'materias' , function ( Blueprint $table ) { $table -> id (); $table -> string ( 'nombre' ); $table -> timestamps (); }); } <?php public function up () { Schema :: create ( 'alumno_materia' , function ( Blueprint $table ) { $table -> id (); $table -> foreignId ( 'alumno_id' ) -> nullable () -> constrained ( 'alumnos' ) -> cascadeOnUpdate () -> nullOnDelete (); $table -> foreignId ( 'materia_id' ) -> nullable () -> constrained ( 'materias' ) -> cascadeOnUpdate () -> nullOnDelete (); $table -> timestamps (); }); } CREAMOS LA BASE DE DATOS Para este ejemplo, vamos a crear una base de datos que se llame muchos_a_muchos desde la consola de MySQL o MariaDB. CREATE TABLE `muchos_a_muchos` EJECUTANDO LAS MIGRACIONES Ya tenemos las migraciones creadas y la base de datos lista para insertar el contenido de las migraciones que hemos escrito m\u00e1s arriba, lo que nos queda es ejecutar las migraciones para volcar toda la estructura en nuestra nueva base de datos. php artisan migrate 2 MODELOS PARA ALUMNOS Y MATERIAS php artisan make:model Alumno php artisan make:model Materia M\u00c9TODOS PARA CREAR LAS RELACIONES ALUMNO <-> MATERIA Alumno.php Materia.php <?php public function materias () { return $this -> belongsToMany ( Materia :: class , 'alumno_materia' ); } <?php public function alumnos () { return $this -> belongsToMany ( Alumno :: class , 'alumno_materia' ); } CREANDO EL CONTROLADOR DE LA VISTA Necesitamos un controlador para redireccionar las rutas a las vistas que nosotros queramos, para ello crearemos el controlador RelacionController php artisan make:controller RelacionController CREANDO RUTAS Ahora que ya tenemos nuestro controlador, vamos a crear una \u00fanica vista para mostrar el ejemplo de la relaci\u00f3n MUCHOS a MUCHOS, en este caso un alumno determinado. Adem\u00e1s, en nuestro controlador RelacionController vamos a escribir el c\u00f3digo necesario para que nos devuelva los datos relacionados con el alumno con id 1 y la materia con id 2 . web.php RelacionController.php <?php use App\\Http\\Controllers\\RelacionController ; use Illuminate\\Support\\Facades\\Route ; Route :: get ( 'muchos' , [ RelacionController :: class , 'index' ]); <?php namespace App\\Http\\Controllers ; use App\\Models\\Alumno ; use App\\Models\\Materia ; use Illuminate\\Http\\Request ; class RelacionController extends Controller { public function index () { $alumno = Alumno :: find ( 1 ); $materia = Materia :: find ( 2 ); return view ( 'muchos' , compact ( 'alumno' , 'materia' )); } } RELLENANDO LA BASE DE DATOS Necesitamos meter algunos registros en nuestra base de datos, por tanto, vamos a crear varios datos en nuestro sistema con las siguientes sentencias SQL. Tabla Alumnos Tabla Materias Tabla Alumno_Materia INSERT INTO alumnos ( ` nombre ` ) VALUES ( 'Antonio' ), ( 'Laura' ), ( 'Marta' ), ( 'Pedro' ); INSERT INTO materias ( ` nombre ` ) VALUES ( 'Programacion' ), ( 'Interfaces' ), ( 'JavaScript' ), ( 'Sistemas' ); INSERT INTO alumno_materia ( ` alumno_id ` , ` materia_id ` ) VALUES ( 1 , 2 ), ( 1 , 4 ), ( 3 , 2 ), ( 3 , 1 ), ( 2 , 3 ), ( 2 , 4 ), ( 4 , 4 ), ( 4 , 1 ); CREANDO LA VISTA CON LOS DATOS El \u00faltimo paso que vamos a hacer es, listar los datos relacionados en una vista o plantilla Blade sencilla. Para ello nos creamos el archivo muchos.blade.php ya que es el nombre que hemos puesto en nuestro archivo de rutas. Alumnos que cursan materias Materias cursadas por alumnos < div class = \"row justify-content-center\" > < div class = \"col-auto\" > < h3 > Alumno {{ $alumno -> nombre }} est\u00e1 cursando las materias </ h3 > < table class = \"table table-striped table-hover\" > < thead class = \"bg-primary text-white\" > < th > MATERIAS </ th > </ thead > < tbody > @foreach ($alumno -> materias as $registro) < tr > < td > {{ $registro -> nombre }} </ td > </ tr > @endforeach </ tbody > </ table > </ div > </ div > < div class = \"row justify-content-center\" > < div class = \"col-auto\" > < h3 > La materia {{ $materia -> nombre }} la est\u00e1n cursando los alumnos </ h3 > < table class = \"table table-striped table-hover\" > < thead class = \"bg-primary text-white\" > < th > ALUMNOS </ th > </ thead > < tbody > @foreach ($materia -> alumnos as $registro) < tr > < td > {{ $registro -> nombre }} </ td > </ tr > @endforeach </ tbody > </ table > </ div > </ div > Actividades \u00b6 Crea un sitio web con Laravel que contenga el t\u00edtulo \"Bienvenidos a Laravel\", un texto de bienvenida (puede ser un poco de Lorem Ipsum) y a continuaci\u00f3n un men\u00fa de navegaci\u00f3n con sus correspondientes alias y los siguientes enlaces: Inicio enlace a la p\u00e1gina principal donde se visualizar\u00e1 el texto de Lorem Ipsum adem\u00e1s de los elementos est\u00e1ticos (T\u00edtulo y men\u00fa de navegaci\u00f3n). Nosotros enlace que vaya a la p\u00e1gina \"nosotros\" y muestre, adem\u00e1s de los elementos est\u00e1ticos de todo el sitio, un h2 que diga \"Est\u00e1s en la secci\u00f3n Nosotros\" Proyecto enlace que cargue una vista con el siguiente texto \"Est\u00e1s en el proyecto numero: X\" donde X es un n\u00famero entero que podamos introducirlo en la propia ruta. Si no se mete ning\u00fan n\u00famero en la ruta, por defecto tiene que ser 1; por ejemplo http://localhost:8000s/proyecto/210937 Recuerda que el t\u00edtulo y el men\u00fa de navegaci\u00f3n han de aparecer en todas las vistas que cargues. Utilizando las estructuras de control y los controladores crea un sitio web que contenga lo siguiente: Inicio p\u00e1gina principal con un t\u00edtulo que diga \"Bienvenid@s a FOTO \u2591\u2592\u2593 BLOG\" y un texto de bienvenida (con un par de frases sobra) Nosotros un t\u00edtulo de la secci\u00f3n en la que te encuentras y un listado de 3 personas diferentes que, cada uno de los nombres mostrar\u00e1 un texto descriptivo de cada persona cuando pinchemos sobre su nombre. Fotos Una secci\u00f3n que aparezca el texto \"Est\u00e1s visualizando la foto con el ID: X\" donde X es un par\u00e1metro que depender\u00e1 de la ruta que se haya introducido. Por defecto, si no se introduce dicho par\u00e1metro \u00e9ste debe valer 1. Como elementos est\u00e1ticos debe aparecer: Imagen como logtipo El t\u00edtulo FOTO \u2591\u2592\u2593 BLOG a la derecha del logotipo Men\u00fa de navegaci\u00f3n para moverse por las distintas secciones Puedes usar Bootstrap como algo opcional para practicar. Recuerda que viene incluido con la instalaci\u00f3n de Laravel. Crear el proyecto CholloSevero: Crea un nuevo repositorio para el proyecto Configura el .gitignore para no incluir en el repo los siguientes archivos y carpetas: carpeta vendor archivos .env y cualquier archivo que empiece por . excepto el .gitignore La p\u00e1gina principal del sitio debe ser un listado con todos los chollos disponibles Configura la base de datos con Eloquent, olv\u00eddate de usar la consola mysql Crea una vista para las siguientes acciones: Crear un chollo Editar un chollo La tabla Chollo debe contener las siguientes columnas: id \u00fanico y autoincremental titulo un t\u00edtulo para el chollo descripcion descripcion del chollo url un campo para introducir la URL externa del chollo categoria albergar\u00e1 la categor\u00eda de los chollos puntuacion un n\u00famero entero que indique la puntuaci\u00f3n del chollo precio para albergar el precio del chollo precio_descuento para albergar el nuevo precio disponible de tipo boolean Por lo menos, el sitio debe contener un controlador de Laravel; puedes crear tantos como creas necesarios pero m\u00ednimo debe haber uno. ::: Elementos est\u00e1ticos Como ya hemos visto, hay ciertos elementos que siempre se muestran en todas las vistas del sitio web. A continuaci\u00f3n se listan los elementos que deben estar si o si en todas las plantillas que cre\u00e9is. Logo del sitio y el t\u00edtulo Chollo \u2591\u2592\u2593 Severo Inicio | Nuevos | Destacados Un footer con vuestro nombre y alg\u00fan dato copyright del tipo \u00a9CholloSevero 2022 donde el a\u00f1o debe ser calculado a trav\u00e9s de la fecha del servidor. ::: Pag\u00edna principal Adem\u00e1s del listado de todos los chollos de la base de datos debe contener el men\u00fa de navegaci\u00f3n: Cada chollo debe ser accesible desde este listado Cada chollo debe contener una imagen que estar\u00e1 guardada en public/img Cada chollo debe contener sus botones de editar y borrar que haga las funciones que tocan. Puedes utilizar iconos para cada uno de los botones. El nombre de las im\u00e1genes debe estar compuesta por la siguiente f\u00f3rmula idChollo -chollo-severo. extension Por ejemplo: 25-chollo-severo.jpg La imagen del chollo no se sube a trav\u00e9s del formulario, la pones directamente en la carpeta. Si te animas a subirlo a trav\u00e9s del formulario, puedes hacerlo. ::: P\u00e1gina de Chollo Cuando pinchemos en uno de los chollos del listados debemos ser redireccionados a esta vista donde podremos ver toda la informaci\u00f3n del tabla chollo. Puedes maquetarla como quieras e incluso puedes basarte en la web de Chollo Metro . El campo disponible no es necesario que lo muestres en esta vista ::: P\u00e1gina de Crear un chollo Un formulario con los campos necesarios para poder crear un chollo nuevo. Adem\u00e1s, debes tener en cuenta que tienes que validar los campos, de tal manera que no se pueda enviar el formulario si se ha dejado alg\u00fan campo en blanco; dichas validaciones, adem\u00e1s de a\u00f1adir la propiedad required de HTML5 debes hacerlo con Laravel. En caso de que haya habido alg\u00fan error en el formulario debes mostrar un mensaje en la parte de arriba del mismo con el mensaje de error (por ejemplo, si el campo est\u00e1 vac\u00edo). ::: P\u00e1gina de Editar un chollo Muy parecida a la de Crear un chollo pero que puedas editar un Chollo en funci\u00f3n de su id . Acu\u00e9rdate que no puedes dejar ning\u00fan campo vac\u00edo, para ello has de utilizar las validaciones de Laravel. \u2591\u2592\u2593 COSAS A TENER EN CUENTA \u2591\u2592\u2593 - Tienes que usar Bootstrap o Material Design , aunque si lo prefieres puedes hacer tus propios archivos .css Los mensajes de error o de informaci\u00f3n deben estar estilizados para que el usuario pueda verlos con facilidad Los elementos est\u00e1ticos deben estar presentes en todas las vistas; incluidas las de editar y crear. Las plantillas que formen parte de otra ya creada deben estar en una carpeta con el nombre de la plantilla madre, como hicimos con el ejercicio de Notas : Ve haciendo commits en funci\u00f3n de las tareas que vayas acabando o que veas que el commit tiene sentido. No es buena pr\u00e1ctica subir los camios de un archivo y el siguiente commit volver a subir m\u00e1s cambios del mismo archivo (a no ser que nos hayamos saltado o equivocado en algo). El proyecto es individual y despu\u00e9s se presentar\u00e1, uno por uno al profesor para que eval\u00fae todos los aspectos del mismo. Se har\u00e1n preguntas de c\u00f3mo se ha hecho cierta cosa o por qu\u00e9 se ha determinado cierto flujo de trabajo as\u00ed que, no os copi\u00e9is porque se eval\u00faa tambi\u00e9n la presentaci\u00f3n del proyecto","title":"7.- Frameworks PHP - Laravel"},{"location":"07frameworks.html#frameworks-php-laravel","text":"Duraci\u00f3n estimada: 40 sesiones","title":"Frameworks PHP. Laravel"},{"location":"07frameworks.html#puesta-en-marcha","text":"Lo primero de todo es crear una carpeta con el nombre del proyecto que vayamos a crear y nos metemos en ella. Vamos a utilizar la imagen de Bitnami ya preparada, as\u00ed que lo que hacer ahora es descargar el archivo docker-compose.yml del repositorio de Github oficial. Una vez descargado el archivo en nuestra carpeta que acabamos de crear con el nombre del proyecto, lanzamos el siguiente comando por consola para instalar todas las dependencias y crear las im\u00e1genes de Docker correspondientes. docker-compose -p Laravel up -d Si todo ha salido bien podr\u00e1s ver en el Visual Studio Code que se han creado 2 im\u00e1genes y que el servidor web de Laravel est\u00e1 funcionando bajo la siguiente URL. http://localhost:8000 Si por alguna extra\u00f1a raz\u00f3n est\u00e1s en Windows y no te funciona una de las 2 im\u00e1genes, puede ser debido a la instalci\u00f3n de composer dentro de la imagen de Laravel. Para solucionarlo, nos vamos a la carpeta del proyecto que se te habr\u00e1 creado por defecto al hacer docker-compose, en este caso y si no has modificado el archivo .yml la carpeta del proyecto sera my-proyect y dentro de ella eliminamos la carpeta vendor . Cuando hayamos eliminado dicha carpeta, necesitaremos instalar Composer de manera global en nuestro sistema Windows. Para ello. b\u00e1jate el instalador desde este enlace . Una vez lo instales ya ser\u00e1s capaz de lanzar el comando composer desde cualquier consola de Windows. Por \u00faltimo, abrimos una consola dentro de la carpeta my-project o el nombre que le hayas puesto a la carpeta del proyecto de Laravel y ejecutamos el siguiente comando. composer install Para terminar tan s\u00f3lo tendremos que volver a ejecutar el contenedor de Laravel desde Docker.","title":"Puesta en marcha"},{"location":"07frameworks.html#vscode-extensiones","text":"Recomendable instalar los siguientes plugins para Visual Studio Code Laravel Blade Snippets","title":"VSCode extensiones"},{"location":"07frameworks.html#carpetas-en-laravel","text":"Al crear un nuevo proyecto con este framework, Laravel crea una serie de carpetas por defecto. Esta estructura de carpetas es la recomendada para utilizar Laravel.","title":"Carpetas en Laravel"},{"location":"07frameworks.html#public","text":"Esta es la carpeta m\u00e1s importante ya que es donde se ponen todos los archivos que el cliente va a mostrar al usuario cuando introduzcamos la URL de nuestro sitio web. Normalmente se carga el archivo index.php por defecto.","title":"Public"},{"location":"07frameworks.html#routes","text":"Otra de las carpetas que m\u00e1s vamos a usar a lo largo de este curso de Laravel. En ella se albergan todas las rutas (redirecciones web) de nuestro proyecto, pero m\u00e1s concretamente en el archivo web.php Dada una ruta \u2192 se cargar\u00e1 una vista","title":"Routes"},{"location":"07frameworks.html#resources","text":"Esta es nuestra carpeta de recursos donde guardaremos los siguientes archivos, que tambi\u00e9n, est\u00e1n separados por sus carpetas... como cada nombre indica: css Archivos CSS js Archivos JS (JavaScript) lang Archivos relacionados con el idioma del sitio (variables & strings) views Archivos de nuestras vistas, lo que las rutas cargan","title":"Resources"},{"location":"07frameworks.html#rutas","text":"Las rutas en Laravel (y en casi cualquier Framework) sirven para redireccionar al cliente (o navegador) a las vistas que nosotros queramos. Estas rutas se configuran en el archivo public/routes/web.php donde se define la ruta que el usuario pone en la URL despu\u00e9s del dominio y se retorna la vista que se quiere cargar al introducir dicha direcci\u00f3n en el navegador. <?php // Ruta por defecto para cargar la vista welcome cuando el usuario introduce simplemente el dominio Route :: get ( '/' , function () { return view ( 'welcome' ); }); En el ejemplo de arriba vamos a cargar la vista llamada welcome que hace referencia a la vista resources/views/welcome.blade.php","title":"Rutas"},{"location":"07frameworks.html#alias","text":"Es interesante darle un alias o un nombre a nuestras rutas para poder utilizar dichos alias en nuestras plantillas de Laravel que veremos m\u00e1s adelante. Para ello, basta con utilizar la palabra name al final de la estructura de la ruta y darle un nombre que queramos; normalmente descriptivo y asociado a la vista que tiene que cargar el enroutador de Laravel. <?php Route :: get ( '/users' , function () { return view ( 'users' ); }) -> name ( 'usuarios' ); Despu\u00e9s veremos que es muy \u00fatil ya que a la hora de refactorizar o hacer un cambio, si tenemos enlaces o men\u00fas de navegaci\u00f3n que apuntan a esta ruta, s\u00f3lo tendr\u00edamos que cambiar el par\u00e1metro dentro del get() y no tener que ir archivo por archivo. Laravel nos proporciona una manera m\u00e1s c\u00f3moda a la hora de cargar una vista si no queremos par\u00e1metros ni condiciones. Tan s\u00f3lo definiremos la siguiente l\u00ednea que hace referencia la ruta datos en la URL y va a cargar el archivo usuarios.php de nuestra carpeta views como le hemos indicado en el segundo par\u00e1metro. <?php /* http://localhost/datos/ */ Route :: view ( 'datos' , 'usuarios' ); Pero no s\u00f3lo podemos retornar una vista sino, desde un simple string a m\u00f3dulos propios de Laravel.","title":"Alias"},{"location":"07frameworks.html#parametros","text":"Ya hemos visto que con PHP podemos pasar par\u00e1metros a trav\u00e9s de la URL, como si fueran variables, que las recuper\u00e1bamos a trav\u00e9s del m\u00e9todo GET o POST. Con Laravel tambi\u00e9n podemos introducir par\u00e1metros pero de una forma m\u00e1s vistosa y ordenada, de tal manera que sea visualmente m\u00e1s c\u00f3modo de recordar y de indexar por los motores de b\u00fasqueda como Google. http://localhost/cliente/324 Para configurar este tipo de rutas en nuestro archivo de rutas public/routes/web.php haremos lo siguiente. <?php Route :: get ( 'cliente/{id}' , function ( $id ) { return ( 'Cliente con el id: ' . $id ); }); \u00bfQu\u00e9 pasa si no introducimos un id y s\u00f3lo navegamos hasta cliente/ ? ... Nos va a devolver un 404 Para resolver \u00e9sto, podemos definir una ruta por defecto en caso de que el id (o par\u00e1metro) no sea pasado. Para ello usaremos el s\u00edmbolo ? en nuestro nombre de ruta e inicializaremos la variable con el valor que queramos. <?php Route :: get ( 'cliente/{id?}' , function ( $id = 1 ) { return ( 'Cliente con el id: ' . $id ); }); Ahora tenemos otro problema, porque estamos filtrando por id del cliente que, normalmente es un n\u00famero, pero si metemos un par\u00e1metro que no sea un n\u00famero, vamos a obtener un resultado no deseado. Para resolver este caso haremos uso de la cl\u00e1usula where junto con una expresi\u00f3n regular n\u00famerica. <?php Route :: get ( 'cliente/{id?}' , function ( $id = 1 ) { return ( 'Cliente con el id: ' . $id ); }) -> where ( 'id' , '[0-9]+' ); Adem\u00e1s, podemos pasarle variables a nuestra URL para luego utilzarlas en nuestros archivos de plantillas o en archivos .php haciendo uso de un array asociativo. Veamos un ejemplo con la forma reducida para ahorrarnos c\u00f3digo <?php Route :: view ( 'datos' , 'usuarios' , [ 'id' => 5446 ]); ... y el archivo resources/views/usuarios.php debe tener algo parecido a \u00e9sto <!-- Estructura t\u00edpica de un archivo HTML5 --> < p > Usuario con id: <?= $id ?> </ p > <!-- ... --> Con las plantillas de Laravel blade.php veremos c\u00f3mo simplificar a\u00fan m\u00e1s nuestro c\u00f3digo. Para m\u00e1s informaci\u00f3n acerca de las rutas, par\u00e1metros y expresiones regulares en las rutas puedes echar un vistazo a la documentaci\u00f3n oficial de rutas que contiene numerosos ejemplos.","title":"Par\u00e1metros"},{"location":"07frameworks.html#plantillas-o-templates","text":"A trav\u00e9s de las plantillas de Laravel vamos a escribir menos c\u00f3digo PHP y vamos a tener nuestros archivos mejor organizados. Blade es el sistema de plantillas que trae Laravel, por eso los archivos de plantillas que guardamos en el directorio de views llevan la extensi\u00f3n blade.php . De esta manera sabemos inmediatamente que se trata de una plantilla de Laravel y que forma parte de una vista que se mostrar\u00e1 en el navegador.","title":"Plantillas o Templates"},{"location":"07frameworks.html#directivas","text":"Laravel tiene un gran n\u00famero de directivas que podemos utilizar para ahorrarnos mucho c\u00f3digo repetitivo entre otras funciones. Digamos que las directivas son peque\u00f1as funciones ya escritas que aceptan par\u00e1metros y que cada una de ellas hace una funci\u00f3n diferente dentro de Laravel. @yield Define el contenido din\u00e1mico que se va a cargar. Se usa conjuntamente con @section @section y @endsection bloque de c\u00f3digo din\u00e1mico @extends importa el contenido de una plantilla ya creada","title":"Directivas"},{"location":"07frameworks.html#separando-codigo","text":"Veamos un ejemplo de c\u00f3mo hacer uso del poder de Laravel para crear plantillas y no repetir c\u00f3digo. Supongamos que tenemos ciertas estructuras HTML repetidas como puede ser una cabecera header , un men\u00fa de navegaci\u00f3n nav y un par de secciones que hacen uso de este mismo c\u00f3digo. Supongamos que tenemos 2 apartados en la web: Blog Fotos Primero de todo tendremos que generar un archivo que haga de plantilla de nuestro sitio web. Para ello creamos el archivo plantilla.blade.php dentro de nuestro directorio de plantillas resources/views . Dicho archivo va a contener el t\u00edpico c\u00f3digo de una p\u00e1gina simple de HTML y en el body a\u00f1adiremos nuestros contenido est\u00e1tico y din\u00e1mico. < body > <!-- CONTENIDO EST\u00c1TICO PARA TODAS LAS SECCIONES --> < h1 > Bienvenid@s a Laravel </ h1 > < hr > <!-- MEN\u00da --> < nav > < a href = {{ route (' noticias ') }} > Blog </ a > | < a href = {{ route (' galeria ') }} > Fotos </ a > </ nav > <!-- CONTENIDO DIN\u00c1MICO EN FUNCI\u00d3N DE LA SECCI\u00d3N QUE SE VISITA --> < header > @yield('apartado') </ header > </ body > Cada secci\u00f3n que haga uso de esta plantilla contendr\u00e1 el texto est\u00e1tico Bienvenid@s a Laravel seguido de un men\u00fa de navegaci\u00f3n con enlaces a cada una de las secciones y el contenido din\u00e1mico de cada secci\u00f3n. Ahora crearemos los archivos din\u00e1micos de cada una de las secciones, en nuestro caso blog.blade.php y fotos.blade.php <?php // blog.blade.php @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h2 > Est\u00e1s en BLOG </ h2 > @ endsection Importamos el contenido de plantilla bajo la directiva @extends para que cargue los elementos est\u00e1ticos que hemos declarado y con la directiva @section y @endsection definimos el bloque de c\u00f3digo din\u00e1mico, en funci\u00f3n de la secci\u00f3n que estemos visitando. Ahora casi lo mismo para la secci\u00f3n de fotos <?php // fotos.blade.html @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h2 > Est\u00e1s en FOTOS </ h2 > @ endsection El \u00faltimo paso que nos queda es configurar el archivo de rutas routes/web.php <?php // web.php Route :: view ( 'blog' , 'blog' ) -> name ( 'noticias' ); Route :: view ( 'fotos' , 'fotos' ) -> name ( 'galeria' ); De esta manera podremos hacer uso del men\u00fa de navegaci\u00f3n que hemos puesto en nuestra plantilla y gracias a los alias noticias y galeria , la URL ser\u00e1 m\u00e1s amigable.","title":"Separando c\u00f3digo"},{"location":"07frameworks.html#estructuras-de-control","text":"Como en todo buen lenguaje de programaci\u00f3n, en Laravel tambi\u00e9n tenemos estructuras de control. En Blade (plantillas de Laravel) siempre que iniciemos un bloque de estructura de control DEBEMOS cerrarla @foreach ~ @endforeach lo usamos para recorrer arrays @if ~ @endif para comprobar condiciones l\u00f3gicas @switch ~ @endswitch en funci\u00f3n del valor de una variable ejecutar un c\u00f3digo @case define la casu\u00edstica del switch @break rompe la ejecuci\u00f3n del c\u00f3digo en curso @default si ninguna casu\u00edstica se cumple <?php $equipo = [ 'Mar\u00eda' , 'Alfredo' , 'William' , 'Ver\u00f3nica' ]; @ foreach ( $equipo as $nombre ) < p > {{ $nombre }} </ p > @ endforeach Acordaros que podemos pasar variables a trav\u00e9s de las rutas como si fueran par\u00e1metros. Pero en este caso, vamos a ver otra directiva m\u00e1s; el uso de @compact . <?php // Uso de @compact $equipo = [ 'Mar\u00eda' , 'Alfredo' , 'William' , 'Ver\u00f3nica' ]; // Route::view('nosotros', ['equipo' => 'equipo']); Route :: view ( 'nosotros' , @ compact ( 'equipo' ));","title":"Estructuras de control"},{"location":"07frameworks.html#controladores","text":"Los controladores son el lugar perfecto para definir la l\u00f3gica de negocio de nuestra aplicaci\u00f3n o sitio web. Hace de intermediario entre la vista (lo que vemos con nuestro navegador o cliente) y el servidor donde la app est\u00e1 alojada. Por defecto, los controladores se guardan en una carpeta espec\u00edfica situada en app/Http/Controllers y tienen extensi\u00f3n .php . Para crear un controlador nuevo debemos hacer uso de nuestro querido aut\u00f3mata artisan donde le diremos que cree un controlador con el nombre que nosotros queramos. Abrimos la consola y nos situamos en la ra\u00edz de nuestro proyecto php artisan make:controller PagesController Si todo ha salido bien, recibiremos un mensaje por consola con que todo ha ido bien y podremos comprobar que, efectivamente se ha creado el archivo PagesController.php con una estructura b\u00e1sica de controlador, dentro de la carpeta Controllers que hemos descrito anteriormente. Ahora podemos modificar nuestro archivo de rutas web.pbp para dejarlo limpio de l\u00f3gica y trasladar \u00e9sta a nuestro nuevo controlador. La idea de \u00e9sto es dejar el archivo web.php tan limpio como podamos para que, de un vistazo, se entienda todo perfectamente. RECUERDA que s\u00f3lo movemos la l\u00f3gica, mientras que las cl\u00e1usulas como where y name las seguimos dejando en el archivo de rutas web.php Veamos c\u00f3mo quedar\u00eda un refactor del archivo de rutas utilizando un Controller como el que acabamos de crear Ahora nos quedar\u00eda de la siguiente manera <?php // web.php (v2.0) \u2592\u2592\u2592\u2592 Refactorizado use App\\Http\\Controllers\\PagesController ; use Illuminate\\Support\\Facades\\Route ; Route :: get ( '/' , [ PagesController :: class , 'inicio' ]); Route :: get ( 'datos' , [ PagesController :: class , 'datos' ]); Route :: get ( 'cliente/{id?}' , [ PagesController :: class , 'cliente' ]) -> where ( 'id' , '[0-9]+' ); Route :: get ( 'nosotros/{nosotros?}' , [ PagesController :: class , 'nosotros' ]) -> name ( 'nosotros' ); y en nuestro archivo controlador lo dejar\u00edamos de la siguiente manera <?php // PagesController.php namespace App\\Http\\Controllers ; class PagesController extends Controller { public function inicio () { return view ( 'welcome' ); } public function datos () { return view ( 'usuarios' , [ 'id' => 56 ]); } public function cliente ( $id = 1 ) { return ( 'Cliente con el id: ' . $id ); } public function nosotros ( $nombre = null ) { $equipo = [ 'Paco' , 'Enrique' , 'Maria' , 'Veronica' ]; return view ( 'nosotros' , @ compact ( 'equipo' , 'nombre' )); } }","title":"Controladores"},{"location":"07frameworks.html#migraciones-eloquent","text":"Con las migraciones vamos a gestionar la base de datos de nuestro sitio web; tanto crear nuevas BBDD como editarlas desde Laravel. Las migraciones de un sitio hecho con Laravel se alojan en la ruta database/migrations y tienen extensi\u00f3n .php . Si te fijas, nada m\u00e1s instalar Laravel con la imagen de Bitnami, se han creado varios archivos de migraciones que podemos usar, pero de momento los dejamos ah\u00ed y NO LOS BORRAMOS porque son muy \u00fatiles.","title":"Migraciones &amp; Eloquent"},{"location":"07frameworks.html#archivos-env","text":"Es de uso com\u00fan trabajr con archivos de entorno llamados tambi\u00e9n archivos .env . Normalmente, eun unproyecto real puedes encontrarte con varios archivos de este tipo en funci\u00f3n del despliegue que se quiera hacer; como por ejemplo: test.env config. para desplegar en entorno seguro de pruebas release.env config. para desplegar cambios de versi\u00f3n que se env\u00eda a los beta testers production.env config. para desplegar el c\u00f3digo ya probado al resto del mundo. En nuestro caso, como no vamos a desplegar nada, s\u00f3lo vamos a usar un \u00fanico archivo .env y en cuesti\u00f3n de las migraciones vamos a fijarnos a partir de la l\u00ednea 11 donde dice: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=blog DB_USERNAME=root DB_PASSWORD= En este archivo debemos configurar los datos de nuestro servidor MySQL y rellenarlo con la informaci\u00f3n correspondiente a nuestra base de datos ya creada Una vez tengamos \u00e9sto, lo que nos queda es ejecutar el comando de las migraciones a trav\u00e9s del CLI artisan php artisan migrate Si todo ha salido bien obtendremos el siguiente resultado donde podremos observar que todas las migraciones se han insertado correctamente en la base de datos. Si nos vamos al cliente que utilicemos para manejar la base de datos (phpMyAdmin por ejemplo) veremos que en nuestra base de datos se han creado todas las tablas de la migraci\u00f3n que hemos ejecutado y adem\u00e1s una tabla que se llama migrations . La tabla migrations es simplemente un registro de todas las migraciones llevadas a cabo. Adem\u00e1s, podemos hacer un rollback en caso de que queramos reestablecer nuestra base de datos. php artisan migrate:rollback O si preferimos hacer un reset para dejarla limpia php artisan migrate:reset","title":"Archivos .env"},{"location":"07frameworks.html#modelos","text":"Gracias a Eloquent y su integraci\u00f3n con Laravel, podremos crear modelos de datos de una manera automatizada a trav\u00e9s de artisan Ahora que ya sabemos manejar las migraciones es hora de crear nuestras propias migraciones pero a trav\u00e9s de Eloquent. A trav\u00e9s de la instrucci\u00f3n make:model creamos un nuevo modelo de datos, a continuaci\u00f3n ponemos el nombre siempre empezando en May\u00fasucla y en SINGULAR y pasamos el par\u00e1metro relacionado con las migraciones -m . php artisan make:model Nota -m Si todo ha salido bien, veremos en nuestro directorio de migraciones database/migrations un nuevo archivo que se llama 2022_01_07_81237_create_notas_table.php . El siguiente paso es ver nuestro archivo de migraciones y editarlo para que contenga las tablas que nosotros queramos. Si lo visualizamos tan s\u00f3lo tendr\u00e1 la estructura b\u00e1sica con un par de tablas. Vamos a a\u00f1adir un par de tablas m\u00e1s. <?php Schema :: create ( 'notas' , function ( Blueprint $table ) { $table -> id (); $table -> timestamps (); $table -> string ( 'nombre' ); $table -> text ( 'descripcion' ); }); En esta Schema podemos poner todas las tablas que nosotros queramos y establecer el tipo de dato para cada una de ellas, as\u00ed como el nombre. Una vez que estamos satisfechos con nuestro esquema debemos volver a ejecutar el c\u00f3digo de migraci\u00f3n a trav\u00e9s de artisan para que se introduzca esta nueva informaci\u00f3n en la base de datos. Para ver todos los tipos de datos que maneja Eloquent puedes visitar la documentaci\u00f3n oficial .","title":"Modelos"},{"location":"07frameworks.html#recuperando-datos","text":"Ya tenemos nuestra base de datos creada con nuestras tablas migradas, ahora s\u00f3lo falta rellenar esas tablas con datos para poder pintarlos en nuestro c\u00f3digo HTML. Rellenamos las tablas a trav\u00e9s del cliente de MySQL que m\u00e1s nos guste: PHP MyAdmin MySQL Workbench HeidiSQL * SquirrelSQL Ahora tendremos que irnos a una vista ya creada o creamos una nueva y solicitamos los datos desde el HTML. \u00bfNos acordamos del PagesController ? pues hacer uso de su magia junto con las rutas que creamos en web.php <?php // estamos en \u2593\u2593\u2593 web.php Route :: get ( 'notas' , [ PagesController :: class , 'notas' ]); Antes de intentar entrar, debemos configurar nuestro controlador de la siguiente manera: <?php // estamos en \u2593\u2593\u2593 PagesController.php public function notas () { $notas = Nota :: all (); return view ( 'notas' , compact ( 'notas' )); } El \u00faltimo paso ser\u00eda, crear la vista con la tabla que pinte los datos a trav\u00e9s de la variable que le pasamos por par\u00e1metro en la ruta que acabamos de describir. <?php // estamos en \u2593\u2593\u2593 notas.blade.php < h1 > Notas desde base de datos </ h1 > < table border = \"1\" > < thead > < tr > < th > Nombre </ th > < th > Descripci\u00f3n </ th > </ tr > </ thead > @ foreach ( $notas as $nota ) < tr > < td > {{ $nota -> nombre }} </ td > < td > {{ $nota -> descripcion }} </ td > </ tr > @ endforeach </ table > Hay que fijarse bien en los nombres de las columnas que tienen nuestras bases de datos, es justo lo que va despu\u00e9s de -> y siempre rodeado por los s\u00edmbolos {{ }} ya que estamos en un archivo de plantilla. \u00bfQu\u00e9 pasar\u00eda si s\u00f3lo queremos acceder a un \u00fanico elemento? como si hici\u00e9semos un SELECT * from usuarios where id = 1 Para \u00e9so, tenemos una instrucci\u00f3n espec\u00edfica en Eloquent que nos soluciona el problema. En este caso usaremos la instrucci\u00f3n findOrFail y como buenos usuarios de Laravel, lo utilizaremos dentro del controlador. <?php // estamos en \u2593\u2593\u2593 PagesController.php public function detalle ( $id ) { $nota = Nota :: findOrFail ( $id ); return view ( 'notas.detalle' , compact ( 'nota' )); } Hay que acordarse que debemos configurar la ruta en nuestro archivo de rutas. <?php // estamos en \u2593\u2593\u2593 web.php Route :: get ( 'notas/{id?}' , [ PagesController :: class , 'detalle' ]) -> name ( 'notas.detalle' ); Y por \u00faltimo, debemos crear la plantilla, pero como es un archivo de detalle o que est\u00e1 relacionado con otra plantilla ya creada, podemos crear una carpeta con el nombre de la plantilla y dentro, el archivo de plantilla en cuesti\u00f3n. De tal manera que quedar\u00eda as\u00ed resources/views/notas/detalle.blade.php <?php // estamos en \u2593\u2593\u2593 detalle.blade.php @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h1 > Detalle de la nota </ h1 > < h3 > ID : {{ $nota -> id }} </ h3 > < h3 > Nombre : {{ $nota -> nombre }} </ h3 > < h3 > Descripci\u00f3n : {{ $nota -> descripcion }} </ h3 > @ endsection","title":"Recuperando datos"},{"location":"07frameworks.html#modificar-tablas-sin-perder-datos","text":"Uno de los dilemas que tenemos a la hora de manejar las bases de datos con Laravel y Eloquent, es que a veces cometemos errores y queremos introducir una nueva columna dentro de nuestra tabla o modificar una de esas columnas SIN PERDER LOS DATOS DE LA BASE DE DATOS . Imaginemos que en nuestra tabla notas queremos agregar una columna con el nombre autor . Lo primero de todo es crear una nueva migraci\u00f3n para realizar este cambio. Para ello, haremos uso de nuestro querido artisan y debemos crear el nombre de esta migraci\u00f3n con la siguiente f\u00f3rmula add_fields_to_ seguidamente del nombre de la tabla que queremos modificar. php artisan migrate add_fields_to_nota Seguidamente, nos metemos en el archivo de la migraci\u00f3n que acabamos de crear y en el apartado up() debemos poner el cambio que queremos realizar y en la secci\u00f3n down() debemos hacer lo mismo pero tenemos que decirle a Eloquent que la elimine \u00bfpor qu\u00e9? para en caso de hacer migrate rollback, se cargue este nuevo campo que hemos creado. <?php public function up () { Schema :: table ( 'notas' , function ( Blueprint $table ) { $table -> string ( 'autor' ); }); } public function down () { Schema :: table ( 'notas' , function ( Blueprint $table ) { $table -> dropColumn ( 'autor' ); }); }","title":"Modificar tablas sin perder datos"},{"location":"07frameworks.html#formularios","text":"Ahora que ya sabemos c\u00f3mo cargar de una base de datos, vamos a ver c\u00f3mo insertarlos con Laravel y sin escribir ni una sola l\u00ednea de SQL. Gracias al m\u00e9todo save() de Laravel podremos guardar datos que provengan de un formulario desde nuestras plantillas. Para ello, lo primero que necesitamos lo siguiente: formulario HTML que recoja los datos que el usuario introduce Una ruta que sea la encargada de recibir los datos del formulario M\u00e9todo POST para enviar los datos al servidor Un m\u00e9todo en nuestro controlador que procese los datos y los guarde a trav\u00e9s de save() La cl\u00e1usula de seguridad @csrf para evitar ataques desde otros sitios As\u00ed pues, empecemos por el formulario < form action = \"{{ route('notas.crear') }}\" method = \"POST\" > @csrf {{-- Cl\u00e1usula para obtener un token de formulario al enviarlo --}} < input type = \"text\" name = \"nombre\" placeholder = \"Nombre de la nota\" class = \"form-control mb-2\" autofocus > < input type = \"text\" name = \"descripcion\" placeholder = \"Descripci\u00f3n de la nota\" class = \"form-control mb-2\" > < button class = \"btn btn-primary btn-block\" type = \"submit\" > Crear nueva nota </ button > </ form > Como vemos, creamos 2 inputs relacionados con nuestras columnas dentro de la tabla, en este caso nombre y descripci\u00f3n El action del formulario debe apuntar a una nueva ruta que vayamos a crear y donde enviemos los datos mediante POST . Ahora crearemos la ruta en nuestro archivo de rutas web.php <?php // estamos en \u2593\u2593\u2593 web.php Route :: post ( 'notas' , [ PagesController :: class , 'crear' ]) -> name ( 'notas.crear' ); Si nos fijamos, ya no estamos haciendo uso del get sino del m\u00e9todo post y como son m\u00e9todos diferentes, podemos nombrar la ruta de la misma manera que en get ya que no habr\u00e1 conflicto. Por otro lado, necesitamos invocar nuestro PagesController famoso y decirle que vamos a utilizar el m\u00e9todo crear que bueno, todav\u00eda no existe pero que vamos a crear a contnuaci\u00f3n. No olvidemos crear un alias para poder vincularlo al action del formulario SUPER IMPORTANTE . Para terminar, editaremos nuetro archivo PagesController.php para que el controlador que estamos usando tenga el m\u00e9todo que hemos nombrado previamente. <?php // estamos en \u2593\u2593\u2593 PagesController.php use App\\Models\\Nota ; use Illuminate\\Http\\Request ; public function crear ( Request $request ) { $notaNueva = new Nota ; $notaNueva -> nombre = $request -> nombre ; $notaNueva -> descripcion = $request -> descripcion ; $notaNueva -> save (); return back () -> with ( 'mensaje' , 'Nota agregada exit\u00f3samente' ); } Nuestro m\u00e9todo crear va a recibir un objeto llamado $request (el cual podemos cambiarle el nombre perfectamente) de tipo Request por lo que DEBEMOS IMPORTAR Request para poder utilizar dicha clase de Laravel. Dentro del m\u00e9todo crear que acabamos de escribir, debemos hacer uso del modelo Nota que ya creamos en otros ejemplos e instanciarla a traves de una variable, en nuestro caso $notaNueva . De esta manera, podremos aceder a los m\u00e9todos y propiedades de la misma, por eso podemos utilizar nombre y descripcion . As\u00ed mismo, la variable $request est\u00e1 formada por los mismos nombres de input que hemos puesto en el formulario de la plantilla, si os acord\u00e1is eran name=\"nombre\" y name=\"descripcion\" . Finalmente usamos el m\u00e9todo save() para guardar estos nuevos datos en la base de datos y retornamos a la p\u00e1gina del formulario con el m\u00e9todo back() a\u00f1adiendo un mensaje con with() . Pero \u00bfd\u00f3nde va a salir este mensaje? -- lo tenemos que declarar en nuestra plantilla @if (session('mensaje')) < div class = \"mensaje-nota-creada\" > {{ session('mensaje') }} </ div > @endif","title":"Formularios"},{"location":"07frameworks.html#validaciones","text":"Laravel nos proporciona herramientas para poder validar los datos que el usuario introduce en los campos del formulario. Adem\u00e1s de poder hacerlo con la etiqueta required de HTML5, debemos validar los datos a trav\u00e9s del Framework. Para ello, necesitamos modificar varios elementos: En primer lugar, nuestro archivo controller En segundo lugar, nuestra plantilla que carga el formulario Empecemos con el controlador. A trav\u00e9s del m\u00e9todo validate() le decimos a Eloquent qu\u00e9 campos son requeridos para poder enviar el formulario. Utilizaremos para ello un array asociativo con el nombre del input y la palabra reservada required <?php // estamos en \u2593\u2593\u2593 PagesController.php $request -> validate ([ 'nombre' => 'required' , 'descripcion' => 'required' ]); Seguidamente nos moveremos a la plantilla donde est\u00e9 el formulario y a trav\u00e9s de la directiva @error crearemos un bloque html con nuestro mensaje de error por cada uno de los inputs requeridos. <?php // estamos en \u2593\u2593\u2593 notas.blade.php @ error ( 'nombre' ) < div class = \"alert alert-danger\" > No olvides rellenar el nombre </ div > @ enderror Pero \u00bfqu\u00e9 pasa cuando ha habido un error y nos muestra el mensaje que hemos escrito? Si te fijas, los campos que hab\u00edas rellenado perder\u00e1n la informaci\u00f3n, pero con Laravel podemos persistirlos sin hacer que el usuario vuelva a introducirlos. Para poder persistir los datos una vez enviados pero con alg\u00fan error de campo requerido, utilizaremos la directiva old() como value del input dentro de nuestro formulario y le pasaremos el nombre del input declarado en la etiqueta name . <?php // estamos en \u2593\u2593\u2593 notas.blade.php < input type = \"text\" name = \"nombre\" value = \"{{ old('nombre') }}\" class = \"form-control mb-2\" placeholder = \"Nombre de la nota\" autofocus >","title":"Validaciones"},{"location":"07frameworks.html#editando-registros","text":"Despu\u00e9s de tener campos en la base de datos, lo interesante ser\u00eda poder editarlos a trav\u00e9s de un formulario. Laravel nos proporciona las herramientas necesarias para ello; veamos pues lo que necesitamos para poder realizar el cambio a trav\u00e9s de la directiva put() . Para poder hacer el cambio de resgistros necesitamos lo siguiente: Un enlace para redirigir a la p\u00e1gina de editar, pasando el id del elemento en cuesti\u00f3n Una nueva ruta que apunte a nuestra plantilla de editar Una plantilla para poder editar con un formulario que reciba los datos a editar Una nueva funci\u00f3n dentro de nuestro controlador para poder manejar los datos ya introducidos Una nueva ruta que utilice el m\u00e9todo put() para poder actualizar los datos Un nuevo m\u00e9todo dentro de nuestro controlador para actualizar los datos nuevos introducidos <?php // estamos en \u2593\u2593\u2593 notas.blade.php < a href = \"{{ route('notas.editar', $nota ) }}\" class = \"btn btn-warning btn-sm\" > Editar </ a > Ahora creamos la ruta <?php // estamos en \u2593\u2593\u2593 wep.php Route :: get ( 'editar/{id}' , [ PagesController :: class , 'editar' ]) -> name ( 'notas.editar' ); Route :: put ( 'editar/{id}' , [ PagesController :: class , 'actualizar' ]) -> name ( 'notas.actualizar' ); Ahora necesitamos crear una nueva plantilla resources/views/notas/editar.blade.php <?php // estamos en \u2593\u2593\u2593 editar.blade.php @ extends ( 'plantilla' ) @ section ( 'apartado' ) < h2 > Editando la nota {{ $nota -> id }} </ h2 > @ if ( session ( 'mensaje' )) < div class = \"alert alert-success\" > {{ session ( 'mensaje' )}} </ div > @ endif < form action = \"{{ route('notas.actualizar', $nota -> id) }}\" method = \"POST\" > @ method ( 'PUT' ) {{ -- Necesitamos cambiar al m\u00e9todo PUT para editar -- }} @ csrf {{ -- Cl\u00e1usula para obtener un token de formulario al enviarlo -- }} @ error ( 'nombre' ) < div class = \"alert alert-danger\" > El nombre es obligatorio </ div > @ enderror @ error ( 'descripcion' ) < div class = \"alert alert-danger\" > La descripci\u00f3n es obligatoria </ div > @ enderror < input type = \"text\" name = \"nombre\" class = \"form-control mb-2\" value = \"{{ $nota -> nombre }}\" placeholder = \"Nombre de la nota\" autofocus > < input type = \"text\" name = \"descripcion\" placeholder = \"Descripci\u00f3n de la nota\" class = \"form-control mb-2\" value = \"{{ $nota -> descripcion }}\" > < button class = \"btn btn-primary btn-block\" type = \"submit\" > Guardar cambios </ button > </ form > @ endsection Y por \u00faltimo, modificamos nuestro PagesController <?php // estamos en \u2593\u2593\u2593 PagesController.php public function editar ( $id ) { $nota = Nota :: findOrFail ( $id ); return view ( 'notas.editar' , compact ( 'nota' )); } public function actualizar ( Request $request , $id ) { $request -> validate ([ 'nombre' => 'required' , 'descripcion' => 'required' ]); $notaActualizar = Nota :: findOrFail ( $id ); $notaActualizar -> nombre = $request -> nombre ; $notaActualizar -> descripcion = $request -> descripcion ; $notaActualizar -> save (); return back () -> with ( 'mensaje' , 'Nota actualizada' ); }","title":"Editando registros"},{"location":"07frameworks.html#eliminando-registros","text":"A la hora de eliminar un registro nuevo, no necesitamos crear una plantilla nueva ya que podemos mandar la instrucci\u00f3n directamente a trav\u00e9s de otro formulario. Por lo tanto, para eliminar un registro de la base de datos utilizaremos lo siguiente. Un formulario b\u00e1sico con un \u00fanico bot\u00f3n de eliminar Usaremos el m\u00e9todo DELETE para sobreescribir el m\u00e9todo del formulario HTML Una ruta nueva para controlar el action de este nuevo formulario Un nuevo m\u00e9todo dentro de nuestro Controlador que lleve la l\u00f3gica para borrar el registro Vamos a ver c\u00f3mo meter ese formulario dentro de nuestro listado de notas <?php // estamos en \u2593\u2593\u2593 notas.blade.php < form action = \"{{ route('notas.eliminar', $nota ) }}\" method = \"POST\" class = \"d-inline\" > @ method ( 'DELETE' ) @ csrf < button class = \"btn btn-danger btn-sm\" type = \"submit\" > Eliminar </ button > </ form > Ahora que ya tenemos montado el formulario en nuestra plantilla, pasemos a crear la ruta que hemos colocado en el action del formulario para borrar elementos. <?php // estamos en \u2593\u2593\u2593 web.php Route :: delete ( 'eliminar/{id}' , [ PagesController :: class , 'eliminar' ]) -> name ( 'notas.eliminar' ); El \u00faltimo paso que nos queda es modificar el PagesController <?php // estamos en \u2593\u2593\u2593 PagesController.php public function eliminar ( $id ) { $notaEliminar = Nota :: findOrFail ( $id ); $notaEliminar -> delete (); return back () -> with ( 'mensaje' , 'Nota Eliminada' ); } Si todo ha salido bien, habremos creado un sitio en Laravel y Eloquent que es capaz de hacer un CRUD validando campos en formularios e insertando datos reales en una base de datos.","title":"Eliminando registros"},{"location":"07frameworks.html#paginacion","text":"Para a\u00f1adir paginaci\u00f3n a nuestros resultados, Eloquent tiene un m\u00e9todo que se llama paginate() donde le pasamos un n\u00famero entero como par\u00e1metro para indicarle el n\u00famero de resultados que queremos por p\u00e1gina. <?php // estamos en \u2593\u2593\u2593 PagesController.php public function notas () { // $notas = Nota::all(); $notas = Nota :: paginate ( 5 ); return view ( 'notas' , compact ( 'notas' )); } Ahora veremos ciertos elementos HTML que se han generado en nuestra vista, \u00e9sto es porque Laravel hace uso de una librer\u00eda de paginaci\u00f3n situada en la carpeta vendor/laravel/framework/src/illuminate/Pagination Si os met\u00e9is en el directorio y abr\u00eds el archivo tailwind.blade.php ver\u00e9is la estructura HTML que os sale en la vista. Pod\u00e9is modificar este archivo a vuestro antojo, pero es recomendable guardarse una copia del mismo. Existe otra dependencia en resources/lang/en/pagination.php donde encontrar\u00e1s el idioma para la paginaci\u00f3n.","title":"Paginaci\u00f3n"},{"location":"07frameworks.html#autenticacion","text":"Para la utenticaci\u00f3n de usuarios necesitamos instalar unas cuantas dependencias ya preparadas para ello. No es necesarios crear un proyecto nuevo pero nosotros vamos a hacerlo para tener uno con autenticaci\u00f3n y otro no, el que ya hicimos al principio. Primero de todo, vamos a crear un nuevo proyecto en Laravel que se llame notas_auth y nos metemos dentro de la carpeta del mismo cuando el script haya terminado. Dentro de la carpeta notas_auth lanzamos los siguientes comandos. composer require laravel/ui php artisan ui vue --auth Para terminar, lanzaremos el comando migrate que ya conocemos... SI EST\u00c1S WINDOWS fuera de la imagen de Docker (utilizando xampp o parecidos) debes crear una nueva base de datos y posteriormente modificiar el archivo .env poniendo el nombre de esa base de datos que acabas de crear. php artisan migrate Si todo ha salido bien, podr\u00e1s ver en la carpeta resources/views una carpeta que se llama auth y un controlador nuevo que llama HomeController","title":"Autenticaci\u00f3n"},{"location":"07frameworks.html#restringir-una-ruta","text":"Si nos fijamos, en el nuevo controlador que se ha creado HomeController podemos ver unas l\u00edneas al principio del archivo que son las que determinan si la ruta est\u00e1 restringida a usuarios registrados y logueados. <?php public function __construct () { $this -> middleware ( 'auth' ); } Mediante el uso del middleware llamado auth establecemos que todas las rutas que hagan uso de este controlador deban pasar por el login para mostrar el contenido. Por lo tanto, en nuestros proyectos es recomendable utilizar diferentes controladores para diferentes vistas; las que est\u00e9n reestringidas por el login y las que no.","title":"Restringir una ruta"},{"location":"07frameworks.html#datos-del-usuario","text":"Siempre que queramos acceder a cualquier dato del usuario logueado, utilizaremos el m\u00e9todo auth() para sacar por pantalla la informaci\u00f3n o para utilizar l\u00f3gica a la hora de guardar datos en la base de datos en funci\u00f3n de un usuario, un email o el campo que sea. Imaginemos que tenemos una ruta donde accedemos a dicha informaci\u00f3n <?php public function notas () { return auth () -> user (); // return auth()->user() -> name; // return auth()->user() -> email; // ... } Si visitamos esta ruta con nuestro login y password, nos aparecer\u00e1 por pantalla toda la informaci\u00f3n de nuestro user a excepci\u00f3n de la contrase\u00f1a y, aunque as\u00ed fuera porque se lo forzamos, \u00e9sta aparecer\u00e1 encriptada.","title":"Datos del usuario"},{"location":"07frameworks.html#relaciones-con-eloquent","text":"A trav\u00e9s de Eloquent vamos a poder gestionar las relaciones entre nuestras tablas de la base de datos de una manera muy sencilla y sin sentencias SQL.","title":"Relaciones con Eloquent"},{"location":"07frameworks.html#uno-a-uno-1-a-1","text":"Para crear este tipo de relaciones en Eloquent y Laravel, debemos tener creadas las tablas que vayamos a relacionar y establecer la relaci\u00f3n entre ellas a trav\u00e9s del m\u00e9todo hasOne . Supongamos que tenemos una tablas usuario que est\u00e1 relacionada con la tabla telefono . <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Usuario extends Model { /** * Obtener el Tel\u00e9fono asocioado con el Usuario */ public function telefono () { return $this -> hasOne ( Telefono :: class ); } } Una vez hecho \u00e9sto, para poder recuperar el dato relacionado, debemos utilizar las propiedades din\u00e1micas de Eloquent. Con estas propiedades din\u00e1micas podremos obtener dicho dato. <?php $telefono = Usuario :: find ( 1 ) -> telefono ; En este caso, Eloquent asume que en Usuario existe la clave ajena usuario_id pero \u00bfqu\u00e9 pasa si tenemos otro nombre? pues se lo pasamos como par\u00e1metro. <?php return $this -> hasOne ( Telefono :: class , 'clave_ajena' );","title":"Uno a uno (1 a 1)"},{"location":"07frameworks.html#uno-a-uno-inversa","text":"Ahora que podemos acceder al modelo tel\u00e9fono desde el modelo usuario, vamos a ver c\u00f3mo hacerlo de manera inversa, es decir, c\u00f3mo acceder desde el m\u00f3delo usuario desdel el modelo telefono gracias al m\u00e9todo belongsTo() . <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Telefono extends Model { public function usuario () { return $this -> belongsTo ( Usuario :: class ); } } Al llamar el m\u00e9todo de usuario , Eloquent intentar\u00e1 encontrar un modelo de usuario que tenga un id que coincida con la columna de usuario_id en el modelo de telefono . Eloquent determina el nombre de la clave externa examinando el nombre del m\u00e9todo de relaci\u00f3n y agregando el sufijo _id al nombre del m\u00e9todo. Entonces, asume que el modelo Telefono tiene una columna usuario_id . Sin embargo, si no se llama de esa manera, puedes pasarle como argumento el nombre de la clave. <?php public function usuario () { return $this -> belongsTo ( Usuario :: class , 'clave_ajena' ); }","title":"Uno a Uno INVERSA"},{"location":"07frameworks.html#uno-a-muchos-1-a-mm","text":"En este caso, las relaciones de 1 a muchos podemos decir que en una entrada de un blog, o en un post de Facebook, hay muchos comentarios relacionados a esa misma publicaci\u00f3n. Para empezar, ya sabemos que debemos crear el modelo y en este caso usaremos el m\u00e9todo hasMany() para obtener los datos relacionados con ese post o entrada en el blog <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Post extends Model { public function comentarios () { return $this -> hasMany ( Comentario :: class ); } } Cuidado con las claves ajenas, que aqu\u00ed pasa lo mismo... Eloquent establece por defecto el sufijo _id por lo tanto, en este ejemplo buscar\u00eda por post_id . Si no queremos \u00e9so o nuestra clave ajena tiene otro nombre, se lo pasamos por par\u00e1metro en el m\u00e9todo hasMany como hac\u00edamos m\u00e1s arriba. Ahora, al haber m\u00e1s de un dato, necesitamos iterar, por tanto debemos crear un bucle para poder sacar cada dato. <?php use App\\Models\\Post ; $comentarios = Post :: find ( 1 ) -> comentarios ; foreach ( $comentarios as $comentario ) { // Lo que sea que hagamos con esos datos } Adem\u00e1s, como todas las relaciones son sentencias SQL, podemos anidar varios filtros en funci\u00f3n de lo que queramos sacar. $comentario = Post::find(1) -> comentarios() ->where('titulo', 'lo que sea') ->first();","title":"Uno a Muchos (1 a MM)"},{"location":"07frameworks.html#uno-a-muchos-inversa","text":"Ahora que podemos acceder a todos los comentarios de una publicaci\u00f3n, definamos una relaci\u00f3n para permitir que un comentario acceda a su publicaci\u00f3n principal. <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Comentario extends Model { public function post () { return $this -> belongsTo ( Post :: class ); } } Y ahora, a trav\u00e9s de la propiedad de relaci\u00f3n din\u00e1mica... <?php use App\\Models\\Comentario ; $comentario = Comentario :: find ( 1 ); return $comentario -> post -> titulo ; Pasar\u00eda lo mismo con el nombre de la clave ajena, si no se llama de la misma manera que Eloquent establece con el sufijo _id podemos pasarle como par\u00e1metro el nombre de la clave donde debe buscar.","title":"Uno a Muchos INVERSA"},{"location":"07frameworks.html#muchos-a-muchos-mm-a-mm","text":"Este tipo de relaciones son las m\u00e1s complicadas ya que, en un Blog del estilo Wordpress por ejemplo, un usuario puede tener muchos roles (lector, autor, administrador) pero un rol pueden tenerlo varios usuarios, es decir, puede haber muchos usuarios administradores, otros lectores y dem\u00e1s. Para realizar este tipo de relaciones necesitar\u00edamos 3 tablas diferentes. usuarios [ id, nombre] roles [id, nombre] rol_usuario [usuario_id, rol_id] (Tabla Pivote) Lo primero de todo, vamos a crear las tablas con sus modelos a excepci\u00f3n de la tabla pivote rol_usuario que s\u00f3lo crearemos la tabla, sin su modelo php artisan make:migration create_rol_usuario_table --create=rol_usuario Y la estructura de dicha seria de la siguiente manera... <?php public function up () { Schema :: create ( 'rol_usuario' , function ( Blueprint $table ) { $table -> bigIncrements ( 'id' ); $table -> unsignedInteger ( 'usuario_id' ); $table -> unsignedInteger ( 'rol_id' ); $table -> timestamps (); }); } Ahora que ya tenemos todo listo, las relaciones de Muchos a Muchos vienen definidas por un m\u00e9todo que devuelve el resultado de usar el m\u00e9todo belongsToMany() <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Usuario extends Model { public function roles () { return $this -> belongsToMany ( Rol :: class ); } } Una vez que tengamos las relaciones definidas, accederemos a ellas mediante las propiedades din\u00e1micas de rol <?php use App\\Models\\Usuario ; $usuario = Usuario :: find ( 1 ); foreach ( $usuario -> roles as $rol ) { // nuestro c\u00f3digo } Acordaros que podemos encadenar comandos sql a trav\u00e9s de los m\u00e9todos de Eloquent <?php $roles = Usuario :: find ( 1 ) -> roles () -> orderBy ( 'nombre' ) -> get ();","title":"Muchos a Muchos (MM a MM)"},{"location":"07frameworks.html#muchos-a-muchos-inversa","text":"Para definir el \"inverso\" de una relaci\u00f3n de muchos a muchos, debemos establecer un m\u00e9todo en el modelo relacionado que tambi\u00e9n devuelva el resultado del m\u00e9todo belongsToMany . Seg\u00fan el ejemplo que estamos siguiendo... <?php namespace App\\Models ; use Illuminate\\Database\\Eloquent\\Model ; class Rol extends Model { public function usuarios () { return $this -> belongsToMany ( Usuario :: class ); } } Vamos a hacer un ejemplo con una APP que gestiones alumnos y asignaturas, de tal manera que MUCHOS ALUMNOS pueden cursar MUCHAS ASIGNATURAS \u00bfQu\u00e9 necesitamos para este ejemplo? 3 migraciones para crear las tablas Alumnos /// Materias /// AlumnoMateria Modificar los archivos de las migraciones create_alumnos_table y create_materias_table . Crear la base de datos muchos_a_muchos Ejecutar las Migraciones 2 modelos para Alumnos /// Materias M\u00e9todo dentro de Alumno para crear la relaci\u00f3n Alumno -> Materia Crear el controlador para la vista Crear la ruta de nuestra vista Rellenar la base de datos Crear la vista con los datos 3 MIGRACIONES php artisan make:migration create_alumnos_table php artisan make:migration create_materias_table php artisan make:migration create_alumno_materia_table MODIFICANDO LAS MIGRACIONES create_alumnos_table.php create_materias_table.php create_alumno_materia_table.php <?php public function up () { Schema :: create ( 'alumnos' , function ( Blueprint $table ) { $table -> id (); $table -> string ( 'nombre' ); $table -> timestamps (); }); } <?php public function up () { Schema :: create ( 'materias' , function ( Blueprint $table ) { $table -> id (); $table -> string ( 'nombre' ); $table -> timestamps (); }); } <?php public function up () { Schema :: create ( 'alumno_materia' , function ( Blueprint $table ) { $table -> id (); $table -> foreignId ( 'alumno_id' ) -> nullable () -> constrained ( 'alumnos' ) -> cascadeOnUpdate () -> nullOnDelete (); $table -> foreignId ( 'materia_id' ) -> nullable () -> constrained ( 'materias' ) -> cascadeOnUpdate () -> nullOnDelete (); $table -> timestamps (); }); } CREAMOS LA BASE DE DATOS Para este ejemplo, vamos a crear una base de datos que se llame muchos_a_muchos desde la consola de MySQL o MariaDB. CREATE TABLE `muchos_a_muchos` EJECUTANDO LAS MIGRACIONES Ya tenemos las migraciones creadas y la base de datos lista para insertar el contenido de las migraciones que hemos escrito m\u00e1s arriba, lo que nos queda es ejecutar las migraciones para volcar toda la estructura en nuestra nueva base de datos. php artisan migrate 2 MODELOS PARA ALUMNOS Y MATERIAS php artisan make:model Alumno php artisan make:model Materia M\u00c9TODOS PARA CREAR LAS RELACIONES ALUMNO <-> MATERIA Alumno.php Materia.php <?php public function materias () { return $this -> belongsToMany ( Materia :: class , 'alumno_materia' ); } <?php public function alumnos () { return $this -> belongsToMany ( Alumno :: class , 'alumno_materia' ); } CREANDO EL CONTROLADOR DE LA VISTA Necesitamos un controlador para redireccionar las rutas a las vistas que nosotros queramos, para ello crearemos el controlador RelacionController php artisan make:controller RelacionController CREANDO RUTAS Ahora que ya tenemos nuestro controlador, vamos a crear una \u00fanica vista para mostrar el ejemplo de la relaci\u00f3n MUCHOS a MUCHOS, en este caso un alumno determinado. Adem\u00e1s, en nuestro controlador RelacionController vamos a escribir el c\u00f3digo necesario para que nos devuelva los datos relacionados con el alumno con id 1 y la materia con id 2 . web.php RelacionController.php <?php use App\\Http\\Controllers\\RelacionController ; use Illuminate\\Support\\Facades\\Route ; Route :: get ( 'muchos' , [ RelacionController :: class , 'index' ]); <?php namespace App\\Http\\Controllers ; use App\\Models\\Alumno ; use App\\Models\\Materia ; use Illuminate\\Http\\Request ; class RelacionController extends Controller { public function index () { $alumno = Alumno :: find ( 1 ); $materia = Materia :: find ( 2 ); return view ( 'muchos' , compact ( 'alumno' , 'materia' )); } } RELLENANDO LA BASE DE DATOS Necesitamos meter algunos registros en nuestra base de datos, por tanto, vamos a crear varios datos en nuestro sistema con las siguientes sentencias SQL. Tabla Alumnos Tabla Materias Tabla Alumno_Materia INSERT INTO alumnos ( ` nombre ` ) VALUES ( 'Antonio' ), ( 'Laura' ), ( 'Marta' ), ( 'Pedro' ); INSERT INTO materias ( ` nombre ` ) VALUES ( 'Programacion' ), ( 'Interfaces' ), ( 'JavaScript' ), ( 'Sistemas' ); INSERT INTO alumno_materia ( ` alumno_id ` , ` materia_id ` ) VALUES ( 1 , 2 ), ( 1 , 4 ), ( 3 , 2 ), ( 3 , 1 ), ( 2 , 3 ), ( 2 , 4 ), ( 4 , 4 ), ( 4 , 1 ); CREANDO LA VISTA CON LOS DATOS El \u00faltimo paso que vamos a hacer es, listar los datos relacionados en una vista o plantilla Blade sencilla. Para ello nos creamos el archivo muchos.blade.php ya que es el nombre que hemos puesto en nuestro archivo de rutas. Alumnos que cursan materias Materias cursadas por alumnos < div class = \"row justify-content-center\" > < div class = \"col-auto\" > < h3 > Alumno {{ $alumno -> nombre }} est\u00e1 cursando las materias </ h3 > < table class = \"table table-striped table-hover\" > < thead class = \"bg-primary text-white\" > < th > MATERIAS </ th > </ thead > < tbody > @foreach ($alumno -> materias as $registro) < tr > < td > {{ $registro -> nombre }} </ td > </ tr > @endforeach </ tbody > </ table > </ div > </ div > < div class = \"row justify-content-center\" > < div class = \"col-auto\" > < h3 > La materia {{ $materia -> nombre }} la est\u00e1n cursando los alumnos </ h3 > < table class = \"table table-striped table-hover\" > < thead class = \"bg-primary text-white\" > < th > ALUMNOS </ th > </ thead > < tbody > @foreach ($materia -> alumnos as $registro) < tr > < td > {{ $registro -> nombre }} </ td > </ tr > @endforeach </ tbody > </ table > </ div > </ div >","title":"Muchos a Muchos INVERSA"},{"location":"07frameworks.html#actividades","text":"Crea un sitio web con Laravel que contenga el t\u00edtulo \"Bienvenidos a Laravel\", un texto de bienvenida (puede ser un poco de Lorem Ipsum) y a continuaci\u00f3n un men\u00fa de navegaci\u00f3n con sus correspondientes alias y los siguientes enlaces: Inicio enlace a la p\u00e1gina principal donde se visualizar\u00e1 el texto de Lorem Ipsum adem\u00e1s de los elementos est\u00e1ticos (T\u00edtulo y men\u00fa de navegaci\u00f3n). Nosotros enlace que vaya a la p\u00e1gina \"nosotros\" y muestre, adem\u00e1s de los elementos est\u00e1ticos de todo el sitio, un h2 que diga \"Est\u00e1s en la secci\u00f3n Nosotros\" Proyecto enlace que cargue una vista con el siguiente texto \"Est\u00e1s en el proyecto numero: X\" donde X es un n\u00famero entero que podamos introducirlo en la propia ruta. Si no se mete ning\u00fan n\u00famero en la ruta, por defecto tiene que ser 1; por ejemplo http://localhost:8000s/proyecto/210937 Recuerda que el t\u00edtulo y el men\u00fa de navegaci\u00f3n han de aparecer en todas las vistas que cargues. Utilizando las estructuras de control y los controladores crea un sitio web que contenga lo siguiente: Inicio p\u00e1gina principal con un t\u00edtulo que diga \"Bienvenid@s a FOTO \u2591\u2592\u2593 BLOG\" y un texto de bienvenida (con un par de frases sobra) Nosotros un t\u00edtulo de la secci\u00f3n en la que te encuentras y un listado de 3 personas diferentes que, cada uno de los nombres mostrar\u00e1 un texto descriptivo de cada persona cuando pinchemos sobre su nombre. Fotos Una secci\u00f3n que aparezca el texto \"Est\u00e1s visualizando la foto con el ID: X\" donde X es un par\u00e1metro que depender\u00e1 de la ruta que se haya introducido. Por defecto, si no se introduce dicho par\u00e1metro \u00e9ste debe valer 1. Como elementos est\u00e1ticos debe aparecer: Imagen como logtipo El t\u00edtulo FOTO \u2591\u2592\u2593 BLOG a la derecha del logotipo Men\u00fa de navegaci\u00f3n para moverse por las distintas secciones Puedes usar Bootstrap como algo opcional para practicar. Recuerda que viene incluido con la instalaci\u00f3n de Laravel. Crear el proyecto CholloSevero: Crea un nuevo repositorio para el proyecto Configura el .gitignore para no incluir en el repo los siguientes archivos y carpetas: carpeta vendor archivos .env y cualquier archivo que empiece por . excepto el .gitignore La p\u00e1gina principal del sitio debe ser un listado con todos los chollos disponibles Configura la base de datos con Eloquent, olv\u00eddate de usar la consola mysql Crea una vista para las siguientes acciones: Crear un chollo Editar un chollo La tabla Chollo debe contener las siguientes columnas: id \u00fanico y autoincremental titulo un t\u00edtulo para el chollo descripcion descripcion del chollo url un campo para introducir la URL externa del chollo categoria albergar\u00e1 la categor\u00eda de los chollos puntuacion un n\u00famero entero que indique la puntuaci\u00f3n del chollo precio para albergar el precio del chollo precio_descuento para albergar el nuevo precio disponible de tipo boolean Por lo menos, el sitio debe contener un controlador de Laravel; puedes crear tantos como creas necesarios pero m\u00ednimo debe haber uno. ::: Elementos est\u00e1ticos Como ya hemos visto, hay ciertos elementos que siempre se muestran en todas las vistas del sitio web. A continuaci\u00f3n se listan los elementos que deben estar si o si en todas las plantillas que cre\u00e9is. Logo del sitio y el t\u00edtulo Chollo \u2591\u2592\u2593 Severo Inicio | Nuevos | Destacados Un footer con vuestro nombre y alg\u00fan dato copyright del tipo \u00a9CholloSevero 2022 donde el a\u00f1o debe ser calculado a trav\u00e9s de la fecha del servidor. ::: Pag\u00edna principal Adem\u00e1s del listado de todos los chollos de la base de datos debe contener el men\u00fa de navegaci\u00f3n: Cada chollo debe ser accesible desde este listado Cada chollo debe contener una imagen que estar\u00e1 guardada en public/img Cada chollo debe contener sus botones de editar y borrar que haga las funciones que tocan. Puedes utilizar iconos para cada uno de los botones. El nombre de las im\u00e1genes debe estar compuesta por la siguiente f\u00f3rmula idChollo -chollo-severo. extension Por ejemplo: 25-chollo-severo.jpg La imagen del chollo no se sube a trav\u00e9s del formulario, la pones directamente en la carpeta. Si te animas a subirlo a trav\u00e9s del formulario, puedes hacerlo. ::: P\u00e1gina de Chollo Cuando pinchemos en uno de los chollos del listados debemos ser redireccionados a esta vista donde podremos ver toda la informaci\u00f3n del tabla chollo. Puedes maquetarla como quieras e incluso puedes basarte en la web de Chollo Metro . El campo disponible no es necesario que lo muestres en esta vista ::: P\u00e1gina de Crear un chollo Un formulario con los campos necesarios para poder crear un chollo nuevo. Adem\u00e1s, debes tener en cuenta que tienes que validar los campos, de tal manera que no se pueda enviar el formulario si se ha dejado alg\u00fan campo en blanco; dichas validaciones, adem\u00e1s de a\u00f1adir la propiedad required de HTML5 debes hacerlo con Laravel. En caso de que haya habido alg\u00fan error en el formulario debes mostrar un mensaje en la parte de arriba del mismo con el mensaje de error (por ejemplo, si el campo est\u00e1 vac\u00edo). ::: P\u00e1gina de Editar un chollo Muy parecida a la de Crear un chollo pero que puedas editar un Chollo en funci\u00f3n de su id . Acu\u00e9rdate que no puedes dejar ning\u00fan campo vac\u00edo, para ello has de utilizar las validaciones de Laravel. \u2591\u2592\u2593 COSAS A TENER EN CUENTA \u2591\u2592\u2593 - Tienes que usar Bootstrap o Material Design , aunque si lo prefieres puedes hacer tus propios archivos .css Los mensajes de error o de informaci\u00f3n deben estar estilizados para que el usuario pueda verlos con facilidad Los elementos est\u00e1ticos deben estar presentes en todas las vistas; incluidas las de editar y crear. Las plantillas que formen parte de otra ya creada deben estar en una carpeta con el nombre de la plantilla madre, como hicimos con el ejercicio de Notas : Ve haciendo commits en funci\u00f3n de las tareas que vayas acabando o que veas que el commit tiene sentido. No es buena pr\u00e1ctica subir los camios de un archivo y el siguiente commit volver a subir m\u00e1s cambios del mismo archivo (a no ser que nos hayamos saltado o equivocado en algo). El proyecto es individual y despu\u00e9s se presentar\u00e1, uno por uno al profesor para que eval\u00fae todos los aspectos del mismo. Se har\u00e1n preguntas de c\u00f3mo se ha hecho cierta cosa o por qu\u00e9 se ha determinado cierto flujo de trabajo as\u00ed que, no os copi\u00e9is porque se eval\u00faa tambi\u00e9n la presentaci\u00f3n del proyecto","title":"Actividades"},{"location":"08frameworks2.html","text":"Uso avanzado de Frameworks \u00b6 Plantillas con Blade \u00b6 Integraci\u00f3n de CSS y JS \u00b6 Autenticaci\u00f3n y autorizaci\u00f3n \u00b6 https://igomis.github.io/apunts/docs/4.8.Laravel.html Tip Pregunta Respuesta Relacion P-R Autenticaci\u00f3n Relacion con usuario en modelo Relacionar con migraciones Relacionar en vistas Proteger edit, update por Auth:id p\u00e1gina profile ... listado de preguntas y respuestas del usuario Utilizar la fuci\u00f3n diffForHumas para ellapsed time Antes se hac\u00eda as\u00ed.... Run scaffolding php artisan make:auth Crea el HomeController , que utiliza el middleware auth . Middleware \u00b6 Componente que se situa entre el enrutador y el controlador. Explicar Ejecutar las migraciones Explorar los ficheros generados Auth:routes() ??? Laravel Breeze \u00b6 Laravel Breeze es un starter kit que se compone de un conjunto de rutas, controladores y vistas necesarias para regitrar y autenticar usuarios en cualquier aplicaci\u00f3n. Las vistas est\u00e1n creadas con Laravel y los estilos con Tailwind CSS. Primero hemos de a\u00f1adir la dependencia mediante Composer: composer require laravel/breeze --dev Tras ello, ejecutaremos el comando breeze:install para generar todo el contenido necesario (rutas, vistas, controladores, recursos, ...), compilaremos todos los assets CSS y generaremos las migraciones: php artisan breeze:install npm install npm run dev php artisan migrate Mailtrap Para poder probar el env\u00edo de correo mailtrap.io, servidor de correo para pruebas para equipos de desarrollo (realmente no est\u00e1 env\u00edando los correos) i18n \u00b6","title":"8.- \u00das avan\u00e7at de Frameworks"},{"location":"08frameworks2.html#uso-avanzado-de-frameworks","text":"","title":"Uso avanzado de Frameworks"},{"location":"08frameworks2.html#plantillas-con-blade","text":"","title":"Plantillas con Blade"},{"location":"08frameworks2.html#integracion-de-css-y-js","text":"","title":"Integraci\u00f3n de CSS y JS"},{"location":"08frameworks2.html#autenticacion-y-autorizacion","text":"https://igomis.github.io/apunts/docs/4.8.Laravel.html Tip Pregunta Respuesta Relacion P-R Autenticaci\u00f3n Relacion con usuario en modelo Relacionar con migraciones Relacionar en vistas Proteger edit, update por Auth:id p\u00e1gina profile ... listado de preguntas y respuestas del usuario Utilizar la fuci\u00f3n diffForHumas para ellapsed time Antes se hac\u00eda as\u00ed.... Run scaffolding php artisan make:auth Crea el HomeController , que utiliza el middleware auth .","title":"Autenticaci\u00f3n y autorizaci\u00f3n"},{"location":"08frameworks2.html#middleware","text":"Componente que se situa entre el enrutador y el controlador. Explicar Ejecutar las migraciones Explorar los ficheros generados Auth:routes() ???","title":"Middleware"},{"location":"08frameworks2.html#laravel-breeze","text":"Laravel Breeze es un starter kit que se compone de un conjunto de rutas, controladores y vistas necesarias para regitrar y autenticar usuarios en cualquier aplicaci\u00f3n. Las vistas est\u00e1n creadas con Laravel y los estilos con Tailwind CSS. Primero hemos de a\u00f1adir la dependencia mediante Composer: composer require laravel/breeze --dev Tras ello, ejecutaremos el comando breeze:install para generar todo el contenido necesario (rutas, vistas, controladores, recursos, ...), compilaremos todos los assets CSS y generaremos las migraciones: php artisan breeze:install npm install npm run dev php artisan migrate Mailtrap Para poder probar el env\u00edo de correo mailtrap.io, servidor de correo para pruebas para equipos de desarrollo (realmente no est\u00e1 env\u00edando los correos)","title":"Laravel Breeze"},{"location":"08frameworks2.html#i18n","text":"","title":"i18n"},{"location":"09rest.html","text":"img { margin: 20px 0; border-radius: 8px; } .alert { color: #BD1550; } .warning { color: #E97F02; } .success { color: #8A9B0F; } .center { text-align: center; } .right { text-align: right; } .img-small { max-width: 200px; margin: auto; } .img-medium { max-width: 400px; margin: auto; } .img-large { max-width: 800px; margin: auto; } .leyenda { font-size: small; margin: 10px 0; } Servicios REST \u00b6 Duraci\u00f3n estimada: 32 sesiones API \u00b6 Una API (Application Programming Interface) es un conjunto de funciones y procedimientos por los cuales, una aplicaci\u00f3n externa accede a los datos, a modo de biblioteca como una capa de abstracci\u00f3n y la API se encarga de enviar el dato solicitado. Una de las caracter\u00edsticas fundamentales de las API es que son Sateless , lo que quiere decir que las peticiones se hacen y desaparecen, no hay usuarios logueados ni datos que se quedan almacenados. Ejemplos de APIs gratuitas: ChuckNorris IO OMDB PokeAPI - Pokemon RAWg - Videojuegos The Star Wars API Para hacer pruebas con estas APIs podemos implementar el c\u00f3digo para consumirlas o utilizar un cliente especial para el consumo de estos servicios. PostMan Thunder Client Insomnia Advance REST Client (desde el navegador) REST \u00b6 Con esta metodolog\u00eda llamada REST vamos a poder construir APIs para que desde un cliente externo se puedan consumir. Gracias a este standard de la arquitectura del software vamos a poder montar un API que utilice los m\u00e9todos standard GET, POST, PUT y DELETE. Creando Recurso (Resource) \u00b6 Para crear un recurso dentro de nuestra aplicaci\u00f3n hecha con Laravel, necesitamos crear un controlador del tipo resource donde establezcamos los m\u00e9todos que nosotros queramos realizar a la hora de trabajar con los datos php artisan make:controller ChollosController --resource Artisan nos crear\u00e1 un nuevo controlador en la carpeta controllers con el nombre ChollosController o el nombre que le hayamos pasado. La estructura de este archivo es un poco diferente a los controladores que ya hemos visto anteriormente. Ahora tenemos los siguientes m\u00e9todos creados de manera autom\u00e1tica: index() normalmente para listar, en nuestro caso los chollos create() para crear plantillas (no lo vamos a usar) store() para guardar los datos que pasemos a la API update() para actualizar un dato ya existente en la BDD delete() para eliminar un dato ya existente en la BDD En el caso de devolver un listado con todos los chollos, lo primero que debemos hacer es importar nuestro modelo Chollo. <?php use App\\Models\\Chollo ; Y como hemos ido haciendo en controladores anteriores, necesitamos hacer la consulta apropiada para devolver todos los chollos. CUIDADO CON EL RETURN porque ahora no estamos devolviendo una vista sino un array de datos en formato JSON. <?php public function index () { $chollos = Chollo :: all (); return $chollos ; } El \u00faltimo paso ser\u00eda configurar el archivo de rutas, pero en este caso el archivo de rutas de la api se llama api.php <?php // estamos en \u2593\u2593\u2593 api.php use App\\Http\\Controllers\\ChollosController ; use Illuminate\\Http\\Request ; use Illuminate\\Support\\Facades\\Route ; Route :: get ( '/chollos' , [ ChollosController :: class , 'index' ]); Una vez hecho \u00e9sto, debemos poner en marcha nuestro servidor. php artisan serve Ahora ya podemos usar el Postman o cualquier cliente de la misma \u00edndole para testear nuestra API a trav\u00e9s de la URL de nuestro servidor http://127.0.0.1:8000/api/chollos Recuperando datos en vista BLADE \u00b6 Ya tenemos nuestra API montada y puede ser consumida a trav\u00e9s del navegador o cualquier cliente como PostMan o Thunder Client pero lo que nos interesa ahora es poder listar la informaci\u00f3n en una vista como hac\u00edamos en el tema anterior. Lo que vamos a tener que hacer es lo siguiente Modificar el Controlador para que consuma de la API Convertir el tipo de dato que nos devuelve la API como respuesta Utilizar una estructura de control forEach dentro de nuestra vista Acceder a cada clave del objeto JSON recibido en la vista blade Vamos a modificar el controlador para que consuma de la API y convertimos los datos con el m\u00e9todo collect() . Para la llamada debemos importar Http . <?php // estamos en \u2593\u2593\u2593 CholloController.php use App\\Models\\Chollo ; // EN CASO DE API LOCAL use Illuminate\\Support\\Facades\\Http ; // INDISPENSABLE EN CASO DE API EXTERNA class RestController extends Controller { public function index () { // $restChollos = Http::get('http://localhost/api/chollos') -> collect(); // PARA API EXTERNA $chollos = Chollo :: all (); return view ( 'rest' , compact ( 'chollos' )); } } Modificamos nuestra vista blade para poder listar los datos correctamente o si lo prefieres, puedes crear una ruta nueva e incluso un nuevo controlador que se encargue de manejar las llamadas a la API. El nombre que va entre corchetes es el nombre de las columnas de la tabla de la base de datos <?php // estamos en \u2593\u2593\u2593 chollos.blade.php @ foreach ( $chollos as $chollo ) < p > ID : {{ $chollo -> id }} </ p > // Columna ID < p > Nombre : {{ $chollo -> nombre }} </ p > // Columna NOMBRE < p > Descripci\u00f3n : {{ $chollo -> descripcion }} </ p > // Columna DESCRIPCION // [...] < hr > @ endforeach Enviando datos (POST) \u00b6 En una API, para poder enviar datos y que se guarden en la base de datos, debemos usar el m\u00e9todo post bajo Http y pasarle los nuevos datos como un array asociativo, poniendo como clave el nombre de las columnas de la base de datos <?php $response = Http :: post ( 'http://localhost:8000/api/chollo-severo' , [ 'titulo' => 'Chollazo para este producto' , 'descripcion' => 'Lorem ipsum dolo...' , // [...] ]); Actividades \u00b6 Chollo Severo V 2.0 Crea un controlador nuevo que se llame RestController (o como quieras llamarlo) y escribe todos los m\u00e9todos que necesites para convertir tu app que, consume de una Base de Datos, a una Restful App que reciba los datos a trav\u00e9s de la API de tu proyecto de Chollos.","title":"8.- Serveis REST"},{"location":"09rest.html#servicios-rest","text":"Duraci\u00f3n estimada: 32 sesiones","title":"Servicios REST"},{"location":"09rest.html#api","text":"Una API (Application Programming Interface) es un conjunto de funciones y procedimientos por los cuales, una aplicaci\u00f3n externa accede a los datos, a modo de biblioteca como una capa de abstracci\u00f3n y la API se encarga de enviar el dato solicitado. Una de las caracter\u00edsticas fundamentales de las API es que son Sateless , lo que quiere decir que las peticiones se hacen y desaparecen, no hay usuarios logueados ni datos que se quedan almacenados. Ejemplos de APIs gratuitas: ChuckNorris IO OMDB PokeAPI - Pokemon RAWg - Videojuegos The Star Wars API Para hacer pruebas con estas APIs podemos implementar el c\u00f3digo para consumirlas o utilizar un cliente especial para el consumo de estos servicios. PostMan Thunder Client Insomnia Advance REST Client (desde el navegador)","title":"API"},{"location":"09rest.html#rest","text":"Con esta metodolog\u00eda llamada REST vamos a poder construir APIs para que desde un cliente externo se puedan consumir. Gracias a este standard de la arquitectura del software vamos a poder montar un API que utilice los m\u00e9todos standard GET, POST, PUT y DELETE.","title":"REST"},{"location":"09rest.html#creando-recurso-resource","text":"Para crear un recurso dentro de nuestra aplicaci\u00f3n hecha con Laravel, necesitamos crear un controlador del tipo resource donde establezcamos los m\u00e9todos que nosotros queramos realizar a la hora de trabajar con los datos php artisan make:controller ChollosController --resource Artisan nos crear\u00e1 un nuevo controlador en la carpeta controllers con el nombre ChollosController o el nombre que le hayamos pasado. La estructura de este archivo es un poco diferente a los controladores que ya hemos visto anteriormente. Ahora tenemos los siguientes m\u00e9todos creados de manera autom\u00e1tica: index() normalmente para listar, en nuestro caso los chollos create() para crear plantillas (no lo vamos a usar) store() para guardar los datos que pasemos a la API update() para actualizar un dato ya existente en la BDD delete() para eliminar un dato ya existente en la BDD En el caso de devolver un listado con todos los chollos, lo primero que debemos hacer es importar nuestro modelo Chollo. <?php use App\\Models\\Chollo ; Y como hemos ido haciendo en controladores anteriores, necesitamos hacer la consulta apropiada para devolver todos los chollos. CUIDADO CON EL RETURN porque ahora no estamos devolviendo una vista sino un array de datos en formato JSON. <?php public function index () { $chollos = Chollo :: all (); return $chollos ; } El \u00faltimo paso ser\u00eda configurar el archivo de rutas, pero en este caso el archivo de rutas de la api se llama api.php <?php // estamos en \u2593\u2593\u2593 api.php use App\\Http\\Controllers\\ChollosController ; use Illuminate\\Http\\Request ; use Illuminate\\Support\\Facades\\Route ; Route :: get ( '/chollos' , [ ChollosController :: class , 'index' ]); Una vez hecho \u00e9sto, debemos poner en marcha nuestro servidor. php artisan serve Ahora ya podemos usar el Postman o cualquier cliente de la misma \u00edndole para testear nuestra API a trav\u00e9s de la URL de nuestro servidor http://127.0.0.1:8000/api/chollos","title":"Creando Recurso (Resource)"},{"location":"09rest.html#recuperando-datos-en-vista-blade","text":"Ya tenemos nuestra API montada y puede ser consumida a trav\u00e9s del navegador o cualquier cliente como PostMan o Thunder Client pero lo que nos interesa ahora es poder listar la informaci\u00f3n en una vista como hac\u00edamos en el tema anterior. Lo que vamos a tener que hacer es lo siguiente Modificar el Controlador para que consuma de la API Convertir el tipo de dato que nos devuelve la API como respuesta Utilizar una estructura de control forEach dentro de nuestra vista Acceder a cada clave del objeto JSON recibido en la vista blade Vamos a modificar el controlador para que consuma de la API y convertimos los datos con el m\u00e9todo collect() . Para la llamada debemos importar Http . <?php // estamos en \u2593\u2593\u2593 CholloController.php use App\\Models\\Chollo ; // EN CASO DE API LOCAL use Illuminate\\Support\\Facades\\Http ; // INDISPENSABLE EN CASO DE API EXTERNA class RestController extends Controller { public function index () { // $restChollos = Http::get('http://localhost/api/chollos') -> collect(); // PARA API EXTERNA $chollos = Chollo :: all (); return view ( 'rest' , compact ( 'chollos' )); } } Modificamos nuestra vista blade para poder listar los datos correctamente o si lo prefieres, puedes crear una ruta nueva e incluso un nuevo controlador que se encargue de manejar las llamadas a la API. El nombre que va entre corchetes es el nombre de las columnas de la tabla de la base de datos <?php // estamos en \u2593\u2593\u2593 chollos.blade.php @ foreach ( $chollos as $chollo ) < p > ID : {{ $chollo -> id }} </ p > // Columna ID < p > Nombre : {{ $chollo -> nombre }} </ p > // Columna NOMBRE < p > Descripci\u00f3n : {{ $chollo -> descripcion }} </ p > // Columna DESCRIPCION // [...] < hr > @ endforeach","title":"Recuperando datos en vista BLADE"},{"location":"09rest.html#enviando-datos-post","text":"En una API, para poder enviar datos y que se guarden en la base de datos, debemos usar el m\u00e9todo post bajo Http y pasarle los nuevos datos como un array asociativo, poniendo como clave el nombre de las columnas de la base de datos <?php $response = Http :: post ( 'http://localhost:8000/api/chollo-severo' , [ 'titulo' => 'Chollazo para este producto' , 'descripcion' => 'Lorem ipsum dolo...' , // [...] ]);","title":"Enviando datos (POST)"},{"location":"09rest.html#actividades","text":"Chollo Severo V 2.0 Crea un controlador nuevo que se llame RestController (o como quieras llamarlo) y escribe todos los m\u00e9todos que necesites para convertir tu app que, consume de una Base de Datos, a una Restful App que reciba los datos a trav\u00e9s de la API de tu proyecto de Chollos.","title":"Actividades"},{"location":"planning.html","text":"Planificaci\u00f3 \u00b6 1.- Arquitectures Web (3h) \u00b6 1.- (1) Introducci\u00f3n asignatura. Arquitecturas, decisiones de dise\u00f1o Herramientas. Puesta en marcha / Docker - Ejercicios 101,102,103,104 2.- El llenguatge PHP (26h) \u00b6 1.- (3) Sintaxis. Ejercicios 201-207 2.- (4) Condiciones. Ejercicios 208-213 3.- (5) Bucles. Ejercicios 220-223 - 4.- (6) Ejercicios 224-228 5.- (7) Arrays, asociativos. Ejercicios 230-235 6.- (8) Array bidimensionales. Ejercicios 236-238 7.- (9) Funciones, par\u00e1metros por defecto y con nombre. Ejercicios 240-242 - Lunes 27/09/21 8.- (10) Alcance y Funciones variable. Biblioteca de funciones. Ejercicios 243-245 9.- (11) Plantillas. Ejercicios 246-247. 10.- (12) Cadenas. Ejercicios 250-253 11.- (13) Subcadenas. Ejercicios 254-257 - 12.- (14) Math y tipos de datos. Ejercicios 260-262 13.- (15) Prueba escrita - 3.- PHP Orientat a Objectes (18h) \u00b6 1.- (16) Clases y objetos. Constructor. Ejercicios 300-303 - Jueves 14/10/21 2.- (17) Clases est\u00e1ticas. Herencia. Ejercicios 304-307 3.- (18) Herencia. Clases abstractas. Ejercicios 308-311 - Lunes 18/10/21 4.- (19) Interfaces. Ejercicios 312-314 5.- (20) Proyecto Videoclub I. Ejercicios 320-323 6.- (21) Proyecto Videoclub I. Ejercicios 324-328 7.- (22) M\u00e9todos encadenados. Namespaces. Ejercicios 330-332 - Lunes 25/10/21 8.- (23) Excepciones. Ejercicios 333-334 9.- (24) Proyecto Videoclub II. Ejercicios 335-337 4.- Programaci\u00f3 Web (12h) \u00b6 1.- (25) Formularios. Ejercicios 401-403 2.- (26) Upload. Cookies. Ejercicios 404-406 - Martes 2/11/21 3.- (27) Cookies. Sesi\u00f3n. Ejercicios 407-409 4.- (28) Gesti\u00f3n de usuarios. Ejercicios 410-415 5.- (29) Proyecto Videoclub III. Ejercicios 420-423 - Lunes 8/11/21 6.- (30) Proyecto Videoclub III. Ejercicios 424-426 5.- Ferramentes Web (16h) \u00b6 1.- (31) Composer. Introducci\u00f3n Monolog. Ejercicio 501 2.- (32) Manejadores. Uso de logs con Monolog . Ejercicios 502 - 503 3.- (33) Proyecto Videoclub IV. Ejercicios 511 - 515 / Lunes 15/11/21 4.- (34) Documentaci\u00f3n con phpDocumentor . Ejercicios 521 - 522. 5.- (35) Webscrapping. Ejercicios 531 - 533. 6.- (36) Pruebas con PhpUnit . Ejercicios 541 - 545. 7.- (37) Proyecto Videoclub V. Ejercicios 551 - 554. - Lunes 22/11/21 8.- (38) Prueba escrita 6.- Acc\u00e8s a Dades (24h) \u00b6 1.- (39) SQL. Ejercicios 601 - Jueves 25/11/21 2.- (40) PDO. Ejercicios - 3.- (41) . Ejercicios - Lunes 29/11/21 4.- (42) . Ejercicios - 5.- (43) CSV. Ejercicios - 6.- (44) PDF. Ejercicios - 7.- (45) Eloquent. Ejercicios - Martes 7/12/21 8.- (46) Migraciones. . Ejercicios - 9.- (47) . Ejercicios - 10.- (48) ORM. Ejercicios - 11.- (49) . Ejercicios - Martes 14/12/21 12.- (50) . Ejercicios - Proyecto Innova - Fase I \u00b6 Del Mi\u00e9rcoles 15 al Martes 21 de Diciembre. 7.- Frameworks PHP (32h) \u00b6 1.- (51) Introduccion a Laravel - Lunes 10/01/22 2.- (52) Rutas 3.- (53) Plantillas 4.- (54) Controladores 5.- (55) Migraciones & Eloquent Lunes 17/01/22 6.- (56) 7.- (57) 8.- (58) 9.- (59) Lunes 24/01/22 10.- (60) 11.- (61) 12.- (62) 13.- (63) Ejercicio 801 - Lunes 31/01/22 14.- (64) 15.- (65) 16.- (66) 8.- Serveis REST (22h) \u00b6 1.- (67) Lunes 7/02/22 2.- (68) 3.- (69) 4.- (70) 5.- (71) Lunes 14/02/22 6.- (72) 7.- (73) 8.- (74) 9.- (75) Lunes 21/02/22 10.- (76) 11.- (77) Prueba pr\u00e1ctica final - Jueves 24/02/22 Proyecto Innova - Fase II \u00b6 Del 25 de Febrero al 3 de Marzo. Total = 154h de sesiones lectivas + 16h de proyectos innova = 170h reales.","title":"Planificaci\u00f3"},{"location":"planning.html#planificacio","text":"","title":"Planificaci\u00f3"},{"location":"planning.html#1-arquitectures-web-3h","text":"1.- (1) Introducci\u00f3n asignatura. Arquitecturas, decisiones de dise\u00f1o Herramientas. Puesta en marcha / Docker - Ejercicios 101,102,103,104","title":"1.- Arquitectures Web (3h)"},{"location":"planning.html#2-el-llenguatge-php-26h","text":"1.- (3) Sintaxis. Ejercicios 201-207 2.- (4) Condiciones. Ejercicios 208-213 3.- (5) Bucles. Ejercicios 220-223 - 4.- (6) Ejercicios 224-228 5.- (7) Arrays, asociativos. Ejercicios 230-235 6.- (8) Array bidimensionales. Ejercicios 236-238 7.- (9) Funciones, par\u00e1metros por defecto y con nombre. Ejercicios 240-242 - Lunes 27/09/21 8.- (10) Alcance y Funciones variable. Biblioteca de funciones. Ejercicios 243-245 9.- (11) Plantillas. Ejercicios 246-247. 10.- (12) Cadenas. Ejercicios 250-253 11.- (13) Subcadenas. Ejercicios 254-257 - 12.- (14) Math y tipos de datos. Ejercicios 260-262 13.- (15) Prueba escrita -","title":"2.- El llenguatge PHP (26h)"},{"location":"planning.html#3-php-orientat-a-objectes-18h","text":"1.- (16) Clases y objetos. Constructor. Ejercicios 300-303 - Jueves 14/10/21 2.- (17) Clases est\u00e1ticas. Herencia. Ejercicios 304-307 3.- (18) Herencia. Clases abstractas. Ejercicios 308-311 - Lunes 18/10/21 4.- (19) Interfaces. Ejercicios 312-314 5.- (20) Proyecto Videoclub I. Ejercicios 320-323 6.- (21) Proyecto Videoclub I. Ejercicios 324-328 7.- (22) M\u00e9todos encadenados. Namespaces. Ejercicios 330-332 - Lunes 25/10/21 8.- (23) Excepciones. Ejercicios 333-334 9.- (24) Proyecto Videoclub II. Ejercicios 335-337","title":"3.- PHP Orientat a Objectes (18h)"},{"location":"planning.html#4-programacio-web-12h","text":"1.- (25) Formularios. Ejercicios 401-403 2.- (26) Upload. Cookies. Ejercicios 404-406 - Martes 2/11/21 3.- (27) Cookies. Sesi\u00f3n. Ejercicios 407-409 4.- (28) Gesti\u00f3n de usuarios. Ejercicios 410-415 5.- (29) Proyecto Videoclub III. Ejercicios 420-423 - Lunes 8/11/21 6.- (30) Proyecto Videoclub III. Ejercicios 424-426","title":"4.- Programaci\u00f3 Web (12h)"},{"location":"planning.html#5-ferramentes-web-16h","text":"1.- (31) Composer. Introducci\u00f3n Monolog. Ejercicio 501 2.- (32) Manejadores. Uso de logs con Monolog . Ejercicios 502 - 503 3.- (33) Proyecto Videoclub IV. Ejercicios 511 - 515 / Lunes 15/11/21 4.- (34) Documentaci\u00f3n con phpDocumentor . Ejercicios 521 - 522. 5.- (35) Webscrapping. Ejercicios 531 - 533. 6.- (36) Pruebas con PhpUnit . Ejercicios 541 - 545. 7.- (37) Proyecto Videoclub V. Ejercicios 551 - 554. - Lunes 22/11/21 8.- (38) Prueba escrita","title":"5.- Ferramentes Web (16h)"},{"location":"planning.html#6-acces-a-dades-24h","text":"1.- (39) SQL. Ejercicios 601 - Jueves 25/11/21 2.- (40) PDO. Ejercicios - 3.- (41) . Ejercicios - Lunes 29/11/21 4.- (42) . Ejercicios - 5.- (43) CSV. Ejercicios - 6.- (44) PDF. Ejercicios - 7.- (45) Eloquent. Ejercicios - Martes 7/12/21 8.- (46) Migraciones. . Ejercicios - 9.- (47) . Ejercicios - 10.- (48) ORM. Ejercicios - 11.- (49) . Ejercicios - Martes 14/12/21 12.- (50) . Ejercicios -","title":"6.- Acc\u00e8s a Dades (24h)"},{"location":"planning.html#proyecto-innova-fase-i","text":"Del Mi\u00e9rcoles 15 al Martes 21 de Diciembre.","title":"Proyecto Innova - Fase I"},{"location":"planning.html#7-frameworks-php-32h","text":"1.- (51) Introduccion a Laravel - Lunes 10/01/22 2.- (52) Rutas 3.- (53) Plantillas 4.- (54) Controladores 5.- (55) Migraciones & Eloquent Lunes 17/01/22 6.- (56) 7.- (57) 8.- (58) 9.- (59) Lunes 24/01/22 10.- (60) 11.- (61) 12.- (62) 13.- (63) Ejercicio 801 - Lunes 31/01/22 14.- (64) 15.- (65) 16.- (66)","title":"7.- Frameworks PHP (32h)"},{"location":"planning.html#8-serveis-rest-22h","text":"1.- (67) Lunes 7/02/22 2.- (68) 3.- (69) 4.- (70) 5.- (71) Lunes 14/02/22 6.- (72) 7.- (73) 8.- (74) 9.- (75) Lunes 21/02/22 10.- (76) 11.- (77) Prueba pr\u00e1ctica final - Jueves 24/02/22","title":"8.- Serveis REST (22h)"},{"location":"planning.html#proyecto-innova-fase-ii","text":"Del 25 de Febrero al 3 de Marzo. Total = 154h de sesiones lectivas + 16h de proyectos innova = 170h reales.","title":"Proyecto Innova - Fase II"}]}